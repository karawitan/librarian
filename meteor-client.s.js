//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Package-scope variables */
  var global, meteorEnv, Meteor;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/global.js                                                                            //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Export a reliable global object for all Meteor code.
    global = this;

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/client_environment.js                                                                //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var config = __meteor_runtime_config__;
    meteorEnv = config.meteorEnv;

    /**
     * @summary The Meteor namespace
     * @namespace Meteor
     */
    Meteor = {
      /**
       * @summary Boolean variable.  True if running in production environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isProduction: meteorEnv.NODE_ENV === "production",

      /**
       * @summary Boolean variable.  True if running in development environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isDevelopment: meteorEnv.NODE_ENV !== "production",

      /**
       * @summary Boolean variable.  True if running in client environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isClient: true,

      /**
       * @summary Boolean variable.  True if running in server environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isServer: false,

      /**
       * @summary Boolean variable.  True if running in Cordova environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isCordova: false,

      /**
       * @summary Boolean variable. True if running in a "modern" JS
       *          environment, as determined by the `modern` package.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isModern: config.isModern
    };

    if (config.gitCommitHash) {
      /**
       * @summary Hexadecimal Git commit hash, if the application is using Git
       *          for version control. Undefined otherwise.
       * @locus Anywhere
       * @static
       * @type {String}
       */
      Meteor.gitCommitHash = config.gitCommitHash;
    }

    if (config.PUBLIC_SETTINGS) {
      /**
       * @summary `Meteor.settings` contains deployment-specific configuration options. You can initialize settings by passing the `--settings` option (which takes the name of a file containing JSON data) to `meteor run` or `meteor deploy`. When running your server directly (e.g. from a bundle), you instead specify settings by putting the JSON directly into the `METEOR_SETTINGS` environment variable. If the settings object contains a key named `public`, then `Meteor.settings.public` will be available on the client as well as the server.  All other properties of `Meteor.settings` are only defined on the server.  You can rely on `Meteor.settings` and `Meteor.settings.public` being defined objects (not undefined) on both client and server even if there are no settings specified.  Changes to `Meteor.settings.public` at runtime will be picked up by new client connections.
       * @locus Anywhere
       * @type {Object}
       */
      Meteor.settings = {
        "public": config.PUBLIC_SETTINGS
      };
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/define-package.js                                                                    //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    function PackageRegistry() {
      this._promiseInfoMap = Object.create(null);
    }

    var PRp = PackageRegistry.prototype;

    // Set global.Package[name] = pkg || {}. If additional arguments are
    // supplied, their keys will be copied into pkg if not already present.
    // This method is defined on the prototype of global.Package so that it
    // will not be included in Object.keys(Package).
    PRp._define = function definePackage(name, pkg) {
      pkg = pkg || {};

      var argc = arguments.length;
      for (var i = 2; i < argc; ++i) {
        var arg = arguments[i];
        for (var s in arg) {
          if (!(s in pkg)) {
            pkg[s] = arg[s];
          }
        }
      }

      this[name] = pkg;

      var info = this._promiseInfoMap[name];
      if (info) {
        info.resolve(pkg);
      }

      return pkg;
    };

    PRp._has = function has(name) {
      return Object.prototype.hasOwnProperty.call(this, name);
    };

    // Returns a Promise that will resolve to the exports of the named
    // package, or be rejected if the package is not installed.
    PRp._promise = function promise(name) {
      var self = this;
      var info = self._promiseInfoMap[name];

      if (!info) {
        info = self._promiseInfoMap[name] = {};
        info.promise = new Promise(function (resolve, reject) {
          info.resolve = resolve;
          if (self._has(name)) {
            resolve(self[name]);
          } else {
            Meteor.startup(function () {
              if (!self._has(name)) {
                reject(new Error("Package " + name + " not installed"));
              }
            });
          }
        });
      }

      return info.promise;
    };

    // Initialize the Package namespace used by all Meteor packages.
    global.Package = new PackageRegistry();

    if (typeof exports === "object") {
      // This code is also used by meteor/tools/isobuild/bundler.js.
      exports.PackageRegistry = PackageRegistry;
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/helpers.js                                                                           //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    if (Meteor.isServer) var Future = Npm.require('fibers/future');

    if (typeof __meteor_runtime_config__ === 'object' && __meteor_runtime_config__.meteorRelease) {
      /**
       * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `"1.2.3"`). It is `undefined` if the project was built using a git checkout of Meteor.
       * @locus Anywhere
       * @type {String}
       */
      Meteor.release = __meteor_runtime_config__.meteorRelease;
    }

    // XXX find a better home for these? Ideally they would be _.get,
    // _.ensure, _.delete..

    // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or
    // a[b][c] doesn't exist.
    //
    Meteor._get = function (obj /*, arguments */) {
      for (var i = 1; i < arguments.length; i++) {
        if (!(arguments[i] in obj)) return undefined;
        obj = obj[arguments[i]];
      }
      return obj;
    };

    // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,
    // it is created and set to {}. Either way, it is returned.
    //
    Meteor._ensure = function (obj /*, arguments */) {
      for (var i = 1; i < arguments.length; i++) {
        var key = arguments[i];
        if (!(key in obj)) obj[key] = {};
        obj = obj[key];
      }

      return obj;
    };

    // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it
    // isn't empty, then a[b] unless it isn't empty.
    //
    Meteor._delete = function (obj /*, arguments */) {
      var stack = [obj];
      var leaf = true;
      for (var i = 1; i < arguments.length - 1; i++) {
        var key = arguments[i];
        if (!(key in obj)) {
          leaf = false;
          break;
        }
        obj = obj[key];
        if (typeof obj !== "object") break;
        stack.push(obj);
      }

      for (var i = stack.length - 1; i >= 0; i--) {
        var key = arguments[i + 1];

        if (leaf) leaf = false;else for (var other in stack[i][key]) return; // not empty -- we're done

        delete stack[i][key];
      }
    };

    // wrapAsync can wrap any function that takes some number of arguments that
    // can't be undefined, followed by some optional arguments, where the callback
    // is the last optional argument.
    // e.g. fs.readFile(pathname, [callback]),
    // fs.open(pathname, flags, [mode], [callback])
    // For maximum effectiveness and least confusion, wrapAsync should be used on
    // functions where the callback is the only argument of type Function.

    /**
     * @memberOf Meteor
     * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.
     * @locus Anywhere
     * @param {Function} func A function that takes a callback as its final parameter
     * @param {Object} [context] Optional `this` object against which the original function will be invoked
     */
    Meteor.wrapAsync = function (fn, context) {
      return function () /* arguments */{
        var self = context || this;
        var newArgs = Array.prototype.slice.call(arguments);
        var callback;

        for (var i = newArgs.length - 1; i >= 0; --i) {
          var arg = newArgs[i];
          var type = typeof arg;
          if (type !== "undefined") {
            if (type === "function") {
              callback = arg;
            }
            break;
          }
        }

        if (!callback) {
          if (Meteor.isClient) {
            callback = logErr;
          } else {
            var fut = new Future();
            callback = fut.resolver();
          }
          ++i; // Insert the callback just after arg.
        }

        newArgs[i] = Meteor.bindEnvironment(callback);
        var result = fn.apply(self, newArgs);
        return fut ? fut.wait() : result;
      };
    };

    // Sets child's prototype to a new object whose prototype is parent's
    // prototype. Used as:
    //   Meteor._inherits(ClassB, ClassA).
    //   _.extend(ClassB.prototype, { ... })
    // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.
    var hasOwn = Object.prototype.hasOwnProperty;
    Meteor._inherits = function (Child, Parent) {
      // copy Parent static properties
      for (var key in Parent) {
        // make sure we only copy hasOwnProperty properties vs. prototype
        // properties
        if (hasOwn.call(Parent, key)) {
          Child[key] = Parent[key];
        }
      }

      // a middle member of prototype chain: takes the prototype from the Parent
      var Middle = function () {
        this.constructor = Child;
      };
      Middle.prototype = Parent.prototype;
      Child.prototype = new Middle();
      Child.__super__ = Parent.prototype;
      return Child;
    };

    var warnedAboutWrapAsync = false;

    /**
     * @deprecated in 0.9.3
     */
    Meteor._wrapAsync = function (fn, context) {
      if (!warnedAboutWrapAsync) {
        Meteor._debug("Meteor._wrapAsync has been renamed to Meteor.wrapAsync");
        warnedAboutWrapAsync = true;
      }
      return Meteor.wrapAsync.apply(Meteor, arguments);
    };

    function logErr(err) {
      if (err) {
        return Meteor._debug("Exception in callback of async function", err);
      }
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    var global = this;

    // IE 10, Node >= 9.1

    function useSetImmediate() {
      if (!global.setImmediate) return null;else {
        var setImmediate = function (fn) {
          global.setImmediate(fn);
        };
        setImmediate.implementation = 'setImmediate';
        return setImmediate;
      }
    }

    // Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari

    function usePostMessage() {
      // The test against `importScripts` prevents this implementation
      // from being installed inside a web worker, where
      // `global.postMessage` means something completely different and
      // can't be used for this purpose.

      if (!global.postMessage || global.importScripts) {
        return null;
      }

      // Avoid synchronous post message implementations.

      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;
      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };
      global.postMessage("", "*");
      global.onmessage = oldOnMessage;

      if (!postMessageIsAsynchronous) return null;

      var funcIndex = 0;
      var funcs = {};

      // Installs an event handler on `global` for the `message` event: see
      // * https://developer.mozilla.org/en/DOM/window.postMessage
      // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

      // XXX use Random.id() here?
      var MESSAGE_PREFIX = "Meteor._setImmediate." + Math.random() + '.';

      function isStringAndStartsWith(string, putativeStart) {
        return typeof string === "string" && string.substring(0, putativeStart.length) === putativeStart;
      }

      function onGlobalMessage(event) {
        // This will catch all incoming messages (even from other
        // windows!), so we need to try reasonably hard to avoid letting
        // anyone else trick us into firing off. We test the origin is
        // still this window, and that a (randomly generated)
        // unpredictable identifying prefix is present.
        if (event.source === global && isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {
          var index = event.data.substring(MESSAGE_PREFIX.length);
          try {
            if (funcs[index]) funcs[index]();
          } finally {
            delete funcs[index];
          }
        }
      }

      if (global.addEventListener) {
        global.addEventListener("message", onGlobalMessage, false);
      } else {
        global.attachEvent("onmessage", onGlobalMessage);
      }

      var setImmediate = function (fn) {
        // Make `global` post a message to itself with the handle and
        // identifying prefix, thus asynchronously invoking our
        // onGlobalMessage listener above.
        ++funcIndex;
        funcs[funcIndex] = fn;
        global.postMessage(MESSAGE_PREFIX + funcIndex, "*");
      };
      setImmediate.implementation = 'postMessage';
      return setImmediate;
    }

    function useTimeout() {
      var setImmediate = function (fn) {
        global.setTimeout(fn, 0);
      };
      setImmediate.implementation = 'setTimeout';
      return setImmediate;
    }

    Meteor._setImmediate = useSetImmediate() || usePostMessage() || useTimeout();

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/timers.js                                                                            //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    function withoutInvocation(f) {
      if (Package.ddp) {
        var DDP = Package.ddp.DDP;
        var CurrentInvocation = DDP._CurrentMethodInvocation ||
        // For backwards compatibility, as explained in this issue:
        // https://github.com/meteor/meteor/issues/8947
        DDP._CurrentInvocation;

        var invocation = CurrentInvocation.get();
        if (invocation && invocation.isSimulation) {
          throw new Error("Can't set timers inside simulations");
        }

        return function () {
          CurrentInvocation.withValue(null, f);
        };
      } else {
        return f;
      }
    }

    function bindAndCatch(context, f) {
      return Meteor.bindEnvironment(withoutInvocation(f), context);
    }

    // Meteor.setTimeout and Meteor.setInterval callbacks scheduled
    // inside a server method are not part of the method invocation and
    // should clear out the CurrentMethodInvocation environment variable.

    /**
     * @memberOf Meteor
     * @summary Call a function in the future after waiting for a specified delay.
     * @locus Anywhere
     * @param {Function} func The function to run
     * @param {Number} delay Number of milliseconds to wait before calling function
     */
    Meteor.setTimeout = function (f, duration) {
      return setTimeout(bindAndCatch("setTimeout callback", f), duration);
    };

    /**
     * @memberOf Meteor
     * @summary Call a function repeatedly, with a time delay between calls.
     * @locus Anywhere
     * @param {Function} func The function to run
     * @param {Number} delay Number of milliseconds to wait between each function call.
     */
    Meteor.setInterval = function (f, duration) {
      return setInterval(bindAndCatch("setInterval callback", f), duration);
    };

    /**
     * @memberOf Meteor
     * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.
     * @locus Anywhere
     * @param {Object} id The handle returned by `Meteor.setInterval`
     */
    Meteor.clearInterval = function (x) {
      return clearInterval(x);
    };

    /**
     * @memberOf Meteor
     * @summary Cancel a function call scheduled by `Meteor.setTimeout`.
     * @locus Anywhere
     * @param {Object} id The handle returned by `Meteor.setTimeout`
     */
    Meteor.clearTimeout = function (x) {
      return clearTimeout(x);
    };

    // XXX consider making this guarantee ordering of defer'd callbacks, like
    // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:
    //    callSomethingThatDefersSomeWork();
    //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));

    /**
     * @memberOf Meteor
     * @summary Defer execution of a function to run asynchronously in the background (similar to `Meteor.setTimeout(func, 0)`.
     * @locus Anywhere
     * @param {Function} func The function to run
     */
    Meteor.defer = function (f) {
      Meteor._setImmediate(bindAndCatch("defer callback", f));
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/errors.js                                                                            //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Makes an error subclass which properly contains a stack trace in most
    // environments. constructor can set fields on `this` (and should probably set
    // `message`, which is what gets displayed at the top of a stack trace).
    //
    Meteor.makeErrorType = function (name, constructor) {
      var errorClass = function () /*arguments*/{
        // Ensure we get a proper stack trace in most Javascript environments
        if (Error.captureStackTrace) {
          // V8 environments (Chrome and Node.js)
          Error.captureStackTrace(this, errorClass);
        } else {
          // Borrow the .stack property of a native Error object.
          this.stack = new Error().stack;
        }
        // Safari magically works.

        constructor.apply(this, arguments);

        this.errorType = name;
      };

      Meteor._inherits(errorClass, Error);

      return errorClass;
    };

    // This should probably be in the livedata package, but we don't want
    // to require you to use the livedata package to get it. Eventually we
    // should probably rename it to DDP.Error and put it back in the
    // 'livedata' package (which we should rename to 'ddp' also.)
    //
    // Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object
    // containing 'error' and optionally 'reason' and 'details'.
    // The DDP client manually puts these into Meteor.Error objects. (We don't use
    // EJSON.addType here because the type is determined by location in the
    // protocol, not text on the wire.)

    /**
     * @summary This class represents a symbolic error thrown by a method.
     * @locus Anywhere
     * @class
     * @param {String} error A string code uniquely identifying this kind of error.
     * This string should be used by callers of the method to determine the
     * appropriate action to take, instead of attempting to parse the reason
     * or details fields. For example:
     *
     * ```
     * // on the server, pick a code unique to this error
     * // the reason field should be a useful debug message
     * throw new Meteor.Error("logged-out",
     *   "The user must be logged in to post a comment.");
     *
     * // on the client
     * Meteor.call("methodName", function (error) {
     *   // identify the error
     *   if (error && error.error === "logged-out") {
     *     // show a nice error message
     *     Session.set("errorMessage", "Please log in to post a comment.");
     *   }
     * });
     * ```
     *
     * For legacy reasons, some built-in Meteor functions such as `check` throw
     * errors with a number in this field.
     *
     * @param {String} [reason] Optional.  A short human-readable summary of the
     * error, like 'Not Found'.
     * @param {String} [details] Optional.  Additional information about the error,
     * like a textual stack trace.
     */
    Meteor.Error = Meteor.makeErrorType("Meteor.Error", function (error, reason, details) {
      var self = this;

      // Newer versions of DDP use this property to signify that an error
      // can be sent back and reconstructed on the calling client.
      self.isClientSafe = true;

      // String code uniquely identifying this kind of error.
      self.error = error;

      // Optional: A short human-readable summary of the error. Not
      // intended to be shown to end users, just developers. ("Not Found",
      // "Internal Server Error")
      self.reason = reason;

      // Optional: Additional information about the error, say for
      // debugging. It might be a (textual) stack trace if the server is
      // willing to provide one. The corresponding thing in HTTP would be
      // the body of a 404 or 500 response. (The difference is that we
      // never expect this to be shown to end users, only developers, so
      // it doesn't need to be pretty.)
      self.details = details;

      // This is what gets displayed at the top of a stack trace. Current
      // format is "[404]" (if no reason is set) or "File not found [404]"
      if (self.reason) self.message = self.reason + ' [' + self.error + ']';else self.message = '[' + self.error + ']';
    });

    // Meteor.Error is basically data and is sent over DDP, so you should be able to
    // properly EJSON-clone it. This is especially important because if a
    // Meteor.Error is thrown through a Future, the error, reason, and details
    // properties become non-enumerable so a standard Object clone won't preserve
    // them and they will be lost from DDP.
    Meteor.Error.prototype.clone = function () {
      var self = this;
      return new Meteor.Error(self.error, self.reason, self.details);
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/fiber_stubs_client.js                                                                //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // This file is a partial analogue to fiber_helpers.js, which allows the client
    // to use a queue too, and also to call noYieldsAllowed.

    // The client has no ability to yield, so noYieldsAllowed is a noop.
    //
    Meteor._noYieldsAllowed = function (f) {
      return f();
    };

    // An even simpler queue of tasks than the fiber-enabled one.  This one just
    // runs all the tasks when you call runTask or flush, synchronously.
    //
    Meteor._SynchronousQueue = function () {
      var self = this;
      self._tasks = [];
      self._running = false;
      self._runTimeout = null;
    };

    var SQp = Meteor._SynchronousQueue.prototype;

    SQp.runTask = function (task) {
      var self = this;
      if (!self.safeToRunTask()) throw new Error("Could not synchronously run a task from a running task");
      self._tasks.push(task);
      var tasks = self._tasks;
      self._tasks = [];
      self._running = true;

      if (self._runTimeout) {
        // Since we're going to drain the queue, we can forget about the timeout
        // which tries to run it.  (But if one of our tasks queues something else,
        // the timeout will be correctly re-created.)
        clearTimeout(self._runTimeout);
        self._runTimeout = null;
      }

      try {
        while (tasks.length > 0) {
          var t = tasks.shift();
          try {
            t();
          } catch (e) {
            if (tasks.length === 0) {
              // this was the last task, that is, the one we're calling runTask
              // for.
              throw e;
            }
            Meteor._debug("Exception in queued task", e);
          }
        }
      } finally {
        self._running = false;
      }
    };

    SQp.queueTask = function (task) {
      var self = this;
      self._tasks.push(task);
      // Intentionally not using Meteor.setTimeout, because it doesn't like runing
      // in stubs for now.
      if (!self._runTimeout) {
        self._runTimeout = setTimeout(function () {
          return self.flush.apply(self, arguments);
        }, 0);
      }
    };

    SQp.flush = function () {
      var self = this;
      self.runTask(function () {});
    };

    SQp.drain = function () {
      var self = this;
      if (!self.safeToRunTask()) {
        return;
      }
      while (self._tasks.length > 0) {
        self.flush();
      }
    };

    SQp.safeToRunTask = function () {
      var self = this;
      return !self._running;
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/startup_client.js                                                                    //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var callbackQueue = [];
    var isLoadingCompleted = false;
    var isReady = false;

    // Keeps track of how many events to wait for in addition to loading completing,
    // before we're considered ready.
    var readyHoldsCount = 0;

    var holdReady = function () {
      readyHoldsCount++;
    };

    var releaseReadyHold = function () {
      readyHoldsCount--;
      maybeReady();
    };

    var maybeReady = function () {
      if (isReady || !isLoadingCompleted || readyHoldsCount > 0) return;

      isReady = true;

      // Run startup callbacks
      while (callbackQueue.length) callbackQueue.shift()();

      if (Meteor.isCordova) {
        // Notify the WebAppLocalServer plugin that startup was completed successfully,
        // so we can roll back faulty versions if this doesn't happen
        WebAppLocalServer.startupDidComplete();
      }
    };

    var loadingCompleted = function () {
      if (!isLoadingCompleted) {
        isLoadingCompleted = true;
        maybeReady();
      }
    };

    if (Meteor.isCordova) {
      holdReady();
      document.addEventListener('deviceready', releaseReadyHold, false);
    }

    if (document.readyState === 'complete' || document.readyState === 'loaded') {
      // Loading has completed,
      // but allow other scripts the opportunity to hold ready
      window.setTimeout(loadingCompleted);
    } else {
      // Attach event listeners to wait for loading to complete
      if (document.addEventListener) {
        document.addEventListener('DOMContentLoaded', loadingCompleted, false);
        window.addEventListener('load', loadingCompleted, false);
      } else {
        // Use IE event model for < IE9
        document.attachEvent('onreadystatechange', function () {
          if (document.readyState === "complete") {
            loadingCompleted();
          }
        });
        window.attachEvent('load', loadingCompleted);
      }
    }

    /**
     * @summary Run code when a client or a server starts.
     * @locus Anywhere
     * @param {Function} func A function to run on startup.
     */
    Meteor.startup = function (callback) {
      // Fix for < IE9, see http://javascript.nwbox.com/IEContentLoaded/
      var doScroll = !document.addEventListener && document.documentElement.doScroll;

      if (!doScroll || window !== top) {
        if (isReady) callback();else callbackQueue.push(callback);
      } else {
        try {
          doScroll('left');
        } catch (error) {
          setTimeout(function () {
            Meteor.startup(callback);
          }, 50);
          return;
        };
        callback();
      }
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/debug.js                                                                             //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var suppress = 0;

    // replacement for console.log. This is a temporary API. We should
    // provide a real logging API soon (possibly just a polyfill for
    // console?)
    //
    // NOTE: this is used on the server to print the warning about
    // having autopublish enabled when you probably meant to turn it
    // off. it's not really the proper use of something called
    // _debug. the intent is for this message to go to the terminal and
    // be very visible. if you change _debug to go someplace else, etc,
    // please fix the autopublish code to do something reasonable.
    //
    Meteor._debug = function () /* arguments */{
      if (suppress) {
        suppress--;
        return;
      }
      if (typeof console !== 'undefined' && typeof console.log !== 'undefined') {
        if (arguments.length == 0) {
          // IE Companion breaks otherwise
          // IE10 PP4 requires at least one argument
          console.log('');
        } else {
          // IE doesn't have console.log.apply, it's not a real Object.
          // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9
          // http://patik.com/blog/complete-cross-browser-console-log/
          if (typeof console.log.apply === "function") {
            // Most browsers

            // Chrome and Safari only hyperlink URLs to source files in first argument of
            // console.log, so try to call it with one argument if possible.
            // Approach taken here: If all arguments are strings, join them on space.
            // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991
            var allArgumentsOfTypeString = true;
            for (var i = 0; i < arguments.length; i++) if (typeof arguments[i] !== "string") allArgumentsOfTypeString = false;

            if (allArgumentsOfTypeString) console.log.apply(console, [Array.prototype.join.call(arguments, " ")]);else console.log.apply(console, arguments);
          } else if (typeof Function.prototype.bind === "function") {
            // IE9
            var log = Function.prototype.bind.call(console.log, console);
            log.apply(console, arguments);
          } else {
            // IE8
            Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));
          }
        }
      }
    };

    // Suppress the next 'count' Meteor._debug messsages. Use this to
    // stop tests from spamming the console.
    //
    Meteor._suppress_log = function (count) {
      suppress += count;
    };

    Meteor._suppressed_log_expected = function () {
      return suppress !== 0;
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/string_utils.js                                                                      //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Like Perl's quotemeta: quotes all regexp metacharacters.
    // Code taken from
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
    Meteor._escapeRegExp = function (string) {
      return String(string).replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/test_environment.js                                                                  //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var TEST_METADATA_STR;
    if (Meteor.isClient) {
      TEST_METADATA_STR = meteorEnv.TEST_METADATA;
    } else {
      TEST_METADATA_STR = process.env.TEST_METADATA;
    }

    var TEST_METADATA = JSON.parse(TEST_METADATA_STR || "{}");
    var testDriverPackageName = TEST_METADATA.driverPackage;

    // Note that if we are in test-packages mode neither of these will be set,
    // but we will have a test driver package
    Meteor.isTest = !!TEST_METADATA.isTest;
    Meteor.isAppTest = !!TEST_METADATA.isAppTest;
    Meteor.isPackageTest = !!testDriverPackageName && !Meteor.isTest && !Meteor.isAppTest;

    if (typeof testDriverPackageName === "string") {
      Meteor.startup(function () {
        var testDriverPackage = Package[testDriverPackageName];
        if (!testDriverPackage) {
          throw new Error("Can't find test driver package: " + testDriverPackageName);
        }

        // On the client, the test driver *must* define `runTests`
        if (Meteor.isClient) {
          if (typeof testDriverPackage.runTests !== "function") {
            throw new Error("Test driver package " + testDriverPackageName + " missing `runTests` export");
          }
          testDriverPackage.runTests();
        } else {
          // The server can optionally define `start`
          if (typeof testDriverPackage.start === "function") {
            testDriverPackage.start();
          }
        }
      });
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/dynamics_browser.js                                                                  //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Simple implementation of dynamic scoping, for use in browsers

    var nextSlot = 0;
    var currentValues = [];

    Meteor.EnvironmentVariable = function () {
      this.slot = nextSlot++;
    };

    var EVp = Meteor.EnvironmentVariable.prototype;

    EVp.get = function () {
      return currentValues[this.slot];
    };

    EVp.getOrNullIfOutsideFiber = function () {
      return this.get();
    };

    EVp.withValue = function (value, func) {
      var saved = currentValues[this.slot];
      try {
        currentValues[this.slot] = value;
        var ret = func();
      } finally {
        currentValues[this.slot] = saved;
      }
      return ret;
    };

    Meteor.bindEnvironment = function (func, onException, _this) {
      // needed in order to be able to create closures inside func and
      // have the closed variables not change back to their original
      // values
      var boundValues = currentValues.slice();

      if (!onException || typeof onException === 'string') {
        var description = onException || "callback of async function";
        onException = function (error) {
          Meteor._debug("Exception in " + description + ":", error);
        };
      }

      return function () /* arguments */{
        var savedValues = currentValues;
        try {
          currentValues = boundValues;
          var ret = func.apply(_this, arguments);
        } catch (e) {
          // note: callback-hook currently relies on the fact that if onException
          // throws in the browser, the wrapped call throws.
          onException(e);
        } finally {
          currentValues = savedValues;
        }
        return ret;
      };
    };

    Meteor._nodeCodeMustBeInFiber = function () {
      // no-op on browser
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/url_common.js                                                                        //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**
     * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed to Galaxy, but must be provided when using `meteor build`.
     * @locus Anywhere
     * @param {String} [path] A path to append to the root URL. Do not include a leading "`/`".
     * @param {Object} [options]
     * @param {Boolean} options.secure Create an HTTPS URL.
     * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.
     * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: "`http://foo.example.com`"
     */
    Meteor.absoluteUrl = function (path, options) {
      // path is optional
      if (!options && typeof path === 'object') {
        options = path;
        path = undefined;
      }
      // merge options with defaults
      options = Object.assign({}, Meteor.absoluteUrl.defaultOptions, options || {});

      var url = options.rootUrl;
      if (!url) throw new Error("Must pass options.rootUrl or set ROOT_URL in the server environment");

      if (!/^http[s]?:\/\//i.test(url)) // url starts with 'http://' or 'https://'
        url = 'http://' + url; // we will later fix to https if options.secure is set

      if (!url.endsWith("/")) {
        url += "/";
      }

      if (path) {
        // join url and path with a / separator
        while (path.startsWith("/")) {
          path = path.slice(1);
        }
        url += path;
      }

      // turn http to https if secure option is set, and we're not talking
      // to localhost.
      if (options.secure && /^http:/.test(url) && // url starts with 'http:'
      !/http:\/\/localhost[:\/]/.test(url) && // doesn't match localhost
      !/http:\/\/127\.0\.0\.1[:\/]/.test(url)) // or 127.0.0.1
        url = url.replace(/^http:/, 'https:');

      if (options.replaceLocalhost) url = url.replace(/^http:\/\/localhost([:\/].*)/, 'http://127.0.0.1$1');

      return url;
    };

    // allow later packages to override default options
    var defaultOptions = Meteor.absoluteUrl.defaultOptions = {};

    // available only in a browser environment
    var location = typeof window === "object" && window.location;

    if (typeof __meteor_runtime_config__ === "object" && __meteor_runtime_config__.ROOT_URL) {
      defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;
    } else if (location && location.protocol && location.host) {
      defaultOptions.rootUrl = location.protocol + "//" + location.host;
    }

    // Make absolute URLs use HTTPS by default if the current window.location
    // uses HTTPS. Since this is just a default, it can be overridden by
    // passing { secure: false } if necessary.
    if (location && location.protocol === "https:") {
      defaultOptions.secure = true;
    }

    Meteor._relativeToSiteRootUrl = function (link) {
      if (typeof __meteor_runtime_config__ === "object" && link.substr(0, 1) === "/") link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || "") + link;
      return link;
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("meteor", {
    Meteor: Meteor,
    global: global,
    meteorEnv: meteorEnv
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("meteor-base");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var makeInstaller, meteorInstall;

  ///////////////////////////////////////////////////////////////////////////////
  //                                                                           //
  // packages/modules-runtime/.npm/package/node_modules/install/install.js     //
  // This file is in bare mode and is not in its own closure.                  //
  //                                                                           //
  ///////////////////////////////////////////////////////////////////////////////
  //
  makeInstaller = function (options) {

    options = options || {};

    // These file extensions will be appended to required module identifiers
    // if they do not exactly match an installed module.
    var defaultExtensions = options.extensions || [".js", ".json"];

    // If defined, the options.fallback function will be called when no
    // installed module is found for a required module identifier. Often
    // options.fallback will be implemented in terms of the native Node
    // require function, which has the ability to load binary modules.
    var fallback = options.fallback;

    // List of fields to look for in package.json files to determine the
    // main entry module of the package. The first field listed here whose
    // value is a string will be used to resolve the entry module.
    var mainFields = options.mainFields || (
    // If options.mainFields is absent and options.browser is truthy,
    // package resolution will prefer the "browser" field of package.json
    // files to the "main" field. Note that this only supports
    // string-valued "browser" fields for now, though in the future it
    // might make sense to support the object version, a la browserify.
    options.browser ? ["browser", "main"] : ["main"]);

    var hasOwn = {}.hasOwnProperty;
    function strictHasOwn(obj, key) {
      return isObject(obj) && isString(key) && hasOwn.call(obj, key);
    }

    // Cache for looking up File objects given absolute module identifiers.
    // Invariants:
    //   filesByModuleId[module.id] === fileAppendId(root, module.id)
    //   filesByModuleId[module.id].module === module
    var filesByModuleId = {};

    // The file object representing the root directory of the installed
    // module tree.
    var root = new File("/", new File("/.."));
    var rootRequire = makeRequire(root);

    // Merges the given tree of directories and module factory functions
    // into the tree of installed modules and returns a require function
    // that behaves as if called from a module in the root directory.
    function install(tree, options) {
      if (isObject(tree)) {
        fileMergeContents(root, tree, options);
      }
      return rootRequire;
    }

    // Replace this function to enable Module.prototype.prefetch.
    install.fetch = function (ids) {
      throw new Error("fetch not implemented");
    };

    // This constructor will be used to instantiate the module objects
    // passed to module factory functions (i.e. the third argument after
    // require and exports), and is exposed as install.Module in case the
    // caller of makeInstaller wishes to modify Module.prototype.
    function Module(id) {
      this.id = id;

      // The Node implementation of module.children unfortunately includes
      // only those child modules that were imported for the first time by
      // this parent module (i.e., child.parent === this).
      this.children = [];

      // This object is an install.js extension that includes all child
      // modules imported by this module, even if this module is not the
      // first to import them.
      this.childrenById = {};
    }

    // Used to keep module.prefetch promise resolutions well-ordered.
    var lastPrefetchPromise;

    // May be shared by multiple sequential calls to module.prefetch.
    // Initialized to {} only when necessary.
    var missing;

    Module.prototype.prefetch = function (id) {
      var _module = this;
      var parentFile = getOwn(filesByModuleId, _module.id);

      lastPrefetchPromise = lastPrefetchPromise || Promise.resolve();
      var previousPromise = lastPrefetchPromise;

      function walk(_module2) {
        var file = getOwn(filesByModuleId, _module2.id);
        if (fileIsDynamic(file) && !file.pending) {
          file.pending = true;
          missing = missing || {};

          // These are the data that will be exposed to the install.fetch
          // callback, so it's worth documenting each item with a comment.
          missing[_module2.id] = {
            // The CommonJS module object that will be exposed to this
            // dynamic module when it is evaluated. Note that install.fetch
            // could decide to populate module.exports directly, instead of
            // fetching anything. In that case, install.fetch should omit
            // this module from the tree that it produces.
            module: file.module,
            // List of module identifier strings imported by this module.
            // Note that the missing object already contains all available
            // dependencies (including transitive dependencies), so
            // install.fetch should not need to traverse these dependencies
            // in most cases; however, they may be useful for other reasons.
            // Though the strings are unique, note that two different
            // strings could resolve to the same module.
            deps: Object.keys(file.deps),
            // The options (if any) that were passed as the second argument
            // to the install(tree, options) function when this stub was
            // first registered. Typically contains options.extensions, but
            // could contain any information appropriate for the entire tree
            // as originally installed. These options will be automatically
            // inherited by the newly fetched modules, so install.fetch
            // should not need to modify them.
            options: file.options,
            // Any stub data included in the array notation from the
            // original entry for this dynamic module. Typically contains
            // "main" and/or "browser" fields for package.json files, and is
            // otherwise undefined.
            stub: file.stub
          };

          each(file.deps, function (parentId, id) {
            fileResolve(file, id);
          });

          each(_module2.childrenById, walk);
        }
      }

      return lastPrefetchPromise = new Promise(function (resolve) {
        var absChildId = _module.resolve(id);
        each(_module.childrenById, walk);
        resolve(absChildId);
      }).then(function (absChildId) {
        // Grab the current missing object and fetch its contents.
        var toBeFetched = missing;
        missing = null;

        function clearPending() {
          if (toBeFetched) {
            Object.keys(toBeFetched).forEach(function (id) {
              getOwn(filesByModuleId, id).pending = false;
            });
          }
        }

        return new Promise(function (resolve) {
          // The install.fetch function takes an object mapping missing
          // dynamic module identifiers to options objects, and should
          // return a Promise that resolves to a module tree that can be
          // installed. As an optimization, if there were no missing dynamic
          // modules, then we can skip calling install.fetch entirely.
          resolve(toBeFetched && install.fetch(toBeFetched));
        }).then(function (tree) {
          function both() {
            install(tree);
            clearPending();
            return absChildId;
          }

          // Although we want multiple install.fetch calls to run in
          // parallel, it is important that the promises returned by
          // module.prefetch are resolved in the same order as the original
          // calls to module.prefetch, because previous fetches may include
          // modules assumed to exist by more recent module.prefetch calls.
          // Whether previousPromise was resolved or rejected, carry on with
          // the installation regardless.
          return previousPromise.then(both, both);
        }, function (error) {
          // Fixes https://github.com/meteor/meteor/issues/10182.
          clearPending();
          throw error;
        });
      });
    };

    install.Module = Module;

    function getOwn(obj, key) {
      return strictHasOwn(obj, key) && obj[key];
    }

    function isObject(value) {
      return value !== null && typeof value === "object";
    }

    function isFunction(value) {
      return typeof value === "function";
    }

    function isString(value) {
      return typeof value === "string";
    }

    function makeMissingError(id) {
      return new Error("Cannot find module '" + id + "'");
    }

    Module.prototype.resolve = function (id) {
      var file = fileResolve(filesByModuleId[this.id], id);
      if (file) return file.module.id;
      var error = makeMissingError(id);
      if (fallback && isFunction(fallback.resolve)) {
        return fallback.resolve(id, this.id, error);
      }
      throw error;
    };

    Module.prototype.require = function require(id) {
      var result = fileResolve(filesByModuleId[this.id], id);
      if (result) {
        return fileEvaluate(result, this);
      }

      var error = makeMissingError(id);

      if (isFunction(fallback)) {
        return fallback(id, // The missing module identifier.
        this.id, // ID of the parent module.
        error // The error we would have thrown.
        );
      }

      throw error;
    };

    function makeRequire(file) {
      var _module3 = file.module;

      function _require(id) {
        return _module3.require(id);
      }

      _require.extensions = fileGetExtensions(file).slice(0);

      _require.resolve = function resolve(id) {
        return _module3.resolve(id);
      };

      return _require;
    }

    // File objects represent either directories or modules that have been
    // installed. When a `File` respresents a directory, its `.contents`
    // property is an object containing the names of the files (or
    // directories) that it contains. When a `File` represents a module, its
    // `.contents` property is a function that can be invoked with the
    // appropriate `(require, exports, module)` arguments to evaluate the
    // module. If the `.contents` property is a string, that string will be
    // resolved as a module identifier, and the exports of the resulting
    // module will provide the exports of the original file. The `.parent`
    // property of a File is either a directory `File` or `null`. Note that
    // a child may claim another `File` as its parent even if the parent
    // does not have an entry for that child in its `.contents` object.
    // This is important for implementing anonymous files, and preventing
    // child modules from using `../relative/identifier` syntax to examine
    // unrelated modules.
    function File(moduleId, parent) {
      var file = this;

      // Link to the parent file.
      file.parent = parent = parent || null;

      // The module object for this File, which will eventually boast an
      // .exports property when/if the file is evaluated.
      file.module = new Module(moduleId);
      filesByModuleId[moduleId] = file;

      // The .contents of the file can be either (1) an object, if the file
      // represents a directory containing other files; (2) a factory
      // function, if the file represents a module that can be imported; (3)
      // a string, if the file is an alias for another file; or (4) null, if
      // the file's contents are not (yet) available.
      file.contents = null;

      // Set of module identifiers imported by this module. Note that this
      // set is not necessarily complete, so don't rely on it unless you
      // know what you're doing.
      file.deps = {};
    }

    function fileEvaluate(file, parentModule) {
      var _module4 = file.module;
      if (!strictHasOwn(_module4, "exports")) {
        var contents = file.contents;
        if (!contents) {
          // If this file was installed with array notation, and the array
          // contained one or more objects but no functions, then the combined
          // properties of the objects are treated as a temporary stub for
          // file.module.exports. This is particularly important for partial
          // package.json modules, so that the resolution logic can know the
          // value of the "main" and/or "browser" fields, at least, even if
          // the rest of the package.json file is not (yet) available.
          if (file.stub) {
            return file.stub;
          }

          throw makeMissingError(_module4.id);
        }

        if (parentModule) {
          _module4.parent = parentModule;
          var children = parentModule.children;
          if (Array.isArray(children)) {
            children.push(_module4);
          }
        }

        contents(makeRequire(file),
        // If the file had a .stub, reuse the same object for exports.
        _module4.exports = file.stub || {}, _module4, file.module.id, file.parent.module.id);

        _module4.loaded = true;
      }

      // The module.runModuleSetters method will be deprecated in favor of
      // just module.runSetters: https://github.com/benjamn/reify/pull/160
      var runSetters = _module4.runSetters || _module4.runModuleSetters;
      if (isFunction(runSetters)) {
        runSetters.call(_module4);
      }

      return _module4.exports;
    }

    function fileIsDirectory(file) {
      return file && isObject(file.contents);
    }

    function fileIsDynamic(file) {
      return file && file.contents === null;
    }

    function fileMergeContents(file, contents, options) {
      if (Array.isArray(contents)) {
        contents.forEach(function (item) {
          if (isString(item)) {
            file.deps[item] = file.module.id;
          } else if (isFunction(item)) {
            contents = item;
          } else if (isObject(item)) {
            file.stub = file.stub || {};
            each(item, function (value, key) {
              file.stub[key] = value;
            });
          }
        });

        if (!isFunction(contents)) {
          // If the array did not contain a function, merge nothing.
          contents = null;
        }
      } else if (!isFunction(contents) && !isString(contents) && !isObject(contents)) {
        // If contents is neither an array nor a function nor a string nor
        // an object, just give up and merge nothing.
        contents = null;
      }

      if (contents) {
        file.contents = file.contents || (isObject(contents) ? {} : contents);
        if (isObject(contents) && fileIsDirectory(file)) {
          each(contents, function (value, key) {
            if (key === "..") {
              child = file.parent;
            } else {
              var child = getOwn(file.contents, key);

              if (!child) {
                child = file.contents[key] = new File(file.module.id.replace(/\/*$/, "/") + key, file);

                child.options = options;
              }
            }

            fileMergeContents(child, value, options);
          });
        }
      }
    }

    function each(obj, callback, context) {
      Object.keys(obj).forEach(function (key) {
        callback.call(this, obj[key], key);
      }, context);
    }

    function fileGetExtensions(file) {
      return file.options && file.options.extensions || defaultExtensions;
    }

    function fileAppendIdPart(file, part, extensions) {
      // Always append relative to a directory.
      while (file && !fileIsDirectory(file)) {
        file = file.parent;
      }

      if (!file || !part || part === ".") {
        return file;
      }

      if (part === "..") {
        return file.parent;
      }

      var exactChild = getOwn(file.contents, part);

      // Only consider multiple file extensions if this part is the last
      // part of a module identifier and not equal to `.` or `..`, and there
      // was no exact match or the exact match was a directory.
      if (extensions && (!exactChild || fileIsDirectory(exactChild))) {
        for (var e = 0; e < extensions.length; ++e) {
          var child = getOwn(file.contents, part + extensions[e]);
          if (child && !fileIsDirectory(child)) {
            return child;
          }
        }
      }

      return exactChild;
    }

    function fileAppendId(file, id, extensions) {
      var parts = id.split("/");

      // Use `Array.prototype.every` to terminate iteration early if
      // `fileAppendIdPart` returns a falsy value.
      parts.every(function (part, i) {
        return file = i < parts.length - 1 ? fileAppendIdPart(file, part) : fileAppendIdPart(file, part, extensions);
      });

      return file;
    }

    function recordChild(parentModule, childFile) {
      var childModule = childFile && childFile.module;
      if (parentModule && childModule) {
        parentModule.childrenById[childModule.id] = childModule;
      }
    }

    function fileResolve(file, id, parentModule, seenDirFiles) {
      var parentModule = parentModule || file.module;
      var extensions = fileGetExtensions(file);

      file =
      // Absolute module identifiers (i.e. those that begin with a `/`
      // character) are interpreted relative to the root directory, which
      // is a slight deviation from Node, which has access to the entire
      // file system.
      id.charAt(0) === "/" ? fileAppendId(root, id, extensions) :
      // Relative module identifiers are interpreted relative to the
      // current file, naturally.
      id.charAt(0) === "." ? fileAppendId(file, id, extensions) :
      // Top-level module identifiers are interpreted as referring to
      // packages in `node_modules` directories.
      nodeModulesLookup(file, id, extensions);

      // If the identifier resolves to a directory, we use the same logic as
      // Node to find an `index.js` or `package.json` file to evaluate.
      while (fileIsDirectory(file)) {
        seenDirFiles = seenDirFiles || [];

        // If the "main" field of a `package.json` file resolves to a
        // directory we've already considered, then we should not attempt to
        // read the same `package.json` file again. Using an array as a set
        // is acceptable here because the number of directories to consider
        // is rarely greater than 1 or 2. Also, using indexOf allows us to
        // store File objects instead of strings.
        if (seenDirFiles.indexOf(file) < 0) {
          seenDirFiles.push(file);

          var pkgJsonFile = fileAppendIdPart(file, "package.json");
          var pkg = pkgJsonFile && fileEvaluate(pkgJsonFile, parentModule);
          var mainFile,
              resolved = pkg && mainFields.some(function (name) {
            var main = pkg[name];
            if (isString(main)) {
              // The "main" field of package.json does not have to begin
              // with ./ to be considered relative, so first we try
              // simply appending it to the directory path before
              // falling back to a full fileResolve, which might return
              // a package from a node_modules directory.
              return mainFile = fileAppendId(file, main, extensions) || fileResolve(file, main, parentModule, seenDirFiles);
            }
          });

          if (resolved && mainFile) {
            file = mainFile;
            recordChild(parentModule, pkgJsonFile);
            // The fileAppendId call above may have returned a directory,
            // so continue the loop to make sure we resolve it to a
            // non-directory file.
            continue;
          }
        }

        // If we didn't find a `package.json` file, or it didn't have a
        // resolvable `.main` property, the only possibility left to
        // consider is that this directory contains an `index.js` module.
        // This assignment almost always terminates the while loop, because
        // there's very little chance `fileIsDirectory(file)` will be true
        // for `fileAppendIdPart(file, "index", extensions)`. However, in
        // principle it is remotely possible that a file called `index.js`
        // could be a directory instead of a file.
        file = fileAppendIdPart(file, "index", extensions);
      }

      if (file && isString(file.contents)) {
        file = fileResolve(file, file.contents, parentModule, seenDirFiles);
      }

      recordChild(parentModule, file);

      return file;
    };

    function nodeModulesLookup(file, id, extensions) {
      for (var resolved; file && !resolved; file = file.parent) {
        resolved = fileIsDirectory(file) && fileAppendId(file, "node_modules/" + id, extensions);
      }
      return resolved;
    }

    return install;
  };

  if (typeof exports === "object") {
    exports.makeInstaller = makeInstaller;
  }

  ///////////////////////////////////////////////////////////////////////////////


  (function () {

    ///////////////////////////////////////////////////////////////////////////////
    //                                                                           //
    // packages/modules-runtime/modern.js                                        //
    //                                                                           //
    ///////////////////////////////////////////////////////////////////////////////
    //
    meteorInstall = makeInstaller({
      // On the client, make package resolution prefer the "browser" field of
      // package.json over the "module" field over the "main" field.
      browser: true,
      mainFields: ["browser", "module", "main"],

      fallback: function (id, parentId, error) {
        if (id && id.startsWith('meteor/')) {
          var packageName = id.split('/', 2)[1];
          throw new Error('Cannot find package "' + packageName + '". ' + 'Try "meteor add ' + packageName + '".');
        }

        throw error;
      }
    });

    ///////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////
    //                                                                           //
    // packages/modules-runtime/profile.js                                       //
    //                                                                           //
    ///////////////////////////////////////////////////////////////////////////////
    //
    if (typeof Profile === "function" && process.env.METEOR_PROFILE) {
      var Mp = meteorInstall.Module.prototype;
      Mp.require = Profile(function (id) {
        return "require(" + JSON.stringify(id) + ")";
      }, Mp.require);
    }

    ///////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("modules-runtime", {
    meteorInstall: meteorInstall
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package['modules-runtime'].meteorInstall;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "modules": { "client.js": function _module(_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // packages/modules/client.js                                                                  //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require("./install-packages.js");
            _require("./stubs.js");
            _require("./process.js");
            _require("./reify.js");

            _exports.addStyles = _require("./css").addStyles;

            /////////////////////////////////////////////////////////////////////////////////////////////////
          }, "css.js": function _module2(_require3, _exports3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // packages/modules/css.js                                                                     //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var doc = document;
            var head = doc.getElementsByTagName("head").item(0);

            _exports3.addStyles = function (css) {
              var style = doc.createElement("style");

              style.setAttribute("type", "text/css");

              // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx
              var internetExplorerSheetObject = style.sheet || // Edge/IE11.
              style.styleSheet; // Older IEs.

              if (internetExplorerSheetObject) {
                internetExplorerSheetObject.cssText = css;
              } else {
                style.appendChild(doc.createTextNode(css));
              }

              return head.appendChild(style);
            };

            /////////////////////////////////////////////////////////////////////////////////////////////////
          }, "install-packages.js": function module(_require4, _exports4, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // packages/modules/install-packages.js                                                        //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            function install(name, mainModule) {
              var meteorDir = {};

              // Given a package name <name>, install a stub module in the
              // /node_modules/meteor directory called <name>.js, so that
              // require.resolve("meteor/<name>") will always return
              // /node_modules/meteor/<name>.js instead of something like
              // /node_modules/meteor/<name>/index.js, in the rare but possible event
              // that the package contains a file called index.js (#6590).

              if (typeof mainModule === "string") {
                // Set up an alias from /node_modules/meteor/<package>.js to the main
                // module, e.g. meteor/<package>/index.js.
                meteorDir[name + ".js"] = mainModule;
              } else {
                // back compat with old Meteor packages
                meteorDir[name + ".js"] = function (r, e, _module4) {
                  _module4.exports = Package[name];
                };
              }

              meteorInstall({
                node_modules: {
                  meteor: meteorDir
                }
              });
            }

            // This file will be modified during computeJsOutputFilesMap to include
            // install(<name>) calls for every Meteor package.

            install("meteor");
            install("meteor-base");
            install("modules-runtime");
            install("modules", "meteor/modules/client.js");
            install("modern-browsers");
            install("babel-compiler");
            install("ecmascript");
            install("ecmascript-runtime");
            install("babel-runtime", "meteor/babel-runtime/babel-runtime.js");
            install("promise", "meteor/promise/client.js");
            install("fetch", "meteor/fetch/modern.js");
            install("dynamic-import", "meteor/dynamic-import/client.js");
            install("es5-shim");
            install("ecmascript-runtime-client", "meteor/ecmascript-runtime-client/modern.js");
            install("base64", "meteor/base64/base64.js");
            install("ejson", "meteor/ejson/ejson.js");
            install("diff-sequence", "meteor/diff-sequence/diff.js");
            install("geojson-utils", "meteor/geojson-utils/main.js");
            install("id-map", "meteor/id-map/id-map.js");
            install("random", "meteor/random/main_client.js");
            install("mongo-id", "meteor/mongo-id/id.js");
            install("ordered-dict", "meteor/ordered-dict/ordered_dict.js");
            install("tracker");
            install("minimongo", "meteor/minimongo/minimongo_client.js");
            install("check", "meteor/check/match.js");
            install("retry", "meteor/retry/retry.js");
            install("callback-hook", "meteor/callback-hook/hook.js");
            install("ddp-common");
            install("reload", "meteor/reload/reload.js");
            install("socket-stream-client", "meteor/socket-stream-client/browser.js");
            install("ddp-client", "meteor/ddp-client/client/client.js");
            install("ddp");
            install("ddp-server");
            install("allow-deny");
            install("mongo-dev-server");
            install("mongo");
            install("reactive-dict", "meteor/reactive-dict/migration.js");
            install("session", "meteor/session/session.js");
            install("reactive-var");
            install("standard-minifier-css");
            install("standard-minifier-js");
            install("typescript");
            install("email");
            install("ddp-rate-limiter");
            install("localstorage");
            install("accounts-base", "meteor/accounts-base/client_main.js");
            install("sha");
            install("srp");
            install("accounts-password");
            install("url", "meteor/url/url_client.js");
            install("oauth");
            install("accounts-oauth");
            install("service-configuration");
            install("oauth2");
            install("google-oauth", "meteor/google-oauth/namespace.js");
            install("accounts-google");
            install("http", "meteor/http/httpcall_client.js");
            install("ostrio:cookies", "meteor/ostrio:cookies/cookies.js");
            install("ostrio:files", "meteor/ostrio:files/client.js");
            install("webapp", "meteor/webapp/webapp_client.js");
            install("livedata");
            install("hot-code-push");
            install("autoupdate", "meteor/autoupdate/autoupdate_client.js");

            /////////////////////////////////////////////////////////////////////////////////////////////////
          }, "process.js": function module(_require5, _exports5, _module5) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // packages/modules/process.js                                                                 //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            if (!global.process) {
              try {
                // The application can run `npm install process` to provide its own
                // process stub; otherwise this module will provide a partial stub.
                global.process = _require5("process");
              } catch (missing) {
                global.process = {};
              }
            }

            var proc = global.process;

            if (Meteor.isServer) {
              // Make require("process") work on the server in all versions of Node.
              meteorInstall({
                node_modules: {
                  "process.js": function (r, e, _module6) {
                    _module6.exports = proc;
                  }
                }
              });
            } else {
              proc.platform = "browser";
              proc.nextTick = proc.nextTick || Meteor._setImmediate;
            }

            if (typeof proc.env !== "object") {
              proc.env = {};
            }

            var hasOwn = Object.prototype.hasOwnProperty;
            for (var key in meteorEnv) {
              if (hasOwn.call(meteorEnv, key)) {
                proc.env[key] = meteorEnv[key];
              }
            }

            /////////////////////////////////////////////////////////////////////////////////////////////////
          }, "reify.js": function module(_require6, _exports6, _module7) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // packages/modules/reify.js                                                                   //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require6("reify/lib/runtime").enable(_module7.constructor.prototype);

            /////////////////////////////////////////////////////////////////////////////////////////////////
          }, "stubs.js": function _module8(_require7) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // packages/modules/stubs.js                                                                   //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var haveStubs = false;
            try {
              _require7.resolve("meteor-node-stubs");
              haveStubs = true;
            } catch (noStubs) {}

            if (haveStubs) {
              // When meteor-node-stubs is installed in the application's root
              // node_modules directory, requiring it here installs aliases for stubs
              // for all Node built-in modules, such as fs, util, and http.
              _require7("meteor-node-stubs");
            }

            /////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "reify": { "lib": { "runtime": { "index.js": function module(_require8, _exports7, _module9) {

                    // This module should be compatible with PhantomJS v1, just like the other files
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are
                    // not acceptable here, and importing any npm packages should be contemplated
                    // with extreme skepticism.

                    var utils = _require8("./utils.js");
                    var Entry = _require8("./entry.js");

                    // The exports.enable method can be used to enable the Reify runtime for
                    // specific module objects, or for Module.prototype (where implemented),
                    // to make the runtime available throughout the entire module system.
                    _exports7.enable = function (mod) {
                      if (mod.link !== moduleLink) {
                        mod.link = moduleLink;
                        mod["export"] = moduleExport;
                        mod.exportDefault = moduleExportDefault;
                        mod.exportAs = moduleExportAs;
                        mod.runSetters = runSetters;

                        // Legacy shorthand for mod.exportAs("*").
                        mod.makeNsSetter = moduleMakeNsSetter;

                        return true;
                      }

                      return false;
                    };

                    // Calling module.link(id, setters) resolves the given ID using
                    // module.resolve(id), which should return a canonical absolute module
                    // identifier string (like require.resolve); then creates an Entry object
                    // for the child module and evaluates its code (if this is the first time
                    // it has been imported) by calling module.require(id). Finally, the
                    // provided setter functions will be called with values exported by the
                    // module, possibly multiple times when/if those exported values change.
                    // The module.link name is intended to evoke the "liveness" of the
                    // exported bindings, since we are subscribing to all future exports of
                    // the child module, not just taking a snapshot of its current exports.
                    function moduleLink(id, setters, key) {
                      utils.setESModule(this.exports);
                      Entry.getOrCreate(this.id, this);

                      var absChildId = this.resolve(id);
                      var childEntry = Entry.getOrCreate(absChildId);

                      if (utils.isObject(setters)) {
                        childEntry.addSetters(this, setters, key);
                      }

                      var _exports8 = this.require(absChildId);

                      if (childEntry.module === null) {
                        childEntry.module = {
                          id: absChildId,
                          exports: _exports8
                        };
                      }

                      childEntry.runSetters();
                    }

                    // Register getter functions for local variables in the scope of an export
                    // statement. Pass true as the second argument to indicate that the getter
                    // functions always return the same values.
                    function moduleExport(getters, constant) {
                      utils.setESModule(this.exports);
                      var entry = Entry.getOrCreate(this.id, this);
                      entry.addGetters(getters, constant);
                      if (this.loaded) {
                        // If the module has already been evaluated, then we need to trigger
                        // another round of entry.runSetters calls, which begins by calling
                        // entry.runModuleGetters(module).
                        entry.runSetters();
                      }
                    }

                    // Register a getter function that always returns the given value.
                    function moduleExportDefault(value) {
                      return this["export"]({
                        "default": function () {
                          return value;
                        }
                      }, true);
                    }

                    // Returns a function suitable for passing as a setter callback to
                    // module.link. If name is an identifier, calling the function will set
                    // the export of that name to the given value. If the name is "*", all
                    // properties of the value object will be exported by name, except for
                    // "default" (use "*+" instead of "*" to include it). Why the "default"
                    // property is skipped: https://github.com/tc39/ecma262/issues/948
                    function moduleExportAs(name) {
                      var entry = this;
                      var includeDefault = name === "*+";
                      return function (value) {
                        if (name === "*" || name === "*+") {
                          Object.keys(value).forEach(function (key) {
                            if (includeDefault || key !== "default") {
                              utils.copyKey(key, entry.exports, value);
                            }
                          });
                        } else {
                          entry.exports[name] = value;
                        }
                      };
                    }

                    // Platform-specific code should find a way to call this method whenever
                    // the module system is about to return module.exports from require. This
                    // might happen more than once per module, in case of dependency cycles,
                    // so we want Module.prototype.runSetters to run each time.
                    function runSetters(valueToPassThrough) {
                      Entry.getOrCreate(this.id, this).runSetters();

                      // Assignments to exported local variables get wrapped with calls to
                      // module.runSetters, so module.runSetters returns the
                      // valueToPassThrough parameter to allow the value of the original
                      // expression to pass through. For example,
                      //
                      //   export var a = 1;
                      //   console.log(a += 3);
                      //
                      // becomes
                      //
                      //   module.export("a", () => a);
                      //   var a = 1;
                      //   console.log(module.runSetters(a += 3));
                      //
                      // This ensures module.runSetters runs immediately after the assignment,
                      // and does not interfere with the larger computation.
                      return valueToPassThrough;
                    }

                    // Legacy helper that returns a function that takes a namespace object and
                    // copies the properties of the namespace to module.exports, excluding any
                    // "default" property (unless includeDefault is true), which is useful for
                    // implementing `export * from "module"`.
                    //
                    // Instead of using this helper like so:
                    //
                    //   module.link(id, { "*": module.makeNsSetter() });
                    //
                    // non-legacy code should simply use a string-valued setter:
                    //
                    //   module.link(id, { "*": "*" });
                    //
                    // or, to include the "default" property:
                    //
                    //   module.link(id, { "*": "*+" });
                    //
                    // This helper may be removed in a future version of Reify.
                    function moduleMakeNsSetter(includeDefault) {
                      return this.exportAs(includeDefault ? "*+" : "*");
                    }

                    /////////////////////////////////////////////////////////////////////////////////////////////////
                  }, "utils.js": function module(_require9, _exports9, _module10) {

                    // This module should be compatible with PhantomJS v1, just like the other files
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are
                    // not acceptable here, and importing any npm packages should be contemplated
                    // with extreme skepticism.

                    var useSetPrototypeOf = typeof Object.setPrototypeOf === "function";
                    var useSymbol = typeof Symbol === "function";

                    var esStrKey = "__esModule";
                    var esSymKey = useSymbol ? Symbol.for(esStrKey) : null;
                    var useToStringTag = useSymbol && typeof Symbol.toStringTag === "symbol";
                    var useGetOwnPropDesc = typeof Object.getOwnPropertyDescriptor === "function";
                    var hasOwn = Object.prototype.hasOwnProperty;

                    function copyKey(key, target, source) {
                      if (useGetOwnPropDesc) {
                        var desc = Object.getOwnPropertyDescriptor(source, key);
                        desc.configurable = true; // Allow redefinition.
                        Object.defineProperty(target, key, desc);
                      } else {
                        target[key] = source[key];
                      }
                    }

                    _exports9.copyKey = copyKey;

                    // Returns obj[key] unless that property is defined by a getter function,
                    // in which case the getter function is returned.
                    _exports9.valueOrGetter = function (obj, key) {
                      if (useGetOwnPropDesc && hasOwn.call(obj, key)) {
                        var desc = Object.getOwnPropertyDescriptor(obj, key);
                        if (typeof desc.get === "function") {
                          return desc.get;
                        }
                      }

                      return obj[key];
                    };

                    function getESModule(exported) {
                      if (isObjectLike(exported)) {
                        if (useSymbol && hasOwn.call(exported, esSymKey)) {
                          return !!exported[esSymKey];
                        }

                        if (hasOwn.call(exported, esStrKey)) {
                          return !!exported[esStrKey];
                        }
                      }

                      return false;
                    }

                    _exports9.getESModule = getESModule;

                    function setESModule(exported) {
                      if (isObjectLike(exported)) {
                        if (useSymbol) {
                          exported[esSymKey] = true;
                        }

                        if (!exported[esStrKey]) {
                          // Other module runtime systems may set exported.__esModule such
                          // that it can't be redefined, so we call Object.defineProperty only
                          // when exported.__esModule is not already true.
                          Object.defineProperty(exported, esStrKey, {
                            configurable: true,
                            enumerable: false,
                            value: true,
                            writable: false
                          });
                        }
                      }
                    }

                    _exports9.setESModule = setESModule;

                    function isObject(value) {
                      return typeof value === "object" && value !== null;
                    }

                    _exports9.isObject = isObject;

                    function isObjectLike(value) {
                      var type = typeof value;
                      return type === "function" || type === "object" && value !== null;
                    }

                    _exports9.isObjectLike = isObjectLike;

                    function createNamespace() {
                      var namespace = Object.create(null);

                      if (useToStringTag) {
                        Object.defineProperty(namespace, Symbol.toStringTag, {
                          value: "Module",
                          configurable: false,
                          enumerable: false,
                          writable: false
                        });
                      }

                      setESModule(namespace);

                      return namespace;
                    }

                    _exports9.createNamespace = createNamespace;

                    function setPrototypeOf(object, proto) {
                      if (useSetPrototypeOf) {
                        Object.setPrototypeOf(object, proto);
                      } else {
                        object.__proto__ = proto;
                      }
                      return object;
                    }

                    _exports9.setPrototypeOf = setPrototypeOf;

                    /////////////////////////////////////////////////////////////////////////////////////////////////
                  }, "entry.js": function module(_require10, _exports10, _module11) {

                    // This module should be compatible with PhantomJS v1, just like the other files
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are
                    // not acceptable here, and importing any npm packages should be contemplated
                    // with extreme skepticism.

                    var utils = _require10("./utils.js");

                    var GETTER_ERROR = {};
                    var NAN = {};
                    var UNDEFINED = {};
                    var hasOwn = Object.prototype.hasOwnProperty;
                    var keySalt = 0;

                    function Entry(id) {
                      // The canonical absolute module ID of the module this Entry manages.
                      this.id = id;
                      // The Module object this Entry manages, unknown until module.export or
                      // module.link is called for the first time.
                      this.module = null;
                      // Getters for local variables exported from the managed module.
                      this.getters = Object.create(null);
                      // Setters for assigning to local variables in parent modules.
                      this.setters = Object.create(null);
                      // The normalized namespace object that importers receive when they use
                      // `import * as namespace from "..."` syntax.
                      this.namespace = utils.createNamespace();
                    }

                    var Ep = utils.setPrototypeOf(Entry.prototype, null);
                    var entryMap = Object.create(null);

                    Entry.getOrCreate = function (id, mod) {
                      var entry = hasOwn.call(entryMap, id) ? entryMap[id] : entryMap[id] = new Entry(id);

                      if (utils.isObject(mod) && mod.id === entry.id) {
                        entry.module = mod;
                      }

                      return entry;
                    };

                    function safeKeys(obj) {
                      var keys = Object.keys(obj);
                      var esModuleIndex = keys.indexOf("__esModule");
                      if (esModuleIndex >= 0) {
                        keys.splice(esModuleIndex, 1);
                      }
                      return keys;
                    }

                    Ep.addGetters = function (getters, constant) {
                      var names = safeKeys(getters);
                      var nameCount = names.length;
                      constant = !!constant;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];
                        var getter = getters[name];

                        if (typeof getter === "function" &&
                        // Should this throw if this.getters[name] exists?
                        !(name in this.getters)) {
                          this.getters[name] = getter;
                          getter.constant = constant;
                          getter.runCount = 0;
                        }
                      }
                    };

                    Ep.addSetters = function (parent, setters, key) {
                      var names = safeKeys(setters);
                      var nameCount = names.length;

                      if (!nameCount) {
                        return;
                      }

                      // If no key is provided, make a unique key. Otherwise, make sure the key is
                      // distinct from keys provided by other parent modules.
                      key = key === void 0 ? makeUniqueKey() : parent.id + ":" + key;

                      var entry = this;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];
                        var setter = normalizeSetterValue(parent, setters[name]);

                        if (typeof setter === "function") {
                          setter.parent = parent;
                          if (!(name in entry.setters)) {
                            entry.setters[name] = Object.create(null);
                          }
                          entry.setters[name][key] = setter;
                        }
                      }

                      entry.runSetters(names);
                    };

                    function normalizeSetterValue(_module12, setter) {
                      if (typeof setter === "function") {
                        return setter;
                      }

                      if (typeof setter === "string") {
                        // If the value of the setter property is a string, the setter will
                        // re-export the imported value using that string as the name of the
                        // exported value. If the string is "*", all properties of the value
                        // object will be re-exported as individual exports, except for the
                        // "default" property (use "*+" instead of "*" to include it).
                        return _module12.exportAs(setter);
                      }

                      if (Array.isArray(setter)) {
                        switch (setter.length) {
                          case 0:
                            return null;
                          case 1:
                            return normalizeSetterValue(_module12, setter[0]);
                          default:
                            var setterFns = setter.map(function (elem) {
                              return normalizeSetterValue(_module12, elem);
                            });

                            // Return a combined function that calls all of the nested setter
                            // functions with the same value.
                            return function (value) {
                              setterFns.forEach(function (fn) {
                                fn(value);
                              });
                            };
                        }
                      }

                      return null;
                    }

                    Ep.runGetters = function (names) {
                      // Before running getters, copy anything added to the exports object
                      // over to the namespace. Values returned by getters take precedence
                      // over these values, but we don't want to miss anything.
                      syncExportsToNamespace(this, names);

                      if (names === void 0 || names.indexOf("*") >= 0) {
                        names = Object.keys(this.getters);
                      }

                      var nameCount = names.length;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];
                        var value = runGetter(this, name);

                        // If the getter is run without error, update both entry.namespace and
                        // module.exports with the current value so that CommonJS require
                        // calls remain consistent with module.watch.
                        if (value !== GETTER_ERROR) {
                          this.namespace[name] = value;
                          this.module.exports[name] = value;
                        }
                      }
                    };

                    function syncExportsToNamespace(entry, names) {
                      var setDefault = false;

                      if (entry.module === null) return;
                      var _exports11 = entry.module.exports;

                      if (!utils.getESModule(_exports11)) {
                        // If the module entry is managing overrides module.exports, that
                        // value should be exposed as the .default property of the namespace,
                        // unless module.exports is marked as an ECMASCript module.
                        entry.namespace.default = _exports11;
                        setDefault = true;
                      }

                      if (!utils.isObjectLike(_exports11)) {
                        return;
                      }

                      if (names === void 0 || names.indexOf("*") >= 0) {
                        names = Object.keys(_exports11);
                      }

                      names.forEach(function (key) {
                        // Don't set any properties for which a getter function exists in
                        // entry.getters, don't accidentally override entry.namespace.default,
                        // and only copy own properties from entry.module.exports.
                        if (!hasOwn.call(entry.getters, key) && !(setDefault && key === "default") && hasOwn.call(_exports11, key)) {
                          utils.copyKey(key, entry.namespace, _exports11);
                        }
                      });
                    }

                    // Called whenever module.exports might have changed, to trigger any
                    // setters associated with the newly exported values. The names parameter
                    // is optional; without it, all getters and setters will run.
                    Ep.runSetters = function (names) {
                      // Make sure entry.namespace and module.exports are up to date before we
                      // call getExportByName(entry, name).
                      this.runGetters(names);

                      // Lazily-initialized object mapping parent module identifiers to parent
                      // module objects whose setters we might need to run.
                      var parents;

                      forEachSetter(this, names, function (setter, name, value) {
                        if (parents === void 0) {
                          parents = Object.create(null);
                        }
                        parents[setter.parent.id] = setter.parent;

                        // The param order for setters is `value` then `name` because the `name`
                        // param is only used by namespace exports.
                        setter(value, name);
                      });

                      if (!parents) {
                        return;
                      }

                      // If any of the setters updated the module.exports of a parent module,
                      // or updated local variables that are exported by that parent module,
                      // then we must re-run any setters registered by that parent module.
                      var parentIDs = Object.keys(parents);
                      var parentIDCount = parentIDs.length;

                      for (var i = 0; i < parentIDCount; ++i) {
                        // What happens if parents[parentIDs[id]] === module, or if
                        // longer cycles exist in the parent chain? Thanks to our setter.last
                        // bookkeeping above, the runSetters broadcast will only proceed
                        // as far as there are any actual changes to report.
                        var parent = parents[parentIDs[i]];
                        var parentEntry = entryMap[parent.id];
                        if (parentEntry) {
                          parentEntry.runSetters();
                        }
                      }
                    };

                    function callSetterIfNecessary(setter, name, value, callback) {
                      if (name === "__esModule") {
                        // Ignore setters asking for module.exports.__esModule.
                        return;
                      }

                      var shouldCall = false;

                      if (setter.last === void 0) {
                        setter.last = Object.create(null);
                        // Always call the setter if it has never been called before.
                        shouldCall = true;
                      }

                      function changed(name, value) {
                        var valueToCompare = value;
                        if (valueToCompare !== valueToCompare) {
                          valueToCompare = NAN;
                        } else if (valueToCompare === void 0) {
                          valueToCompare = UNDEFINED;
                        }

                        if (setter.last[name] === valueToCompare) {
                          return false;
                        }

                        setter.last[name] = valueToCompare;
                        return true;
                      }

                      if (name === "*") {
                        var keys = safeKeys(value);
                        var keyCount = keys.length;
                        for (var i = 0; i < keyCount; ++i) {
                          var key = keys[i];
                          // Evaluating value[key] is risky because the property might be
                          // defined by a getter function that logs a deprecation warning (or
                          // worse) when evaluated. For example, Node uses this trick to
                          // display a deprecation warning whenever crypto.createCredentials
                          // is accessed. Fortunately, when value[key] is defined by a getter
                          // function, it's enough to check whether the getter function itself
                          // has changed, since we are careful elsewhere to preserve getters
                          // rather than prematurely evaluating them.
                          if (changed(key, utils.valueOrGetter(value, key))) {
                            shouldCall = true;
                          }
                        }
                      } else if (changed(name, value)) {
                        shouldCall = true;
                      }

                      if (shouldCall) {
                        // Only invoke the callback if we have not called this setter
                        // (with a value of this name) before, or the current value is
                        // different from the last value we passed to this setter.
                        return callback(setter, name, value);
                      }
                    }

                    // Invoke the given callback once for every (setter, name, value) that needs to
                    // be called. Note that forEachSetter does not call any setters itself, only the
                    // given callback.
                    function forEachSetter(entry, names, callback) {
                      var needToCheckNames = true;

                      if (names === void 0) {
                        names = Object.keys(entry.setters);
                        needToCheckNames = false;
                      }

                      var nameCount = names.length;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];

                        if (needToCheckNames && !hasOwn.call(entry.setters, name)) {
                          continue;
                        }

                        var setters = entry.setters[name];
                        var keys = Object.keys(setters);
                        var keyCount = keys.length;

                        for (var j = 0; j < keyCount; ++j) {
                          var key = keys[j];
                          var value = getExportByName(entry, name);

                          callSetterIfNecessary(setters[key], name, value, callback);

                          var getter = entry.getters[name];
                          if (typeof getter === "function" &&
                          // Sometimes a getter function will throw because it's called
                          // before the variable it's supposed to return has been
                          // initialized, so we need to know that the getter function has
                          // run to completion at least once.
                          getter.runCount > 0 && getter.constant) {
                            // If we happen to know that this getter function has run
                            // successfully, and will never return a different value, then we
                            // can forget the corresponding setter, because we've already
                            // reported that constant value. Note that we can't forget the
                            // getter, because we need to remember the original value in case
                            // anyone tampers with entry.module.exports[name].
                            delete setters[key];
                          }
                        }
                      }
                    }

                    function getExportByName(entry, name) {
                      if (name === "*") {
                        return entry.namespace;
                      }

                      if (hasOwn.call(entry.namespace, name)) {
                        return entry.namespace[name];
                      }

                      if (entry.module === null) return;
                      var exports = entry.module.exports;

                      if (name === "default" && !(utils.getESModule(exports) && "default" in exports)) {
                        return exports;
                      }

                      if (exports == null) {
                        return;
                      }

                      return exports[name];
                    }

                    function makeUniqueKey() {
                      return Math.random().toString(36)
                      // Add an incrementing salt to help track key ordering and also
                      // absolutely guarantee we never return the same key twice.
                      .replace("0.", ++keySalt + "$");
                    }

                    function runGetter(entry, name) {
                      var getter = entry.getters[name];
                      try {
                        var result = getter();
                        ++getter.runCount;
                        return result;
                      } catch (e) {}
                      return GETTER_ERROR;
                    }

                    _module11.exports = Entry;

                    /////////////////////////////////////////////////////////////////////////////////////////////////
                  } } } } } } } } }, {
    "extensions": [".js", ".json"]
  });
  meteorInstall({ "node_modules": { "meteor-node-stubs": { "package.json": function module(_require11, _exports12, _module13) {

          /////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                             //
          // node_modules/meteor-node-stubs/package.json                                                 //
          //                                                                                             //
          /////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _module13.exports = {
            "name": "meteor-node-stubs",
            "version": "1.0.0",
            "main": "index.js"
          };

          /////////////////////////////////////////////////////////////////////////////////////////////////
        }, "index.js": function module(_require12, _exports13, _module14) {

          /////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                             //
          // node_modules/meteor-node-stubs/index.js                                                     //
          //                                                                                             //
          /////////////////////////////////////////////////////////////////////////////////////////////////
          //
          var map = _require12("./map.json");
          var meteorAliases = {};

          Object.keys(map).forEach(function (id) {
            if (typeof map[id] === "string") {
              var aliasParts = _module14.id.split("/");
              aliasParts.pop();
              aliasParts.push("node_modules", map[id]);
              _exports13[id] = meteorAliases[id + ".js"] = aliasParts.join("/");
            } else {
              _exports13[id] = map[id];
              meteorAliases[id + ".js"] = function () {};
            }
          });

          if (typeof meteorInstall === "function") {
            meteorInstall({
              // Install the aliases into a node_modules directory one level up from
              // the root directory, so that they do not clutter the namespace
              // available to apps and packages.
              "..": {
                node_modules: meteorAliases
              }
            });
          }

          // If Buffer is not defined globally, but the "buffer" built-in stub is
          // installed and can be imported, use it to define global.Buffer so that
          // modules like core-util-is/lib/util.js can refer to Buffer without
          // crashing application startup.
          if (typeof global.Buffer !== "function") {
            try {
              // Use (0, require)(...) to avoid registering a dependency on the
              // "buffer" stub, in case it is not otherwise bundled.
              global.Buffer = (0, _require12)("buffer").Buffer;
            } catch (ok) {
              // Failure to import "buffer" is fine as long as the Buffer global
              // variable is not used.
            }
          }

          /////////////////////////////////////////////////////////////////////////////////////////////////
        }, "map.json": function module(_require13, _exports14, _module15) {

          /////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                             //
          // node_modules/meteor-node-stubs/map.json                                                     //
          //                                                                                             //
          /////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _module15.exports = {
            "assert": "assert/",
            "buffer": "buffer/",
            "child_process": null,
            "cluster": null,
            "console": "console-browserify",
            "constants": "constants-browserify",
            "crypto": "../wrappers/crypto.js",
            "dgram": null,
            "dns": null,
            "domain": "domain-browser",
            "events": "events/",
            "fs": null,
            "http": "stream-http",
            "https": "https-browserify",
            "module": "../wrappers/module.js",
            "net": null,
            "os": "os-browserify/browser.js",
            "path": "path-browserify",
            "process": "process/browser.js",
            "punycode": "punycode/",
            "querystring": "querystring-es3/",
            "readline": null,
            "repl": null,
            "stream": "stream-browserify",
            "_stream_duplex": "readable-stream/lib/_stream_duplex.js",
            "_stream_passthrough": "readable-stream/lib/_stream_passthrough.js",
            "_stream_readable": "readable-stream/lib/_stream_readable.js",
            "_stream_transform": "readable-stream/lib/_stream_transform.js",
            "_stream_writable": "readable-stream/lib/_stream_writable.js",
            "string_decoder": "string_decoder/",
            "sys": "util/util.js",
            "timers": "timers-browserify",
            "tls": null,
            "tty": "tty-browserify",
            "url": "url/",
            "util": "util/util.js",
            "vm": "vm-browserify",
            "zlib": "browserify-zlib"
          };

          /////////////////////////////////////////////////////////////////////////////////////////////////
        }, "deps": { "process.js": function _module16(_require14) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // node_modules/meteor-node-stubs/deps/process.js                                              //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require14("process/browser.js");

            /////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "node_modules": { "process": { "browser.js": function module(_require15, _exports15, _module17) {

              /////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                             //
              // node_modules/meteor-node-stubs/node_modules/process/browser.js                              //
              //                                                                                             //
              /////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // shim for using process in browser
              var process = _module17.exports = {};

              // cached from whatever global is present so that test runners that stub it
              // don't break things.  But we need to wrap it in a try catch in case it is
              // wrapped in strict mode code which doesn't define any globals.  It's inside a
              // function because try/catches deoptimize in certain engines.

              var cachedSetTimeout;
              var cachedClearTimeout;

              function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
              }
              function defaultClearTimeout() {
                throw new Error('clearTimeout has not been defined');
              }
              (function () {
                try {
                  if (typeof setTimeout === 'function') {
                    cachedSetTimeout = setTimeout;
                  } else {
                    cachedSetTimeout = defaultSetTimout;
                  }
                } catch (e) {
                  cachedSetTimeout = defaultSetTimout;
                }
                try {
                  if (typeof clearTimeout === 'function') {
                    cachedClearTimeout = clearTimeout;
                  } else {
                    cachedClearTimeout = defaultClearTimeout;
                  }
                } catch (e) {
                  cachedClearTimeout = defaultClearTimeout;
                }
              })();
              function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                  //normal enviroments in sane situations
                  return setTimeout(fun, 0);
                }
                // if setTimeout wasn't available but was latter defined
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                  cachedSetTimeout = setTimeout;
                  return setTimeout(fun, 0);
                }
                try {
                  // when when somebody has screwed with setTimeout but no I.E. maddness
                  return cachedSetTimeout(fun, 0);
                } catch (e) {
                  try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                    return cachedSetTimeout.call(null, fun, 0);
                  } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                    return cachedSetTimeout.call(this, fun, 0);
                  }
                }
              }
              function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                  //normal enviroments in sane situations
                  return clearTimeout(marker);
                }
                // if clearTimeout wasn't available but was latter defined
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                  cachedClearTimeout = clearTimeout;
                  return clearTimeout(marker);
                }
                try {
                  // when when somebody has screwed with setTimeout but no I.E. maddness
                  return cachedClearTimeout(marker);
                } catch (e) {
                  try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                    return cachedClearTimeout.call(null, marker);
                  } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                    // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                    return cachedClearTimeout.call(this, marker);
                  }
                }
              }
              var queue = [];
              var draining = false;
              var currentQueue;
              var queueIndex = -1;

              function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                  return;
                }
                draining = false;
                if (currentQueue.length) {
                  queue = currentQueue.concat(queue);
                } else {
                  queueIndex = -1;
                }
                if (queue.length) {
                  drainQueue();
                }
              }

              function drainQueue() {
                if (draining) {
                  return;
                }
                var timeout = runTimeout(cleanUpNextTick);
                draining = true;

                var len = queue.length;
                while (len) {
                  currentQueue = queue;
                  queue = [];
                  while (++queueIndex < len) {
                    if (currentQueue) {
                      currentQueue[queueIndex].run();
                    }
                  }
                  queueIndex = -1;
                  len = queue.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
              }

              process.nextTick = function (fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                  for (var i = 1; i < arguments.length; i++) {
                    args[i - 1] = arguments[i];
                  }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                  runTimeout(drainQueue);
                }
              };

              // v8 likes predictible objects
              function Item(fun, array) {
                this.fun = fun;
                this.array = array;
              }
              Item.prototype.run = function () {
                this.fun.apply(null, this.array);
              };
              process.title = 'browser';
              process.browser = true;
              process.env = {};
              process.argv = [];
              process.version = ''; // empty string to avoid regexp issues
              process.versions = {};

              function noop() {}

              process.on = noop;
              process.addListener = noop;
              process.once = noop;
              process.off = noop;
              process.removeListener = noop;
              process.removeAllListeners = noop;
              process.emit = noop;
              process.prependListener = noop;
              process.prependOnceListener = noop;

              process.listeners = function (name) {
                return [];
              };

              process.binding = function (name) {
                throw new Error('process.binding is not supported');
              };

              process.cwd = function () {
                return '/';
              };
              process.chdir = function (dir) {
                throw new Error('process.chdir is not supported');
              };
              process.umask = function () {
                return 0;
              };

              /////////////////////////////////////////////////////////////////////////////////////////////////
            } } } }, "@babel": { "runtime": { "package.json": function module(_require16, _exports16, _module18) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // node_modules/@babel/runtime/package.json                                                    //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module18.exports = {
              "author": {
                "name": "Sebastian McKenzie",
                "email": "sebmck@gmail.com"
              },
              "bugs": {
                "url": "https://github.com/babel/babel/issues"
              },
              "bundleDependencies": false,
              "dependencies": {
                "regenerator-runtime": "^0.13.4"
              },
              "deprecated": false,
              "description": "babel's modular runtime helpers",
              "devDependencies": {
                "@babel/helpers": "^7.9.2"
              },
              "gitHead": "2399e0df23cbd574a5ab39822288c438f5380ae8",
              "homepage": "https://babeljs.io/docs/en/next/babel-runtime",
              "license": "MIT",
              "name": "@babel/runtime",
              "publishConfig": {
                "access": "public"
              },
              "repository": {
                "type": "git",
                "url": "git+https://github.com/babel/babel.git",
                "directory": "packages/babel-runtime"
              },
              "version": "7.9.2"
            };

            /////////////////////////////////////////////////////////////////////////////////////////////////
          }, "helpers": { "objectSpread2.js": function module(_require17, _exports17, _module19) {

              /////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                             //
              // node_modules/@babel/runtime/helpers/objectSpread2.js                                        //
              //                                                                                             //
              /////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var defineProperty = _require17("./defineProperty");

              function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);

                if (Object.getOwnPropertySymbols) {
                  var symbols = Object.getOwnPropertySymbols(object);
                  if (enumerableOnly) symbols = symbols.filter(function (sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  });
                  keys.push.apply(keys, symbols);
                }

                return keys;
              }

              function _objectSpread2(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i] != null ? arguments[i] : {};

                  if (i % 2) {
                    ownKeys(Object(source), true).forEach(function (key) {
                      defineProperty(target, key, source[key]);
                    });
                  } else if (Object.getOwnPropertyDescriptors) {
                    Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                  } else {
                    ownKeys(Object(source)).forEach(function (key) {
                      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                    });
                  }
                }

                return target;
              }

              _module19.exports = _objectSpread2;
              /////////////////////////////////////////////////////////////////////////////////////////////////
            }, "defineProperty.js": function module(_require18, _exports18, _module20) {

              /////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                             //
              // node_modules/@babel/runtime/helpers/defineProperty.js                                       //
              //                                                                                             //
              /////////////////////////////////////////////////////////////////////////////////////////////////
              //
              function _defineProperty(obj, key, value) {
                if (key in obj) {
                  Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                  });
                } else {
                  obj[key] = value;
                }

                return obj;
              }

              _module20.exports = _defineProperty;
              /////////////////////////////////////////////////////////////////////////////////////////////////
            } } } } } }, {
    "extensions": [".js", ".json", ".css"]
  });

  var _exports2 = _require2("/node_modules/meteor/modules/client.js");

  /* Exports */
  Package._define("modules", _exports2, {
    meteorInstall: meteorInstall
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("modern-browsers");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("babel-compiler");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ecmascript");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ecmascript-runtime");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "babel-runtime": { "babel-runtime.js": function _module(_require) {

            /////////////////////////////////////////////////////////////////////////////////////
            //                                                                                 //
            // packages/babel-runtime/babel-runtime.js                                         //
            //                                                                                 //
            /////////////////////////////////////////////////////////////////////////////////////
            //
            try {
              var babelRuntimeVersion = _require("@babel/runtime/package.json").version;
            } catch (e) {
              throw new Error(["", "The @babel/runtime npm package could not be found in your node_modules ", "directory. Please run the following command to install it:", "", "  meteor npm install --save @babel/runtime", ""].join("\n"));
            }

            if (parseInt(babelRuntimeVersion, 10) < 7 || babelRuntimeVersion.indexOf("7.0.0-beta.") === 0 && parseInt(babelRuntimeVersion.split(".").pop(), 10) < 56) {
              console.error(["The version of @babel/runtime installed in your node_modules directory ", "(" + babelRuntimeVersion + ") is out of date. Please upgrade it by running ", "", "  meteor npm install --save @babel/runtime@latest", "", "in your application directory.", ""].join("\n"));
            }

            /////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports = _require2("/node_modules/meteor/babel-runtime/babel-runtime.js");

  /* Exports */
  Package._define("babel-runtime", _exports);
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var Promise;

  var _require = meteorInstall({ "node_modules": { "meteor": { "promise": { "modern.js": function _module() {

            /////////////////////////////////////////////////////////////////////////////
            //                                                                         //
            // packages/promise/modern.js                                              //
            //                                                                         //
            /////////////////////////////////////////////////////////////////////////////
            //
            // Initialize the package-scoped Promise variable with global.Promise in
            // all environments, even if it's not defined.
            Promise = global.Promise;

            /////////////////////////////////////////////////////////////////////////////
          }, "client.js": function _module2(_require2) {

            /////////////////////////////////////////////////////////////////////////////
            //                                                                         //
            // packages/promise/client.js                                              //
            //                                                                         //
            /////////////////////////////////////////////////////////////////////////////
            //
            _require2("./extensions.js");
            _require2("meteor-promise").makeCompatible(Promise);

            /////////////////////////////////////////////////////////////////////////////
          }, "extensions.js": function _module3() {

            /////////////////////////////////////////////////////////////////////////////
            //                                                                         //
            // packages/promise/extensions.js                                          //
            //                                                                         //
            /////////////////////////////////////////////////////////////////////////////
            //
            var proto = Promise.prototype;
            var hasOwn = Object.prototype.hasOwnProperty;

            proto.done = function (onFulfilled, onRejected) {
              var self = this;

              if (arguments.length > 0) {
                self = this.then.apply(this, arguments);
              }

              self.then(null, function (err) {
                Meteor._setImmediate(function () {
                  throw err;
                });
              });
            };

            if (!hasOwn.call(proto, "finally")) {
              proto["finally"] = function (onFinally) {
                var threw = false,
                    result;
                return this.then(function (value) {
                  result = value;
                  // Most implementations of Promise.prototype.finally call
                  // Promise.resolve(onFinally()) (or this.constructor.resolve or even
                  // this.constructor[Symbol.species].resolve, depending on how spec
                  // compliant they're trying to be), but this implementation simply
                  // relies on the standard Promise behavior of resolving any value
                  // returned from a .then callback function.
                  return onFinally();
                }, function (error) {
                  // Make the final .then callback (below) re-throw the error instead
                  // of returning it.
                  threw = true;
                  result = error;
                  return onFinally();
                }).then(function () {
                  if (threw) throw result;
                  return result;
                });
              };
            }

            /////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "meteor-promise": { "package.json": function module(_require3, _exports2, _module4) {

                /////////////////////////////////////////////////////////////////////////////
                //                                                                         //
                // node_modules/meteor/promise/node_modules/meteor-promise/package.json    //
                //                                                                         //
                /////////////////////////////////////////////////////////////////////////////
                //
                _module4.exports = {
                  "name": "meteor-promise",
                  "version": "0.8.7",
                  "browser": "promise_client.js",
                  "main": "promise_server.js"
                };

                /////////////////////////////////////////////////////////////////////////////
              }, "promise_client.js": function _module5(_require4, _exports3) {

                /////////////////////////////////////////////////////////////////////////////
                //                                                                         //
                // node_modules/meteor/promise/node_modules/meteor-promise/promise_client. //
                //                                                                         //
                /////////////////////////////////////////////////////////////////////////////
                //
                _exports3.makeCompatible = function (Promise) {
                  var es6PromiseThen = Promise.prototype.then;

                  Promise.prototype.then = function (onResolved, onRejected) {
                    if (typeof Meteor === "object" && typeof Meteor.bindEnvironment === "function") {
                      return es6PromiseThen.call(this, onResolved && Meteor.bindEnvironment(onResolved, raise), onRejected && Meteor.bindEnvironment(onRejected, raise));
                    }

                    return es6PromiseThen.call(this, onResolved, onRejected);
                  };
                };

                function raise(exception) {
                  throw exception;
                }

                /////////////////////////////////////////////////////////////////////////////
              } } } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/promise/modern.js");
  var _exports = _require("/node_modules/meteor/promise/client.js");

  /* Exports */
  Package._define("promise", _exports, {
    Promise: Promise
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var fetch;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "fetch": { "modern.js": function _module(_require, _exports) {

            ///////////////////////////////////////////////////////////////////////
            //                                                                   //
            // packages/fetch/modern.js                                          //
            //                                                                   //
            ///////////////////////////////////////////////////////////////////////
            //
            _exports.fetch = global.fetch;
            _exports.Headers = global.Headers;
            _exports.Request = global.Request;
            _exports.Response = global.Response;

            ///////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/fetch/modern.js");

  /* Exports */
  Package._define("fetch", _exports2, {
    fetch: fetch
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;
  var fetch = Package.fetch.fetch;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "dynamic-import": { "client.js": function module(_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/client.js                                           //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            var Module = _module.constructor;
            var cache = _require("./cache.js");
            var meteorInstall = _require("meteor/modules").meteorInstall;

            // Call module.dynamicImport(id) to fetch a module and any/all of its
            // dependencies that have not already been fetched, and evaluate them as
            // soon as they arrive. This runtime API makes it very easy to implement
            // ECMAScript dynamic import(...) syntax.
            Module.prototype.dynamicImport = function (id) {
              var module = this;
              return module.prefetch(id).then(function () {
                return getNamespace(module, id);
              });
            };

            // Called by Module.prototype.prefetch if there are any missing dynamic
            // modules that need to be fetched.
            meteorInstall.fetch = function (ids) {
              var tree = Object.create(null);
              var versions = Object.create(null);
              var dynamicVersions = _require("./dynamic-versions.js");
              var missing;

              function addSource(id, source) {
                addToTree(tree, id, makeModuleFunction(id, source, ids[id].options));
              }

              function addMissing(id) {
                addToTree(missing = missing || Object.create(null), id, 1);
              }

              Object.keys(ids).forEach(function (id) {
                var version = dynamicVersions.get(id);
                if (version) {
                  versions[id] = version;
                } else {
                  addMissing(id);
                }
              });

              return cache.checkMany(versions).then(function (sources) {
                Object.keys(sources).forEach(function (id) {
                  var source = sources[id];
                  if (source) {
                    addSource(id, source);
                  } else {
                    addMissing(id);
                  }
                });

                return missing && fetchMissing(missing).then(function (results) {
                  var versionsAndSourcesById = Object.create(null);
                  var flatResults = flattenModuleTree(results);

                  Object.keys(flatResults).forEach(function (id) {
                    var source = flatResults[id];
                    addSource(id, source);

                    var version = dynamicVersions.get(id);
                    if (version) {
                      versionsAndSourcesById[id] = {
                        version: version,
                        source: source
                      };
                    }
                  });

                  cache.setMany(versionsAndSourcesById);
                });
              }).then(function () {
                return tree;
              });
            };

            function flattenModuleTree(tree) {
              var parts = [""];
              var result = Object.create(null);

              function walk(t) {
                if (t && typeof t === "object") {
                  Object.keys(t).forEach(function (key) {
                    parts.push(key);
                    walk(t[key]);
                    parts.pop();
                  });
                } else if (typeof t === "string") {
                  result[parts.join("/")] = t;
                }
              }

              walk(tree);

              return result;
            }

            function makeModuleFunction(id, source, options) {
              // By calling (options && options.eval || eval) in a wrapper function,
              // we delay the cost of parsing and evaluating the module code until the
              // module is first imported.
              return function () {
                // If an options.eval function was provided in the second argument to
                // meteorInstall when this bundle was first installed, use that
                // function to parse and evaluate the dynamic module code in the scope
                // of the package. Otherwise fall back to indirect (global) eval.
                return (options && options.eval || eval)(
                // Wrap the function(require,exports,module){...} expression in
                // parentheses to force it to be parsed as an expression.
                "(" + source + ")\n//# sourceURL=" + id).apply(this, arguments);
              };
            }

            var secretKey = null;
            _exports.setSecretKey = function (key) {
              secretKey = key;
            };

            var fetchURL = _require("./common.js").fetchURL;

            function fetchMissing(missingTree) {
              // If the hostname of the URL returned by Meteor.absoluteUrl differs
              // from location.host, then we'll be making a cross-origin request here,
              // but that's fine because the dynamic-import server sets appropriate
              // CORS headers to enable fetching dynamic modules from any
              // origin. Browsers that check CORS do so by sending an additional
              // preflight OPTIONS request, which may add latency to the first dynamic
              // import() request, so it's a good idea for ROOT_URL to match
              // location.host if possible, though not strictly necessary.
              var url = Meteor.absoluteUrl(fetchURL);

              if (secretKey) {
                url += "key=" + secretKey;
              }

              return fetch(url, {
                method: "POST",
                body: JSON.stringify(missingTree)
              }).then(function (res) {
                if (!res.ok) throw res;
                return res.json();
              });
            }

            function addToTree(tree, id, value) {
              var parts = id.split("/");
              var lastIndex = parts.length - 1;
              parts.forEach(function (part, i) {
                if (part) {
                  tree = tree[part] = tree[part] || (i < lastIndex ? Object.create(null) : value);
                }
              });
            }

            function getNamespace(_module2, id) {
              var namespace;

              _module2.link(id, {
                "*": function (ns) {
                  namespace = ns;
                }
              });

              // This helps with Babel interop, since we're not just returning the
              // module.exports object.
              Object.defineProperty(namespace, "__esModule", {
                value: true,
                enumerable: false
              });

              return namespace;
            }

            /////////////////////////////////////////////////////////////////////////////////
          }, "cache.js": function module(_require3, _exports3, _module3) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/cache.js                                            //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            var dbPromise;

            var canUseCache =
            // The server doesn't benefit from dynamic module fetching, and almost
            // certainly doesn't support IndexedDB.
            Meteor.isClient &&
            // Cordova bundles all modules into the monolithic initial bundle, so
            // the dynamic module cache won't be necessary.
            !Meteor.isCordova &&
            // Caching can be confusing in development, and is designed to be a
            // transparent optimization for production performance.
            Meteor.isProduction;

            function getIDB() {
              if (typeof indexedDB !== "undefined") return indexedDB;
              if (typeof webkitIndexedDB !== "undefined") return webkitIndexedDB;
              if (typeof mozIndexedDB !== "undefined") return mozIndexedDB;
              if (typeof OIndexedDB !== "undefined") return OIndexedDB;
              if (typeof msIndexedDB !== "undefined") return msIndexedDB;
            }

            function withDB(callback) {
              dbPromise = dbPromise || new Promise(function (resolve, reject) {
                var idb = getIDB();
                if (!idb) {
                  throw new Error("IndexedDB not available");
                }

                // Incrementing the version number causes all existing object stores
                // to be deleted and recreates those specified by objectStoreMap.
                var request = idb.open("MeteorDynamicImportCache", 2);

                request.onupgradeneeded = function (event) {
                  var db = event.target.result;

                  // It's fine to delete existing object stores since onupgradeneeded
                  // is only called when we change the DB version number, and the data
                  // we're storing is disposable/reconstructible.
                  Array.from(db.objectStoreNames).forEach(db.deleteObjectStore, db);

                  Object.keys(objectStoreMap).forEach(function (name) {
                    db.createObjectStore(name, objectStoreMap[name]);
                  });
                };

                request.onerror = makeOnError(reject, "indexedDB.open");
                request.onsuccess = function (event) {
                  resolve(event.target.result);
                };
              });

              return dbPromise.then(callback, function (error) {
                return callback(null);
              });
            }

            var objectStoreMap = {
              sourcesByVersion: { keyPath: "version" }
            };

            function makeOnError(reject, source) {
              return function (event) {
                reject(new Error("IndexedDB failure in " + source + " " + JSON.stringify(event.target)));

                // Returning true from an onerror callback function prevents an
                // InvalidStateError in Firefox during Private Browsing. Silencing
                // that error is safe because we handle the error more gracefully by
                // passing it to the Promise reject function above.
                // https://github.com/meteor/meteor/issues/8697
                return true;
              };
            }

            var checkCount = 0;

            _exports3.checkMany = function (versions) {
              var ids = Object.keys(versions);
              var sourcesById = Object.create(null);

              // Initialize sourcesById with null values to indicate all sources are
              // missing (unless replaced with actual sources below).
              ids.forEach(function (id) {
                sourcesById[id] = null;
              });

              if (!canUseCache) {
                return Promise.resolve(sourcesById);
              }

              return withDB(function (db) {
                if (!db) {
                  // We thought we could used IndexedDB, but something went wrong
                  // while opening the database, so err on the side of safety.
                  return sourcesById;
                }

                var txn = db.transaction(["sourcesByVersion"], "readonly");

                var sourcesByVersion = txn.objectStore("sourcesByVersion");

                ++checkCount;

                function finish() {
                  --checkCount;
                  return sourcesById;
                }

                return Promise.all(ids.map(function (id) {
                  return new Promise(function (resolve, reject) {
                    var version = versions[id];
                    if (version) {
                      var sourceRequest = sourcesByVersion.get(version);
                      sourceRequest.onerror = makeOnError(reject, "sourcesByVersion.get");
                      sourceRequest.onsuccess = function (event) {
                        var result = event.target.result;
                        if (result) {
                          sourcesById[id] = result.source;
                        }
                        resolve();
                      };
                    } else resolve();
                  });
                })).then(finish, finish);
              });
            };

            var pendingVersionsAndSourcesById = Object.create(null);

            _exports3.setMany = function (versionsAndSourcesById) {
              if (canUseCache) {
                Object.assign(pendingVersionsAndSourcesById, versionsAndSourcesById);

                // Delay the call to flushSetMany so that it doesn't contribute to the
                // amount of time it takes to call module.dynamicImport.
                if (!flushSetMany.timer) {
                  flushSetMany.timer = setTimeout(flushSetMany, 100);
                }
              }
            };

            function flushSetMany() {
              if (checkCount > 0) {
                // If checkMany is currently underway, postpone the flush until later,
                // since updating the cache is less important than reading from it.
                return flushSetMany.timer = setTimeout(flushSetMany, 100);
              }

              flushSetMany.timer = null;

              var versionsAndSourcesById = pendingVersionsAndSourcesById;
              pendingVersionsAndSourcesById = Object.create(null);

              return withDB(function (db) {
                if (!db) {
                  // We thought we could used IndexedDB, but something went wrong
                  // while opening the database, so err on the side of safety.
                  return;
                }

                var setTxn = db.transaction(["sourcesByVersion"], "readwrite");

                var sourcesByVersion = setTxn.objectStore("sourcesByVersion");

                return Promise.all(Object.keys(versionsAndSourcesById).map(function (id) {
                  var info = versionsAndSourcesById[id];
                  return new Promise(function (resolve, reject) {
                    var request = sourcesByVersion.put({
                      version: info.version,
                      source: info.source
                    });
                    request.onerror = makeOnError(reject, "sourcesByVersion.put");
                    request.onsuccess = resolve;
                  });
                }));
              });
            }

            /////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function _module4(_require4, _exports4) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/common.js                                           //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            _exports4.fetchURL = "/__meteor__/dynamic-import/fetch";

            /////////////////////////////////////////////////////////////////////////////////
          }, "dynamic-versions.js": function module(_require5, _exports5, _module5) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/dynamic-versions.js                                 //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            // This magic double-underscored identifier gets replaced in
            // tools/isobuild/bundler.js with a tree of hashes of all dynamic
            // modules, for use in client.js and cache.js.
            var versions = {};

            _exports5.get = function (id) {
              var tree = versions;
              var version = null;

              id.split("/").some(function (part) {
                if (part) {
                  // If the tree contains identifiers for Meteor packages with colons
                  // in their names, the colons should not have been replaced by
                  // underscores, but there's a bug that results in that behavior, so
                  // for now it seems safest to be tolerant of underscores here.
                  // https://github.com/meteor/meteor/pull/9103
                  tree = tree[part] || tree[part.replace(":", "_")];
                }

                if (!tree) {
                  // Terminate the search without reassigning version.
                  return true;
                }

                if (typeof tree === "string") {
                  version = tree;
                  return true;
                }
              });

              return version;
            };

            function getFlatModuleArray(tree) {
              var parts = [""];
              var result = [];

              function walk(t) {
                if (t && typeof t === "object") {
                  Object.keys(t).forEach(function (key) {
                    parts.push(key);
                    walk(t[key]);
                    parts.pop();
                  });
                } else if (typeof t === "string") {
                  result.push(parts.join("/"));
                }
              }

              walk(tree);

              return result;
            }

            // If Package.appcache is loaded, preload additional modules after the
            // core bundle has been loaded.
            function precacheOnLoad(event) {
              // Check inside onload to make sure Package.appcache has had a chance to
              // become available.
              if (!Package.appcache) {
                return;
              }

              // Prefetch in chunks to reduce overhead. If we call module.prefetch(id)
              // multiple times in the same tick of the event loop, all those modules
              // will be fetched in one HTTP POST request.
              function prefetchInChunks(modules, amount) {
                Promise.all(modules.splice(0, amount).map(function (id) {
                  return _module5.prefetch(id);
                })).then(function () {
                  if (modules.length > 0) {
                    setTimeout(function () {
                      prefetchInChunks(modules, amount);
                    }, 0);
                  }
                });
              }

              // Get a flat array of modules and start prefetching.
              prefetchInChunks(getFlatModuleArray(versions), 50);
            }

            // Use window.onload to only prefetch after the main bundle has loaded.
            if (global.addEventListener) {
              global.addEventListener('load', precacheOnLoad, false);
            } else if (global.attachEvent) {
              global.attachEvent('onload', precacheOnLoad);
            }

            /////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/dynamic-import/client.js");

  /* Exports */
  Package._define("dynamic-import", _exports2);
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("es5-shim");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ecmascript-runtime-client": { "modern.js": function _module(_require) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/ecmascript-runtime-client/modern.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            try {
              _require("core-js/modules/es.object.get-own-property-descriptors");
            } catch (e) {
              throw new Error(["The core-js npm package could not be found in your node_modules ", "directory. Please run the following command to install it:", "", "  meteor npm install --save core-js", ""].join("\n"));
            }

            _require("core-js/modules/es.object.is");
            _require("core-js/modules/es.function.name");
            _require("core-js/modules/es.number.is-finite");
            _require("core-js/modules/es.number.is-nan");
            _require("core-js/modules/es.array.flat");
            _require("core-js/modules/es.array.flat-map");
            _require("core-js/modules/es.object.from-entries");
            _require("core-js/modules/es.string.pad-start");
            _require("core-js/modules/es.string.pad-end");
            _require("core-js/modules/es.string.trim-start");
            _require("core-js/modules/es.string.trim-end");
            _require("core-js/modules/es.symbol.async-iterator");

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "core-js": { "modules": { "es.object.get-own-property-descriptors.js": function _module2(_require3) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es.object.get-own-property-descriptors.j //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var $ = _require3('../internals/export');
                  var DESCRIPTORS = _require3('../internals/descriptors');
                  var ownKeys = _require3('../internals/own-keys');
                  var toIndexedObject = _require3('../internals/to-indexed-object');
                  var getOwnPropertyDescriptorModule = _require3('../internals/object-get-own-property-descriptor');
                  var createProperty = _require3('../internals/create-property');

                  // `Object.getOwnPropertyDescriptors` method
                  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
                  $({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {
                    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
                      var O = toIndexedObject(object);
                      var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
                      var keys = ownKeys(O);
                      var result = {};
                      var index = 0;
                      var key, descriptor;
                      while (keys.length > index) {
                        descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
                        if (descriptor !== undefined) createProperty(result, key, descriptor);
                      }
                      return result;
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.object.is.js": function _module3(_require4) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es.object.is.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var $ = _require4('../internals/export');
                  var is = _require4('../internals/same-value');

                  // `Object.is` method
                  // https://tc39.github.io/ecma262/#sec-object.is
                  $({ target: 'Object', stat: true }, {
                    is: is
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.function.name.js": function _module4(_require5) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es.function.name.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var DESCRIPTORS = _require5('../internals/descriptors');
                  var defineProperty = _require5('../internals/object-define-property').f;

                  var FunctionPrototype = Function.prototype;
                  var FunctionPrototypeToString = FunctionPrototype.toString;
                  var nameRE = /^\s*function ([^ (]*)/;
                  var NAME = 'name';

                  // Function instances `.name` property
                  // https://tc39.github.io/ecma262/#sec-function-instances-name
                  if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
                    defineProperty(FunctionPrototype, NAME, {
                      configurable: true,
                      get: function () {
                        try {
                          return FunctionPrototypeToString.call(this).match(nameRE)[1];
                        } catch (error) {
                          return '';
                        }
                      }
                    });
                  }

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.number.is-finite.js": function _module5(_require6) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es.number.is-finite.js                   //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var $ = _require6('../internals/export');
                  var numberIsFinite = _require6('../internals/number-is-finite');

                  // `Number.isFinite` method
                  // https://tc39.github.io/ecma262/#sec-number.isfinite
                  $({ target: 'Number', stat: true }, { isFinite: numberIsFinite });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.number.is-nan.js": function _module6(_require7) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es.number.is-nan.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var $ = _require7('../internals/export');

                  // `Number.isNaN` method
                  // https://tc39.github.io/ecma262/#sec-number.isnan
                  $({ target: 'Number', stat: true }, {
                    isNaN: function isNaN(number) {
                      // eslint-disable-next-line no-self-compare
                      return number != number;
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.array.flat.js": function _module7(_require8) {
                  var $ = _require8('../internals/export');
                  var flattenIntoArray = _require8('../internals/flatten-into-array');
                  var toObject = _require8('../internals/to-object');
                  var toLength = _require8('../internals/to-length');
                  var toInteger = _require8('../internals/to-integer');
                  var arraySpeciesCreate = _require8('../internals/array-species-create');

                  // `Array.prototype.flat` method
                  // https://github.com/tc39/proposal-flatMap
                  $({ target: 'Array', proto: true }, {
                    flat: function flat() /* depthArg = 1 */{
                      var depthArg = arguments.length ? arguments[0] : undefined;
                      var O = toObject(this);
                      var sourceLen = toLength(O.length);
                      var A = arraySpeciesCreate(O, 0);
                      A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
                      return A;
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.array.flat-map.js": function _module8(_require9) {
                  var $ = _require9('../internals/export');
                  var flattenIntoArray = _require9('../internals/flatten-into-array');
                  var toObject = _require9('../internals/to-object');
                  var toLength = _require9('../internals/to-length');
                  var aFunction = _require9('../internals/a-function');
                  var arraySpeciesCreate = _require9('../internals/array-species-create');

                  // `Array.prototype.flatMap` method
                  // https://github.com/tc39/proposal-flatMap
                  $({ target: 'Array', proto: true }, {
                    flatMap: function flatMap(callbackfn /* , thisArg */) {
                      var O = toObject(this);
                      var sourceLen = toLength(O.length);
                      var A;
                      aFunction(callbackfn);
                      A = arraySpeciesCreate(O, 0);
                      A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                      return A;
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.object.from-entries.js": function _module9(_require10) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es.object.from-entries.js                //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var $ = _require10('../internals/export');
                  var iterate = _require10('../internals/iterate');
                  var createProperty = _require10('../internals/create-property');

                  // `Object.fromEntries` method
                  // https://github.com/tc39/proposal-object-from-entries
                  $({ target: 'Object', stat: true }, {
                    fromEntries: function fromEntries(iterable) {
                      var obj = {};
                      iterate(iterable, function (k, v) {
                        createProperty(obj, k, v);
                      }, undefined, true);
                      return obj;
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.string.pad-start.js": function _module10(_require11) {
                  var $ = _require11('../internals/export');
                  var $padStart = _require11('../internals/string-pad').start;
                  var WEBKIT_BUG = _require11('../internals/webkit-string-pad-bug');

                  // `String.prototype.padStart` method
                  // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
                  $({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
                    padStart: function padStart(maxLength /* , fillString = ' ' */) {
                      return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.string.pad-end.js": function _module11(_require12) {
                  var $ = _require12('../internals/export');
                  var $padEnd = _require12('../internals/string-pad').end;
                  var WEBKIT_BUG = _require12('../internals/webkit-string-pad-bug');

                  // `String.prototype.padEnd` method
                  // https://tc39.github.io/ecma262/#sec-string.prototype.padend
                  $({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
                    padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
                      return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.string.trim-start.js": function _module12(_require13) {
                  var $ = _require13('../internals/export');
                  var $trimStart = _require13('../internals/string-trim').start;
                  var forcedStringTrimMethod = _require13('../internals/forced-string-trim-method');

                  var FORCED = forcedStringTrimMethod('trimStart');

                  var trimStart = FORCED ? function trimStart() {
                    return $trimStart(this);
                  } : ''.trimStart;

                  // `String.prototype.{ trimStart, trimLeft }` methods
                  // https://github.com/tc39/ecmascript-string-left-right-trim
                  $({ target: 'String', proto: true, forced: FORCED }, {
                    trimStart: trimStart,
                    trimLeft: trimStart
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.string.trim-end.js": function _module13(_require14) {
                  var $ = _require14('../internals/export');
                  var $trimEnd = _require14('../internals/string-trim').end;
                  var forcedStringTrimMethod = _require14('../internals/forced-string-trim-method');

                  var FORCED = forcedStringTrimMethod('trimEnd');

                  var trimEnd = FORCED ? function trimEnd() {
                    return $trimEnd(this);
                  } : ''.trimEnd;

                  // `String.prototype.{ trimEnd, trimRight }` methods
                  // https://github.com/tc39/ecmascript-string-left-right-trim
                  $({ target: 'String', proto: true, forced: FORCED }, {
                    trimEnd: trimEnd,
                    trimRight: trimEnd
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es.symbol.async-iterator.js": function _module14(_require15) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es.symbol.async-iterator.js              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var defineWellKnownSymbol = _require15('../internals/define-well-known-symbol');

                  // `Symbol.asyncIterator` well-known symbol
                  // https://tc39.github.io/ecma262/#sec-symbol.asynciterator
                  defineWellKnownSymbol('asyncIterator');

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                } }, "internals": { "export.js": function module(_require16, _exports2, _module15) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/export.js                              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require16('../internals/global');
                  var getOwnPropertyDescriptor = _require16('../internals/object-get-own-property-descriptor').f;
                  var hide = _require16('../internals/hide');
                  var redefine = _require16('../internals/redefine');
                  var setGlobal = _require16('../internals/set-global');
                  var copyConstructorProperties = _require16('../internals/copy-constructor-properties');
                  var isForced = _require16('../internals/is-forced');

                  /*
                    options.target      - name of the target object
                    options.global      - target is the global object
                    options.stat        - export as static methods of target
                    options.proto       - export as prototype methods of target
                    options.real        - real prototype method for the `pure` version
                    options.forced      - export even if the native feature is available
                    options.bind        - bind methods to the target, required for the `pure` version
                    options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
                    options.unsafe      - use the simple assignment of property instead of delete + defineProperty
                    options.sham        - add a flag to not completely full polyfills
                    options.enumerable  - export as enumerable property
                    options.noTargetGet - prevent calling a getter on target
                  */
                  _module15.exports = function (options, source) {
                    var TARGET = options.target;
                    var GLOBAL = options.global;
                    var STATIC = options.stat;
                    var FORCED, target, key, targetProperty, sourceProperty, descriptor;
                    if (GLOBAL) {
                      target = global;
                    } else if (STATIC) {
                      target = global[TARGET] || setGlobal(TARGET, {});
                    } else {
                      target = (global[TARGET] || {}).prototype;
                    }
                    if (target) for (key in source) {
                      sourceProperty = source[key];
                      if (options.noTargetGet) {
                        descriptor = getOwnPropertyDescriptor(target, key);
                        targetProperty = descriptor && descriptor.value;
                      } else targetProperty = target[key];
                      FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
                      // contained in target
                      if (!FORCED && targetProperty !== undefined) {
                        if (typeof sourceProperty === typeof targetProperty) continue;
                        copyConstructorProperties(sourceProperty, targetProperty);
                      }
                      // add a flag to not completely full polyfills
                      if (options.sham || targetProperty && targetProperty.sham) {
                        hide(sourceProperty, 'sham', true);
                      }
                      // extend global
                      redefine(target, key, sourceProperty, options);
                    }
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "global.js": function module(_require17, _exports3, _module16) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/global.js                              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var O = 'object';
                  var check = function (it) {
                    return it && it.Math == Math && it;
                  };

                  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
                  _module16.exports =
                  // eslint-disable-next-line no-undef
                  check(typeof globalThis == O && globalThis) || check(typeof window == O && window) || check(typeof self == O && self) || check(typeof global == O && global) ||
                  // eslint-disable-next-line no-new-func
                  Function('return this')();

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "object-get-own-property-descriptor.js": function _module17(_require18, _exports4) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/object-get-own-property-descriptor.js  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var DESCRIPTORS = _require18('../internals/descriptors');
                  var propertyIsEnumerableModule = _require18('../internals/object-property-is-enumerable');
                  var createPropertyDescriptor = _require18('../internals/create-property-descriptor');
                  var toIndexedObject = _require18('../internals/to-indexed-object');
                  var toPrimitive = _require18('../internals/to-primitive');
                  var has = _require18('../internals/has');
                  var IE8_DOM_DEFINE = _require18('../internals/ie8-dom-define');

                  var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

                  // `Object.getOwnPropertyDescriptor` method
                  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
                  _exports4.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
                    O = toIndexedObject(O);
                    P = toPrimitive(P, true);
                    if (IE8_DOM_DEFINE) try {
                      return nativeGetOwnPropertyDescriptor(O, P);
                    } catch (error) {/* empty */}
                    if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "descriptors.js": function module(_require19, _exports5, _module18) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/descriptors.js                         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var fails = _require19('../internals/fails');

                  // Thank's IE8 for his funny defineProperty
                  _module18.exports = !fails(function () {
                    return Object.defineProperty({}, 'a', { get: function () {
                        return 7;
                      } }).a != 7;
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "fails.js": function module(_require20, _exports6, _module19) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/fails.js                               //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module19.exports = function (exec) {
                    try {
                      return !!exec();
                    } catch (error) {
                      return true;
                    }
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "object-property-is-enumerable.js": function _module20(_require21, _exports7) {
                  var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
                  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

                  // Nashorn ~ JDK8 bug
                  var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

                  // `Object.prototype.propertyIsEnumerable` method implementation
                  // https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
                  _exports7.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
                    var descriptor = getOwnPropertyDescriptor(this, V);
                    return !!descriptor && descriptor.enumerable;
                  } : nativePropertyIsEnumerable;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "create-property-descriptor.js": function module(_require22, _exports8, _module21) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/create-property-descriptor.js          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module21.exports = function (bitmap, value) {
                    return {
                      enumerable: !(bitmap & 1),
                      configurable: !(bitmap & 2),
                      writable: !(bitmap & 4),
                      value: value
                    };
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "to-indexed-object.js": function module(_require23, _exports9, _module22) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/to-indexed-object.js                   //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // toObject with fallback for non-array-like ES3 strings
                  var IndexedObject = _require23('../internals/indexed-object');
                  var requireObjectCoercible = _require23('../internals/require-object-coercible');

                  _module22.exports = function (it) {
                    return IndexedObject(requireObjectCoercible(it));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "indexed-object.js": function module(_require24, _exports10, _module23) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/indexed-object.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var fails = _require24('../internals/fails');
                  var classof = _require24('../internals/classof-raw');

                  var split = ''.split;

                  // fallback for non-array-like ES3 and non-enumerable old V8 strings
                  _module23.exports = fails(function () {
                    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
                    // eslint-disable-next-line no-prototype-builtins
                    return !Object('z').propertyIsEnumerable(0);
                  }) ? function (it) {
                    return classof(it) == 'String' ? split.call(it, '') : Object(it);
                  } : Object;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "classof-raw.js": function module(_require25, _exports11, _module24) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/classof-raw.js                         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var toString = {}.toString;

                  _module24.exports = function (it) {
                    return toString.call(it).slice(8, -1);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "require-object-coercible.js": function module(_require26, _exports12, _module25) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/require-object-coercible.js            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // `RequireObjectCoercible` abstract operation
                  // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
                  _module25.exports = function (it) {
                    if (it == undefined) throw TypeError("Can't call method on " + it);
                    return it;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "to-primitive.js": function module(_require27, _exports13, _module26) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/to-primitive.js                        //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var isObject = _require27('../internals/is-object');

                  // `ToPrimitive` abstract operation
                  // https://tc39.github.io/ecma262/#sec-toprimitive
                  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
                  // and the second argument - flag - preferred type is a string
                  _module26.exports = function (input, PREFERRED_STRING) {
                    if (!isObject(input)) return input;
                    var fn, val;
                    if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
                    if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
                    if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
                    throw TypeError("Can't convert object to primitive value");
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "is-object.js": function module(_require28, _exports14, _module27) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/is-object.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module27.exports = function (it) {
                    return typeof it === 'object' ? it !== null : typeof it === 'function';
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "has.js": function module(_require29, _exports15, _module28) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/has.js                                 //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var hasOwnProperty = {}.hasOwnProperty;

                  _module28.exports = function (it, key) {
                    return hasOwnProperty.call(it, key);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "ie8-dom-define.js": function module(_require30, _exports16, _module29) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/ie8-dom-define.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var DESCRIPTORS = _require30('../internals/descriptors');
                  var fails = _require30('../internals/fails');
                  var createElement = _require30('../internals/document-create-element');

                  // Thank's IE8 for his funny defineProperty
                  _module29.exports = !DESCRIPTORS && !fails(function () {
                    return Object.defineProperty(createElement('div'), 'a', {
                      get: function () {
                        return 7;
                      }
                    }).a != 7;
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "document-create-element.js": function module(_require31, _exports17, _module30) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/document-create-element.js             //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require31('../internals/global');
                  var isObject = _require31('../internals/is-object');

                  var document = global.document;
                  // typeof document.createElement is 'object' in old IE
                  var EXISTS = isObject(document) && isObject(document.createElement);

                  _module30.exports = function (it) {
                    return EXISTS ? document.createElement(it) : {};
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "hide.js": function module(_require32, _exports18, _module31) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/hide.js                                //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var DESCRIPTORS = _require32('../internals/descriptors');
                  var definePropertyModule = _require32('../internals/object-define-property');
                  var createPropertyDescriptor = _require32('../internals/create-property-descriptor');

                  _module31.exports = DESCRIPTORS ? function (object, key, value) {
                    return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
                  } : function (object, key, value) {
                    object[key] = value;
                    return object;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "object-define-property.js": function _module32(_require33, _exports19) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/object-define-property.js              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var DESCRIPTORS = _require33('../internals/descriptors');
                  var IE8_DOM_DEFINE = _require33('../internals/ie8-dom-define');
                  var anObject = _require33('../internals/an-object');
                  var toPrimitive = _require33('../internals/to-primitive');

                  var nativeDefineProperty = Object.defineProperty;

                  // `Object.defineProperty` method
                  // https://tc39.github.io/ecma262/#sec-object.defineproperty
                  _exports19.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
                    anObject(O);
                    P = toPrimitive(P, true);
                    anObject(Attributes);
                    if (IE8_DOM_DEFINE) try {
                      return nativeDefineProperty(O, P, Attributes);
                    } catch (error) {/* empty */}
                    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
                    if ('value' in Attributes) O[P] = Attributes.value;
                    return O;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "an-object.js": function module(_require34, _exports20, _module33) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/an-object.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var isObject = _require34('../internals/is-object');

                  _module33.exports = function (it) {
                    if (!isObject(it)) {
                      throw TypeError(String(it) + ' is not an object');
                    }return it;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "redefine.js": function module(_require35, _exports21, _module34) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/redefine.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require35('../internals/global');
                  var shared = _require35('../internals/shared');
                  var hide = _require35('../internals/hide');
                  var has = _require35('../internals/has');
                  var setGlobal = _require35('../internals/set-global');
                  var nativeFunctionToString = _require35('../internals/function-to-string');
                  var InternalStateModule = _require35('../internals/internal-state');

                  var getInternalState = InternalStateModule.get;
                  var enforceInternalState = InternalStateModule.enforce;
                  var TEMPLATE = String(nativeFunctionToString).split('toString');

                  shared('inspectSource', function (it) {
                    return nativeFunctionToString.call(it);
                  });

                  (_module34.exports = function (O, key, value, options) {
                    var unsafe = options ? !!options.unsafe : false;
                    var simple = options ? !!options.enumerable : false;
                    var noTargetGet = options ? !!options.noTargetGet : false;
                    if (typeof value == 'function') {
                      if (typeof key == 'string' && !has(value, 'name')) hide(value, 'name', key);
                      enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
                    }
                    if (O === global) {
                      if (simple) O[key] = value;else setGlobal(key, value);
                      return;
                    } else if (!unsafe) {
                      delete O[key];
                    } else if (!noTargetGet && O[key]) {
                      simple = true;
                    }
                    if (simple) O[key] = value;else hide(O, key, value);
                    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
                  })(Function.prototype, 'toString', function toString() {
                    return typeof this == 'function' && getInternalState(this).source || nativeFunctionToString.call(this);
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "shared.js": function module(_require36, _exports22, _module35) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/shared.js                              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require36('../internals/global');
                  var setGlobal = _require36('../internals/set-global');
                  var IS_PURE = _require36('../internals/is-pure');

                  var SHARED = '__core-js_shared__';
                  var store = global[SHARED] || setGlobal(SHARED, {});

                  (_module35.exports = function (key, value) {
                    return store[key] || (store[key] = value !== undefined ? value : {});
                  })('versions', []).push({
                    version: '3.2.1',
                    mode: IS_PURE ? 'pure' : 'global',
                    copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "set-global.js": function module(_require37, _exports23, _module36) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/set-global.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require37('../internals/global');
                  var hide = _require37('../internals/hide');

                  _module36.exports = function (key, value) {
                    try {
                      hide(global, key, value);
                    } catch (error) {
                      global[key] = value;
                    }return value;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "is-pure.js": function module(_require38, _exports24, _module37) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/is-pure.js                             //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module37.exports = false;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "function-to-string.js": function module(_require39, _exports25, _module38) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/function-to-string.js                  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var shared = _require39('../internals/shared');

                  _module38.exports = shared('native-function-to-string', Function.toString);

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "internal-state.js": function module(_require40, _exports26, _module39) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/internal-state.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var NATIVE_WEAK_MAP = _require40('../internals/native-weak-map');
                  var global = _require40('../internals/global');
                  var isObject = _require40('../internals/is-object');
                  var hide = _require40('../internals/hide');
                  var objectHas = _require40('../internals/has');
                  var sharedKey = _require40('../internals/shared-key');
                  var hiddenKeys = _require40('../internals/hidden-keys');

                  var WeakMap = global.WeakMap;
                  var set, get, has;

                  var enforce = function (it) {
                    return has(it) ? get(it) : set(it, {});
                  };

                  var getterFor = function (TYPE) {
                    return function (it) {
                      var state;
                      if (!isObject(it) || (state = get(it)).type !== TYPE) {
                        throw TypeError('Incompatible receiver, ' + TYPE + ' required');
                      }return state;
                    };
                  };

                  if (NATIVE_WEAK_MAP) {
                    var store = new WeakMap();
                    var wmget = store.get;
                    var wmhas = store.has;
                    var wmset = store.set;
                    set = function (it, metadata) {
                      wmset.call(store, it, metadata);
                      return metadata;
                    };
                    get = function (it) {
                      return wmget.call(store, it) || {};
                    };
                    has = function (it) {
                      return wmhas.call(store, it);
                    };
                  } else {
                    var STATE = sharedKey('state');
                    hiddenKeys[STATE] = true;
                    set = function (it, metadata) {
                      hide(it, STATE, metadata);
                      return metadata;
                    };
                    get = function (it) {
                      return objectHas(it, STATE) ? it[STATE] : {};
                    };
                    has = function (it) {
                      return objectHas(it, STATE);
                    };
                  }

                  _module39.exports = {
                    set: set,
                    get: get,
                    has: has,
                    enforce: enforce,
                    getterFor: getterFor
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "native-weak-map.js": function module(_require41, _exports27, _module40) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/native-weak-map.js                     //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require41('../internals/global');
                  var nativeFunctionToString = _require41('../internals/function-to-string');

                  var WeakMap = global.WeakMap;

                  _module40.exports = typeof WeakMap === 'function' && /native code/.test(nativeFunctionToString.call(WeakMap));

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "shared-key.js": function module(_require42, _exports28, _module41) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/shared-key.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var shared = _require42('../internals/shared');
                  var uid = _require42('../internals/uid');

                  var keys = shared('keys');

                  _module41.exports = function (key) {
                    return keys[key] || (keys[key] = uid(key));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "uid.js": function module(_require43, _exports29, _module42) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/uid.js                                 //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var id = 0;
                  var postfix = Math.random();

                  _module42.exports = function (key) {
                    return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "hidden-keys.js": function module(_require44, _exports30, _module43) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/hidden-keys.js                         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module43.exports = {};

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "copy-constructor-properties.js": function module(_require45, _exports31, _module44) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/copy-constructor-properties.js         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var has = _require45('../internals/has');
                  var ownKeys = _require45('../internals/own-keys');
                  var getOwnPropertyDescriptorModule = _require45('../internals/object-get-own-property-descriptor');
                  var definePropertyModule = _require45('../internals/object-define-property');

                  _module44.exports = function (target, source) {
                    var keys = ownKeys(source);
                    var defineProperty = definePropertyModule.f;
                    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
                    for (var i = 0; i < keys.length; i++) {
                      var key = keys[i];
                      if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
                    }
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "own-keys.js": function module(_require46, _exports32, _module45) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/own-keys.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var getBuiltIn = _require46('../internals/get-built-in');
                  var getOwnPropertyNamesModule = _require46('../internals/object-get-own-property-names');
                  var getOwnPropertySymbolsModule = _require46('../internals/object-get-own-property-symbols');
                  var anObject = _require46('../internals/an-object');

                  // all object keys, includes non-enumerable and symbols
                  _module45.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
                    var keys = getOwnPropertyNamesModule.f(anObject(it));
                    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                    return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "get-built-in.js": function module(_require47, _exports33, _module46) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/get-built-in.js                        //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var path = _require47('../internals/path');
                  var global = _require47('../internals/global');

                  var aFunction = function (variable) {
                    return typeof variable == 'function' ? variable : undefined;
                  };

                  _module46.exports = function (namespace, method) {
                    return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace]) : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "path.js": function module(_require48, _exports34, _module47) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/path.js                                //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module47.exports = _require48('../internals/global');

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "object-get-own-property-names.js": function _module48(_require49, _exports35) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/object-get-own-property-names.js       //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var internalObjectKeys = _require49('../internals/object-keys-internal');
                  var enumBugKeys = _require49('../internals/enum-bug-keys');

                  var hiddenKeys = enumBugKeys.concat('length', 'prototype');

                  // `Object.getOwnPropertyNames` method
                  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
                  _exports35.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
                    return internalObjectKeys(O, hiddenKeys);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "object-keys-internal.js": function module(_require50, _exports36, _module49) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/object-keys-internal.js                //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var has = _require50('../internals/has');
                  var toIndexedObject = _require50('../internals/to-indexed-object');
                  var indexOf = _require50('../internals/array-includes').indexOf;
                  var hiddenKeys = _require50('../internals/hidden-keys');

                  _module49.exports = function (object, names) {
                    var O = toIndexedObject(object);
                    var i = 0;
                    var result = [];
                    var key;
                    for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
                    // Don't enum bug & hidden keys
                    while (names.length > i) if (has(O, key = names[i++])) {
                      ~indexOf(result, key) || result.push(key);
                    }
                    return result;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "array-includes.js": function module(_require51, _exports37, _module50) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/array-includes.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var toIndexedObject = _require51('../internals/to-indexed-object');
                  var toLength = _require51('../internals/to-length');
                  var toAbsoluteIndex = _require51('../internals/to-absolute-index');

                  // `Array.prototype.{ indexOf, includes }` methods implementation
                  var createMethod = function (IS_INCLUDES) {
                    return function ($this, el, fromIndex) {
                      var O = toIndexedObject($this);
                      var length = toLength(O.length);
                      var index = toAbsoluteIndex(fromIndex, length);
                      var value;
                      // Array#includes uses SameValueZero equality algorithm
                      // eslint-disable-next-line no-self-compare
                      if (IS_INCLUDES && el != el) while (length > index) {
                        value = O[index++];
                        // eslint-disable-next-line no-self-compare
                        if (value != value) return true;
                        // Array#indexOf ignores holes, Array#includes - not
                      } else for (; length > index; index++) {
                        if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
                      }return !IS_INCLUDES && -1;
                    };
                  };

                  _module50.exports = {
                    // `Array.prototype.includes` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.includes
                    includes: createMethod(true),
                    // `Array.prototype.indexOf` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
                    indexOf: createMethod(false)
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "to-length.js": function module(_require52, _exports38, _module51) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/to-length.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var toInteger = _require52('../internals/to-integer');

                  var min = Math.min;

                  // `ToLength` abstract operation
                  // https://tc39.github.io/ecma262/#sec-tolength
                  _module51.exports = function (argument) {
                    return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "to-integer.js": function module(_require53, _exports39, _module52) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/to-integer.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var ceil = Math.ceil;
                  var floor = Math.floor;

                  // `ToInteger` abstract operation
                  // https://tc39.github.io/ecma262/#sec-tointeger
                  _module52.exports = function (argument) {
                    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "to-absolute-index.js": function module(_require54, _exports40, _module53) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/to-absolute-index.js                   //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var toInteger = _require54('../internals/to-integer');

                  var max = Math.max;
                  var min = Math.min;

                  // Helper for a popular repeating case of the spec:
                  // Let integer be ? ToInteger(index).
                  // If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).
                  _module53.exports = function (index, length) {
                    var integer = toInteger(index);
                    return integer < 0 ? max(integer + length, 0) : min(integer, length);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "enum-bug-keys.js": function module(_require55, _exports41, _module54) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/enum-bug-keys.js                       //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // IE8- don't enum bug keys
                  _module54.exports = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "object-get-own-property-symbols.js": function _module55(_require56, _exports42) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/object-get-own-property-symbols.js     //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _exports42.f = Object.getOwnPropertySymbols;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "is-forced.js": function module(_require57, _exports43, _module56) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/is-forced.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var fails = _require57('../internals/fails');

                  var replacement = /#|\.prototype\./;

                  var isForced = function (feature, detection) {
                    var value = data[normalize(feature)];
                    return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;
                  };

                  var normalize = isForced.normalize = function (string) {
                    return String(string).replace(replacement, '.').toLowerCase();
                  };

                  var data = isForced.data = {};
                  var NATIVE = isForced.NATIVE = 'N';
                  var POLYFILL = isForced.POLYFILL = 'P';

                  _module56.exports = isForced;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "create-property.js": function module(_require58, _exports44, _module57) {
                  var toPrimitive = _require58('../internals/to-primitive');
                  var definePropertyModule = _require58('../internals/object-define-property');
                  var createPropertyDescriptor = _require58('../internals/create-property-descriptor');

                  _module57.exports = function (object, key, value) {
                    var propertyKey = toPrimitive(key);
                    if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));else object[propertyKey] = value;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "same-value.js": function module(_require59, _exports45, _module58) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/same-value.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // `SameValue` abstract operation
                  // https://tc39.github.io/ecma262/#sec-samevalue
                  _module58.exports = Object.is || function is(x, y) {
                    // eslint-disable-next-line no-self-compare
                    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "number-is-finite.js": function module(_require60, _exports46, _module59) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/number-is-finite.js                    //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require60('../internals/global');

                  var globalIsFinite = global.isFinite;

                  // `Number.isFinite` method
                  // https://tc39.github.io/ecma262/#sec-number.isfinite
                  _module59.exports = Number.isFinite || function isFinite(it) {
                    return typeof it == 'number' && globalIsFinite(it);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "flatten-into-array.js": function module(_require61, _exports47, _module60) {
                  var isArray = _require61('../internals/is-array');
                  var toLength = _require61('../internals/to-length');
                  var bind = _require61('../internals/bind-context');

                  // `FlattenIntoArray` abstract operation
                  // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
                  var flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
                    var targetIndex = start;
                    var sourceIndex = 0;
                    var mapFn = mapper ? bind(mapper, thisArg, 3) : false;
                    var element;

                    while (sourceIndex < sourceLen) {
                      if (sourceIndex in source) {
                        element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

                        if (depth > 0 && isArray(element)) {
                          targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
                        } else {
                          if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
                          target[targetIndex] = element;
                        }

                        targetIndex++;
                      }
                      sourceIndex++;
                    }
                    return targetIndex;
                  };

                  _module60.exports = flattenIntoArray;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "is-array.js": function module(_require62, _exports48, _module61) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/is-array.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var classof = _require62('../internals/classof-raw');

                  // `IsArray` abstract operation
                  // https://tc39.github.io/ecma262/#sec-isarray
                  _module61.exports = Array.isArray || function isArray(arg) {
                    return classof(arg) == 'Array';
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "bind-context.js": function module(_require63, _exports49, _module62) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/bind-context.js                        //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var aFunction = _require63('../internals/a-function');

                  // optional / simple context binding
                  _module62.exports = function (fn, that, length) {
                    aFunction(fn);
                    if (that === undefined) return fn;
                    switch (length) {
                      case 0:
                        return function () {
                          return fn.call(that);
                        };
                      case 1:
                        return function (a) {
                          return fn.call(that, a);
                        };
                      case 2:
                        return function (a, b) {
                          return fn.call(that, a, b);
                        };
                      case 3:
                        return function (a, b, c) {
                          return fn.call(that, a, b, c);
                        };
                    }
                    return function () /* ...args */{
                      return fn.apply(that, arguments);
                    };
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "a-function.js": function module(_require64, _exports50, _module63) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/a-function.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module63.exports = function (it) {
                    if (typeof it != 'function') {
                      throw TypeError(String(it) + ' is not a function');
                    }return it;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "to-object.js": function module(_require65, _exports51, _module64) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/to-object.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var requireObjectCoercible = _require65('../internals/require-object-coercible');

                  // `ToObject` abstract operation
                  // https://tc39.github.io/ecma262/#sec-toobject
                  _module64.exports = function (argument) {
                    return Object(requireObjectCoercible(argument));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "array-species-create.js": function module(_require66, _exports52, _module65) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/array-species-create.js                //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var isObject = _require66('../internals/is-object');
                  var isArray = _require66('../internals/is-array');
                  var wellKnownSymbol = _require66('../internals/well-known-symbol');

                  var SPECIES = wellKnownSymbol('species');

                  // `ArraySpeciesCreate` abstract operation
                  // https://tc39.github.io/ecma262/#sec-arrayspeciescreate
                  _module65.exports = function (originalArray, length) {
                    var C;
                    if (isArray(originalArray)) {
                      C = originalArray.constructor;
                      // cross-realm fallback
                      if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;else if (isObject(C)) {
                        C = C[SPECIES];
                        if (C === null) C = undefined;
                      }
                    }return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "well-known-symbol.js": function module(_require67, _exports53, _module66) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/well-known-symbol.js                   //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require67('../internals/global');
                  var shared = _require67('../internals/shared');
                  var uid = _require67('../internals/uid');
                  var NATIVE_SYMBOL = _require67('../internals/native-symbol');

                  var Symbol = global.Symbol;
                  var store = shared('wks');

                  _module66.exports = function (name) {
                    return store[name] || (store[name] = NATIVE_SYMBOL && Symbol[name] || (NATIVE_SYMBOL ? Symbol : uid)('Symbol.' + name));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "native-symbol.js": function module(_require68, _exports54, _module67) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/native-symbol.js                       //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var fails = _require68('../internals/fails');

                  _module67.exports = !!Object.getOwnPropertySymbols && !fails(function () {
                    // Chrome 38 Symbol has incorrect toString conversion
                    // eslint-disable-next-line no-undef
                    return !String(Symbol());
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "iterate.js": function module(_require69, _exports55, _module68) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/iterate.js                             //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var anObject = _require69('../internals/an-object');
                  var isArrayIteratorMethod = _require69('../internals/is-array-iterator-method');
                  var toLength = _require69('../internals/to-length');
                  var bind = _require69('../internals/bind-context');
                  var getIteratorMethod = _require69('../internals/get-iterator-method');
                  var callWithSafeIterationClosing = _require69('../internals/call-with-safe-iteration-closing');

                  var Result = function (stopped, result) {
                    this.stopped = stopped;
                    this.result = result;
                  };

                  var iterate = _module68.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
                    var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
                    var iterator, iterFn, index, length, result, step;

                    if (IS_ITERATOR) {
                      iterator = iterable;
                    } else {
                      iterFn = getIteratorMethod(iterable);
                      if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
                      // optimisation for array iterators
                      if (isArrayIteratorMethod(iterFn)) {
                        for (index = 0, length = toLength(iterable.length); length > index; index++) {
                          result = AS_ENTRIES ? boundFunction(anObject(step = iterable[index])[0], step[1]) : boundFunction(iterable[index]);
                          if (result && result instanceof Result) return result;
                        }return new Result(false);
                      }
                      iterator = iterFn.call(iterable);
                    }

                    while (!(step = iterator.next()).done) {
                      result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
                      if (result && result instanceof Result) return result;
                    }return new Result(false);
                  };

                  iterate.stop = function (result) {
                    return new Result(true, result);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "is-array-iterator-method.js": function module(_require70, _exports56, _module69) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/is-array-iterator-method.js            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var wellKnownSymbol = _require70('../internals/well-known-symbol');
                  var Iterators = _require70('../internals/iterators');

                  var ITERATOR = wellKnownSymbol('iterator');
                  var ArrayPrototype = Array.prototype;

                  // check on default Array iterator
                  _module69.exports = function (it) {
                    return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "iterators.js": function module(_require71, _exports57, _module70) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/iterators.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module70.exports = {};

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "get-iterator-method.js": function module(_require72, _exports58, _module71) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/get-iterator-method.js                 //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var classof = _require72('../internals/classof');
                  var Iterators = _require72('../internals/iterators');
                  var wellKnownSymbol = _require72('../internals/well-known-symbol');

                  var ITERATOR = wellKnownSymbol('iterator');

                  _module71.exports = function (it) {
                    if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "classof.js": function module(_require73, _exports59, _module72) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/classof.js                             //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var classofRaw = _require73('../internals/classof-raw');
                  var wellKnownSymbol = _require73('../internals/well-known-symbol');

                  var TO_STRING_TAG = wellKnownSymbol('toStringTag');
                  // ES3 wrong here
                  var CORRECT_ARGUMENTS = classofRaw(function () {
                    return arguments;
                  }()) == 'Arguments';

                  // fallback for IE11 Script Access Denied error
                  var tryGet = function (it, key) {
                    try {
                      return it[key];
                    } catch (error) {/* empty */}
                  };

                  // getting tag from ES6+ `Object.prototype.toString`
                  _module72.exports = function (it) {
                    var O, tag, result;
                    return it === undefined ? 'Undefined' : it === null ? 'Null'
                    // @@toStringTag case
                    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
                    // builtinTag case
                    : CORRECT_ARGUMENTS ? classofRaw(O)
                    // ES3 arguments fallback
                    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "call-with-safe-iteration-closing.js": function module(_require74, _exports60, _module73) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/call-with-safe-iteration-closing.js    //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var anObject = _require74('../internals/an-object');

                  // call something on iterator step with safe closing on error
                  _module73.exports = function (iterator, fn, value, ENTRIES) {
                    try {
                      return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
                      // 7.4.6 IteratorClose(iterator, completion)
                    } catch (error) {
                      var returnMethod = iterator['return'];
                      if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
                      throw error;
                    }
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "string-pad.js": function module(_require75, _exports61, _module74) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/string-pad.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // https://github.com/tc39/proposal-string-pad-start-end
                  var toLength = _require75('../internals/to-length');
                  var repeat = _require75('../internals/string-repeat');
                  var requireObjectCoercible = _require75('../internals/require-object-coercible');

                  var ceil = Math.ceil;

                  // `String.prototype.{ padStart, padEnd }` methods implementation
                  var createMethod = function (IS_END) {
                    return function ($this, maxLength, fillString) {
                      var S = String(requireObjectCoercible($this));
                      var stringLength = S.length;
                      var fillStr = fillString === undefined ? ' ' : String(fillString);
                      var intMaxLength = toLength(maxLength);
                      var fillLen, stringFiller;
                      if (intMaxLength <= stringLength || fillStr == '') return S;
                      fillLen = intMaxLength - stringLength;
                      stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));
                      if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
                      return IS_END ? S + stringFiller : stringFiller + S;
                    };
                  };

                  _module74.exports = {
                    // `String.prototype.padStart` method
                    // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
                    start: createMethod(false),
                    // `String.prototype.padEnd` method
                    // https://tc39.github.io/ecma262/#sec-string.prototype.padend
                    end: createMethod(true)
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "string-repeat.js": function module(_require76, _exports62, _module75) {
                  var toInteger = _require76('../internals/to-integer');
                  var requireObjectCoercible = _require76('../internals/require-object-coercible');

                  // `String.prototype.repeat` method implementation
                  // https://tc39.github.io/ecma262/#sec-string.prototype.repeat
                  _module75.exports = ''.repeat || function repeat(count) {
                    var str = String(requireObjectCoercible(this));
                    var result = '';
                    var n = toInteger(count);
                    if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
                    for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
                    return result;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "webkit-string-pad-bug.js": function module(_require77, _exports63, _module76) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/webkit-string-pad-bug.js               //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // https://github.com/zloirock/core-js/issues/280
                  var userAgent = _require77('../internals/user-agent');

                  // eslint-disable-next-line unicorn/no-unsafe-regex
                  _module76.exports = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "user-agent.js": function module(_require78, _exports64, _module77) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/user-agent.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var getBuiltIn = _require78('../internals/get-built-in');

                  _module77.exports = getBuiltIn('navigator', 'userAgent') || '';

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "string-trim.js": function module(_require79, _exports65, _module78) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/string-trim.js                         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var requireObjectCoercible = _require79('../internals/require-object-coercible');
                  var whitespaces = _require79('../internals/whitespaces');

                  var whitespace = '[' + whitespaces + ']';
                  var ltrim = RegExp('^' + whitespace + whitespace + '*');
                  var rtrim = RegExp(whitespace + whitespace + '*$');

                  // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
                  var createMethod = function (TYPE) {
                    return function ($this) {
                      var string = String(requireObjectCoercible($this));
                      if (TYPE & 1) string = string.replace(ltrim, '');
                      if (TYPE & 2) string = string.replace(rtrim, '');
                      return string;
                    };
                  };

                  _module78.exports = {
                    // `String.prototype.{ trimLeft, trimStart }` methods
                    // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
                    start: createMethod(1),
                    // `String.prototype.{ trimRight, trimEnd }` methods
                    // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
                    end: createMethod(2),
                    // `String.prototype.trim` method
                    // https://tc39.github.io/ecma262/#sec-string.prototype.trim
                    trim: createMethod(3)
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "whitespaces.js": function module(_require80, _exports66, _module79) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/whitespaces.js                         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // a string of all valid unicode whitespaces
                  // eslint-disable-next-line max-len
                  _module79.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "forced-string-trim-method.js": function module(_require81, _exports67, _module80) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/forced-string-trim-method.js           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var fails = _require81('../internals/fails');
                  var whitespaces = _require81('../internals/whitespaces');

                  var non = '\u200B\u0085\u180E';

                  // check that a method works with the correct list
                  // of whitespaces and has a correct name
                  _module80.exports = function (METHOD_NAME) {
                    return fails(function () {
                      return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
                    });
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "define-well-known-symbol.js": function module(_require82, _exports68, _module81) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/define-well-known-symbol.js            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var path = _require82('../internals/path');
                  var has = _require82('../internals/has');
                  var wrappedWellKnownSymbolModule = _require82('../internals/wrapped-well-known-symbol');
                  var defineProperty = _require82('../internals/object-define-property').f;

                  _module81.exports = function (NAME) {
                    var Symbol = path.Symbol || (path.Symbol = {});
                    if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
                      value: wrappedWellKnownSymbolModule.f(NAME)
                    });
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "wrapped-well-known-symbol.js": function _module82(_require83, _exports69) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/internals/wrapped-well-known-symbol.js           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _exports69.f = _require83('../internals/well-known-symbol');

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                } } } } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports = _require2("/node_modules/meteor/ecmascript-runtime-client/modern.js");

  /* Exports */
  Package._define("ecmascript-runtime-client", _exports);
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Base64;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "base64": { "base64.js": function module(_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                        //
            // packages/base64/base64.js                                                              //
            //                                                                                        //
            ////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Base64: () => Base64
            });
            // Base 64 encoding
            const BASE_64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            const BASE_64_VALS = Object.create(null);

            const getChar = val => BASE_64_CHARS.charAt(val);

            const getVal = ch => ch === '=' ? -1 : BASE_64_VALS[ch];

            for (let i = 0; i < BASE_64_CHARS.length; i++) {
              BASE_64_VALS[getChar(i)] = i;
            }

            ;

            const encode = array => {
              if (typeof array === "string") {
                const str = array;
                array = newBinary(str.length);

                for (let i = 0; i < str.length; i++) {
                  const ch = str.charCodeAt(i);

                  if (ch > 0xFF) {
                    throw new Error("Not ascii. Base64.encode can only take ascii strings.");
                  }

                  array[i] = ch;
                }
              }

              const answer = [];
              let a = null;
              let b = null;
              let c = null;
              let d = null;

              for (let i = 0; i < array.length; i++) {
                switch (i % 3) {
                  case 0:
                    a = array[i] >> 2 & 0x3F;
                    b = (array[i] & 0x03) << 4;
                    break;

                  case 1:
                    b = b | array[i] >> 4 & 0xF;
                    c = (array[i] & 0xF) << 2;
                    break;

                  case 2:
                    c = c | array[i] >> 6 & 0x03;
                    d = array[i] & 0x3F;
                    answer.push(getChar(a));
                    answer.push(getChar(b));
                    answer.push(getChar(c));
                    answer.push(getChar(d));
                    a = null;
                    b = null;
                    c = null;
                    d = null;
                    break;
                }
              }

              if (a != null) {
                answer.push(getChar(a));
                answer.push(getChar(b));

                if (c == null) {
                  answer.push('=');
                } else {
                  answer.push(getChar(c));
                }

                if (d == null) {
                  answer.push('=');
                }
              }

              return answer.join("");
            }; // XXX This is a weird place for this to live, but it's used both by
            // this package and 'ejson', and we can't put it in 'ejson' without
            // introducing a circular dependency. It should probably be in its own
            // package or as a helper in a package that both 'base64' and 'ejson'
            // use.


            const newBinary = len => {
              if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {
                const ret = [];

                for (let i = 0; i < len; i++) {
                  ret.push(0);
                }

                ret.$Uint8ArrayPolyfill = true;
                return ret;
              }

              return new Uint8Array(new ArrayBuffer(len));
            };

            const decode = str => {
              let len = Math.floor(str.length * 3 / 4);

              if (str.charAt(str.length - 1) == '=') {
                len--;

                if (str.charAt(str.length - 2) == '=') {
                  len--;
                }
              }

              const arr = newBinary(len);
              let one = null;
              let two = null;
              let three = null;
              let j = 0;

              for (let i = 0; i < str.length; i++) {
                const c = str.charAt(i);
                const v = getVal(c);

                switch (i % 4) {
                  case 0:
                    if (v < 0) {
                      throw new Error('invalid base64 string');
                    }

                    one = v << 2;
                    break;

                  case 1:
                    if (v < 0) {
                      throw new Error('invalid base64 string');
                    }

                    one = one | v >> 4;
                    arr[j++] = one;
                    two = (v & 0x0F) << 4;
                    break;

                  case 2:
                    if (v >= 0) {
                      two = two | v >> 2;
                      arr[j++] = two;
                      three = (v & 0x03) << 6;
                    }

                    break;

                  case 3:
                    if (v >= 0) {
                      arr[j++] = three | v;
                    }

                    break;
                }
              }

              return arr;
            };

            const Base64 = {
              encode,
              decode,
              newBinary
            };
            ////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/base64/base64.js");

  /* Exports */
  Package._define("base64", _exports2, {
    Base64: Base64
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Base64 = Package.base64.Base64;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var EJSON;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ejson": { "ejson.js": function module(_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                             //
            // packages/ejson/ejson.js                                                                                     //
            //                                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              EJSON: () => EJSON
            });
            let isFunction, isObject, keysOf, lengthOf, hasOwn, convertMapToObject, isArguments, isInfOrNaN, handleError;
            _module.link("./utils", {
              isFunction(v) {
                isFunction = v;
              },

              isObject(v) {
                isObject = v;
              },

              keysOf(v) {
                keysOf = v;
              },

              lengthOf(v) {
                lengthOf = v;
              },

              hasOwn(v) {
                hasOwn = v;
              },

              convertMapToObject(v) {
                convertMapToObject = v;
              },

              isArguments(v) {
                isArguments = v;
              },

              isInfOrNaN(v) {
                isInfOrNaN = v;
              },

              handleError(v) {
                handleError = v;
              }

            }, 0);

            /**
             * @namespace
             * @summary Namespace for EJSON functions
             */
            const EJSON = {}; // Custom type interface definition

            /**
             * @class CustomType
             * @instanceName customType
             * @memberOf EJSON
             * @summary The interface that a class must satisfy to be able to become an
             * EJSON custom type via EJSON.addType.
             */

            /**
             * @function typeName
             * @memberOf EJSON.CustomType
             * @summary Return the tag used to identify this type.  This must match the
             *          tag used to register this type with
             *          [`EJSON.addType`](#ejson_add_type).
             * @locus Anywhere
             * @instance
             */

            /**
             * @function toJSONValue
             * @memberOf EJSON.CustomType
             * @summary Serialize this instance into a JSON-compatible value.
             * @locus Anywhere
             * @instance
             */

            /**
             * @function clone
             * @memberOf EJSON.CustomType
             * @summary Return a value `r` such that `this.equals(r)` is true, and
             *          modifications to `r` do not affect `this` and vice versa.
             * @locus Anywhere
             * @instance
             */

            /**
             * @function equals
             * @memberOf EJSON.CustomType
             * @summary Return `true` if `other` has a value equal to `this`; `false`
             *          otherwise.
             * @locus Anywhere
             * @param {Object} other Another object to compare this to.
             * @instance
             */

            const customTypes = new Map(); // Add a custom type, using a method of your choice to get to and
            // from a basic JSON-able representation.  The factory argument
            // is a function of JSON-able --> your object
            // The type you add must have:
            // - A toJSONValue() method, so that Meteor can serialize it
            // - a typeName() method, to show how to look it up in our type table.
            // It is okay if these methods are monkey-patched on.
            // EJSON.clone will use toJSONValue and the given factory to produce
            // a clone, but you may specify a method clone() that will be
            // used instead.
            // Similarly, EJSON.equals will use toJSONValue to make comparisons,
            // but you may provide a method equals() instead.

            /**
             * @summary Add a custom datatype to EJSON.
             * @locus Anywhere
             * @param {String} name A tag for your custom type; must be unique among
             *                      custom data types defined in your project, and must
             *                      match the result of your type's `typeName` method.
             * @param {Function} factory A function that deserializes a JSON-compatible
             *                           value into an instance of your type.  This should
             *                           match the serialization performed by your
             *                           type's `toJSONValue` method.
             */

            EJSON.addType = (name, factory) => {
              if (customTypes.has(name)) {
                throw new Error("Type ".concat(name, " already present"));
              }

              customTypes.set(name, factory);
            };

            const builtinConverters = [{
              // Date
              matchJSONValue(obj) {
                return hasOwn(obj, '$date') && lengthOf(obj) === 1;
              },

              matchObject(obj) {
                return obj instanceof Date;
              },

              toJSONValue(obj) {
                return {
                  $date: obj.getTime()
                };
              },

              fromJSONValue(obj) {
                return new Date(obj.$date);
              }

            }, {
              // RegExp
              matchJSONValue(obj) {
                return hasOwn(obj, '$regexp') && hasOwn(obj, '$flags') && lengthOf(obj) === 2;
              },

              matchObject(obj) {
                return obj instanceof RegExp;
              },

              toJSONValue(regexp) {
                return {
                  $regexp: regexp.source,
                  $flags: regexp.flags
                };
              },

              fromJSONValue(obj) {
                // Replaces duplicate / invalid flags.
                return new RegExp(obj.$regexp, obj.$flags // Cut off flags at 50 chars to avoid abusing RegExp for DOS.
                .slice(0, 50).replace(/[^gimuy]/g, '').replace(/(.)(?=.*\1)/g, ''));
              }

            }, {
              // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'
              // which we match.)
              matchJSONValue(obj) {
                return hasOwn(obj, '$InfNaN') && lengthOf(obj) === 1;
              },

              matchObject: isInfOrNaN,

              toJSONValue(obj) {
                let sign;

                if (Number.isNaN(obj)) {
                  sign = 0;
                } else if (obj === Infinity) {
                  sign = 1;
                } else {
                  sign = -1;
                }

                return {
                  $InfNaN: sign
                };
              },

              fromJSONValue(obj) {
                return obj.$InfNaN / 0;
              }

            }, {
              // Binary
              matchJSONValue(obj) {
                return hasOwn(obj, '$binary') && lengthOf(obj) === 1;
              },

              matchObject(obj) {
                return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && hasOwn(obj, '$Uint8ArrayPolyfill');
              },

              toJSONValue(obj) {
                return {
                  $binary: Base64.encode(obj)
                };
              },

              fromJSONValue(obj) {
                return Base64.decode(obj.$binary);
              }

            }, {
              // Escaping one level
              matchJSONValue(obj) {
                return hasOwn(obj, '$escape') && lengthOf(obj) === 1;
              },

              matchObject(obj) {
                let match = false;

                if (obj) {
                  const keyCount = lengthOf(obj);

                  if (keyCount === 1 || keyCount === 2) {
                    match = builtinConverters.some(converter => converter.matchJSONValue(obj));
                  }
                }

                return match;
              },

              toJSONValue(obj) {
                const newObj = {};
                keysOf(obj).forEach(key => {
                  newObj[key] = EJSON.toJSONValue(obj[key]);
                });
                return {
                  $escape: newObj
                };
              },

              fromJSONValue(obj) {
                const newObj = {};
                keysOf(obj.$escape).forEach(key => {
                  newObj[key] = EJSON.fromJSONValue(obj.$escape[key]);
                });
                return newObj;
              }

            }, {
              // Custom
              matchJSONValue(obj) {
                return hasOwn(obj, '$type') && hasOwn(obj, '$value') && lengthOf(obj) === 2;
              },

              matchObject(obj) {
                return EJSON._isCustomType(obj);
              },

              toJSONValue(obj) {
                const jsonValue = Meteor._noYieldsAllowed(() => obj.toJSONValue());

                return {
                  $type: obj.typeName(),
                  $value: jsonValue
                };
              },

              fromJSONValue(obj) {
                const typeName = obj.$type;

                if (!customTypes.has(typeName)) {
                  throw new Error("Custom EJSON type ".concat(typeName, " is not defined"));
                }

                const converter = customTypes.get(typeName);
                return Meteor._noYieldsAllowed(() => converter(obj.$value));
              }

            }];

            EJSON._isCustomType = obj => obj && isFunction(obj.toJSONValue) && isFunction(obj.typeName) && customTypes.has(obj.typeName());

            EJSON._getTypes = function () {
              let isOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              return isOriginal ? customTypes : convertMapToObject(customTypes);
            };

            EJSON._getConverters = () => builtinConverters; // Either return the JSON-compatible version of the argument, or undefined (if
            // the item isn't itself replaceable, but maybe some fields in it are)


            const toJSONValueHelper = item => {
              for (let i = 0; i < builtinConverters.length; i++) {
                const converter = builtinConverters[i];

                if (converter.matchObject(item)) {
                  return converter.toJSONValue(item);
                }
              }

              return undefined;
            }; // for both arrays and objects, in-place modification.


            const adjustTypesToJSONValue = obj => {
              // Is it an atom that we need to adjust?
              if (obj === null) {
                return null;
              }

              const maybeChanged = toJSONValueHelper(obj);

              if (maybeChanged !== undefined) {
                return maybeChanged;
              } // Other atoms are unchanged.


              if (!isObject(obj)) {
                return obj;
              } // Iterate over array or object structure.


              keysOf(obj).forEach(key => {
                const value = obj[key];

                if (!isObject(value) && value !== undefined && !isInfOrNaN(value)) {
                  return; // continue
                }

                const changed = toJSONValueHelper(value);

                if (changed) {
                  obj[key] = changed;
                  return; // on to the next key
                } // if we get here, value is an object but not adjustable
                // at this level.  recurse.


                adjustTypesToJSONValue(value);
              });
              return obj;
            };

            EJSON._adjustTypesToJSONValue = adjustTypesToJSONValue;
            /**
             * @summary Serialize an EJSON-compatible value into its plain JSON
             *          representation.
             * @locus Anywhere
             * @param {EJSON} val A value to serialize to plain JSON.
             */

            EJSON.toJSONValue = item => {
              const changed = toJSONValueHelper(item);

              if (changed !== undefined) {
                return changed;
              }

              let newItem = item;

              if (isObject(item)) {
                newItem = EJSON.clone(item);
                adjustTypesToJSONValue(newItem);
              }

              return newItem;
            }; // Either return the argument changed to have the non-json
            // rep of itself (the Object version) or the argument itself.
            // DOES NOT RECURSE.  For actually getting the fully-changed value, use
            // EJSON.fromJSONValue


            const fromJSONValueHelper = value => {
              if (isObject(value) && value !== null) {
                const keys = keysOf(value);

                if (keys.length <= 2 && keys.every(k => typeof k === 'string' && k.substr(0, 1) === '$')) {
                  for (let i = 0; i < builtinConverters.length; i++) {
                    const converter = builtinConverters[i];

                    if (converter.matchJSONValue(value)) {
                      return converter.fromJSONValue(value);
                    }
                  }
                }
              }

              return value;
            }; // for both arrays and objects. Tries its best to just
            // use the object you hand it, but may return something
            // different if the object you hand it itself needs changing.


            const adjustTypesFromJSONValue = obj => {
              if (obj === null) {
                return null;
              }

              const maybeChanged = fromJSONValueHelper(obj);

              if (maybeChanged !== obj) {
                return maybeChanged;
              } // Other atoms are unchanged.


              if (!isObject(obj)) {
                return obj;
              }

              keysOf(obj).forEach(key => {
                const value = obj[key];

                if (isObject(value)) {
                  const changed = fromJSONValueHelper(value);

                  if (value !== changed) {
                    obj[key] = changed;
                    return;
                  } // if we get here, value is an object but not adjustable
                  // at this level.  recurse.


                  adjustTypesFromJSONValue(value);
                }
              });
              return obj;
            };

            EJSON._adjustTypesFromJSONValue = adjustTypesFromJSONValue;
            /**
             * @summary Deserialize an EJSON value from its plain JSON representation.
             * @locus Anywhere
             * @param {JSONCompatible} val A value to deserialize into EJSON.
             */

            EJSON.fromJSONValue = item => {
              let changed = fromJSONValueHelper(item);

              if (changed === item && isObject(item)) {
                changed = EJSON.clone(item);
                adjustTypesFromJSONValue(changed);
              }

              return changed;
            };
            /**
             * @summary Serialize a value to a string. For EJSON values, the serialization
             *          fully represents the value. For non-EJSON values, serializes the
             *          same way as `JSON.stringify`.
             * @locus Anywhere
             * @param {EJSON} val A value to stringify.
             * @param {Object} [options]
             * @param {Boolean | Integer | String} options.indent Indents objects and
             * arrays for easy readability.  When `true`, indents by 2 spaces; when an
             * integer, indents by that number of spaces; and when a string, uses the
             * string as the indentation pattern.
             * @param {Boolean} options.canonical When `true`, stringifies keys in an
             *                                    object in sorted order.
             */

            EJSON.stringify = handleError((item, options) => {
              let serialized;
              const json = EJSON.toJSONValue(item);

              if (options && (options.canonical || options.indent)) {
                let canonicalStringify;
                _module.link("./stringify", {
                  default(v) {
                    canonicalStringify = v;
                  }

                }, 1);
                serialized = canonicalStringify(json, options);
              } else {
                serialized = JSON.stringify(json);
              }

              return serialized;
            });
            /**
             * @summary Parse a string into an EJSON value. Throws an error if the string
             *          is not valid EJSON.
             * @locus Anywhere
             * @param {String} str A string to parse into an EJSON value.
             */

            EJSON.parse = item => {
              if (typeof item !== 'string') {
                throw new Error('EJSON.parse argument should be a string');
              }

              return EJSON.fromJSONValue(JSON.parse(item));
            };
            /**
             * @summary Returns true if `x` is a buffer of binary data, as returned from
             *          [`EJSON.newBinary`](#ejson_new_binary).
             * @param {Object} x The variable to check.
             * @locus Anywhere
             */

            EJSON.isBinary = obj => {
              return !!(typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && obj.$Uint8ArrayPolyfill);
            };
            /**
             * @summary Return true if `a` and `b` are equal to each other.  Return false
             *          otherwise.  Uses the `equals` method on `a` if present, otherwise
             *          performs a deep comparison.
             * @locus Anywhere
             * @param {EJSON} a
             * @param {EJSON} b
             * @param {Object} [options]
             * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order,
             * if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}`
             * is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The
             * default is `false`.
             */

            EJSON.equals = (a, b, options) => {
              let i;
              const keyOrderSensitive = !!(options && options.keyOrderSensitive);

              if (a === b) {
                return true;
              } // This differs from the IEEE spec for NaN equality, b/c we don't want
              // anything ever with a NaN to be poisoned from becoming equal to anything.


              if (Number.isNaN(a) && Number.isNaN(b)) {
                return true;
              } // if either one is falsy, they'd have to be === to be equal


              if (!a || !b) {
                return false;
              }

              if (!(isObject(a) && isObject(b))) {
                return false;
              }

              if (a instanceof Date && b instanceof Date) {
                return a.valueOf() === b.valueOf();
              }

              if (EJSON.isBinary(a) && EJSON.isBinary(b)) {
                if (a.length !== b.length) {
                  return false;
                }

                for (i = 0; i < a.length; i++) {
                  if (a[i] !== b[i]) {
                    return false;
                  }
                }

                return true;
              }

              if (isFunction(a.equals)) {
                return a.equals(b, options);
              }

              if (isFunction(b.equals)) {
                return b.equals(a, options);
              }

              if (a instanceof Array) {
                if (!(b instanceof Array)) {
                  return false;
                }

                if (a.length !== b.length) {
                  return false;
                }

                for (i = 0; i < a.length; i++) {
                  if (!EJSON.equals(a[i], b[i], options)) {
                    return false;
                  }
                }

                return true;
              } // fallback for custom types that don't implement their own equals


              switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {
                case 1:
                  return false;

                case 2:
                  return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));

                default: // Do nothing

              } // fall back to structural equality of objects


              let ret;
              const aKeys = keysOf(a);
              const bKeys = keysOf(b);

              if (keyOrderSensitive) {
                i = 0;
                ret = aKeys.every(key => {
                  if (i >= bKeys.length) {
                    return false;
                  }

                  if (key !== bKeys[i]) {
                    return false;
                  }

                  if (!EJSON.equals(a[key], b[bKeys[i]], options)) {
                    return false;
                  }

                  i++;
                  return true;
                });
              } else {
                i = 0;
                ret = aKeys.every(key => {
                  if (!hasOwn(b, key)) {
                    return false;
                  }

                  if (!EJSON.equals(a[key], b[key], options)) {
                    return false;
                  }

                  i++;
                  return true;
                });
              }

              return ret && i === bKeys.length;
            };
            /**
             * @summary Return a deep copy of `val`.
             * @locus Anywhere
             * @param {EJSON} val A value to copy.
             */

            EJSON.clone = v => {
              let ret;

              if (!isObject(v)) {
                return v;
              }

              if (v === null) {
                return null; // null has typeof "object"
              }

              if (v instanceof Date) {
                return new Date(v.getTime());
              } // RegExps are not really EJSON elements (eg we don't define a serialization
              // for them), but they're immutable anyway, so we can support them in clone.


              if (v instanceof RegExp) {
                return v;
              }

              if (EJSON.isBinary(v)) {
                ret = EJSON.newBinary(v.length);

                for (let i = 0; i < v.length; i++) {
                  ret[i] = v[i];
                }

                return ret;
              }

              if (Array.isArray(v)) {
                return v.map(EJSON.clone);
              }

              if (isArguments(v)) {
                return Array.from(v).map(EJSON.clone);
              } // handle general user-defined typed Objects if they have a clone method


              if (isFunction(v.clone)) {
                return v.clone();
              } // handle other custom types


              if (EJSON._isCustomType(v)) {
                return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);
              } // handle other objects


              ret = {};
              keysOf(v).forEach(key => {
                ret[key] = EJSON.clone(v[key]);
              });
              return ret;
            };
            /**
             * @summary Allocate a new buffer of binary data that EJSON can serialize.
             * @locus Anywhere
             * @param {Number} size The number of bytes of binary data to allocate.
             */
            // EJSON.newBinary is the public documented API for this functionality,
            // but the implementation is in the 'base64' package to avoid
            // introducing a circular dependency. (If the implementation were here,
            // then 'base64' would have to use EJSON.newBinary, and 'ejson' would
            // also have to use 'base64'.)


            EJSON.newBinary = Base64.newBinary;
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "stringify.js": function module(_require3, _exports3, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                             //
            // packages/ejson/stringify.js                                                                                 //
            //                                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Based on json2.js from https://github.com/douglascrockford/JSON-js
            //
            //    json2.js
            //    2012-10-08
            //
            //    Public Domain.
            //
            //    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
            function quote(string) {
              return JSON.stringify(string);
            }

            const str = (key, holder, singleIndent, outerIndent, canonical) => {
              const value = holder[key]; // What happens next depends on the value's type.

              switch (typeof value) {
                case 'string':
                  return quote(value);

                case 'number':
                  // JSON numbers must be finite. Encode non-finite numbers as null.
                  return isFinite(value) ? String(value) : 'null';

                case 'boolean':
                  return String(value);
                // If the type is 'object', we might be dealing with an object or an array or
                // null.

                case 'object':
                  {
                    // Due to a specification blunder in ECMAScript, typeof null is 'object',
                    // so watch out for that case.
                    if (!value) {
                      return 'null';
                    } // Make an array to hold the partial results of stringifying this object
                    // value.


                    const innerIndent = outerIndent + singleIndent;
                    const partial = [];
                    let v; // Is the value an array?

                    if (Array.isArray(value) || {}.hasOwnProperty.call(value, 'callee')) {
                      // The value is an array. Stringify every element. Use null as a
                      // placeholder for non-JSON values.
                      const length = value.length;

                      for (let i = 0; i < length; i += 1) {
                        partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null';
                      } // Join all of the elements together, separated with commas, and wrap
                      // them in brackets.


                      if (partial.length === 0) {
                        v = '[]';
                      } else if (innerIndent) {
                        v = '[\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + ']';
                      } else {
                        v = '[' + partial.join(',') + ']';
                      }

                      return v;
                    } // Iterate through all of the keys in the object.


                    let keys = Object.keys(value);

                    if (canonical) {
                      keys = keys.sort();
                    }

                    keys.forEach(k => {
                      v = str(k, value, singleIndent, innerIndent, canonical);

                      if (v) {
                        partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);
                      }
                    }); // Join all of the member texts together, separated with commas,
                    // and wrap them in braces.

                    if (partial.length === 0) {
                      v = '{}';
                    } else if (innerIndent) {
                      v = '{\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + '}';
                    } else {
                      v = '{' + partial.join(',') + '}';
                    }

                    return v;
                  }

                default: // Do nothing

              }
            }; // If the JSON object does not yet have a stringify method, give it one.


            const canonicalStringify = (value, options) => {
              // Make a fake root object containing our value under the key of ''.
              // Return the result of stringifying the value.
              const allOptions = Object.assign({
                indent: '',
                canonical: false
              }, options);

              if (allOptions.indent === true) {
                allOptions.indent = '  ';
              } else if (typeof allOptions.indent === 'number') {
                let newIndent = '';

                for (let i = 0; i < allOptions.indent; i++) {
                  newIndent += ' ';
                }

                allOptions.indent = newIndent;
              }

              return str('', {
                '': value
              }, allOptions.indent, '', allOptions.canonical);
            };

            _module2.exportDefault(canonicalStringify);
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "utils.js": function module(_require4, _exports4, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                             //
            // packages/ejson/utils.js                                                                                     //
            //                                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module3.export({
              isFunction: () => isFunction,
              isObject: () => isObject,
              keysOf: () => keysOf,
              lengthOf: () => lengthOf,
              hasOwn: () => hasOwn,
              convertMapToObject: () => convertMapToObject,
              isArguments: () => isArguments,
              isInfOrNaN: () => isInfOrNaN,
              checkError: () => checkError,
              handleError: () => handleError
            });

            const isFunction = fn => typeof fn === 'function';

            const isObject = fn => typeof fn === 'object';

            const keysOf = obj => Object.keys(obj);

            const lengthOf = obj => Object.keys(obj).length;

            const hasOwn = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);

            const convertMapToObject = map => Array.from(map).reduce((acc, _ref) => {
              let [key, value] = _ref;
              // reassign to not create new object
              acc[key] = value;
              return acc;
            }, {});

            const isArguments = obj => obj != null && hasOwn(obj, 'callee');

            const isInfOrNaN = obj => Number.isNaN(obj) || obj === Infinity || obj === -Infinity;

            const checkError = {
              maxStack: msgError => new RegExp('Maximum call stack size exceeded', 'g').test(msgError)
            };

            const handleError = fn => function () {
              try {
                return fn.apply(this, arguments);
              } catch (error) {
                const isMaxStack = checkError.maxStack(error.message);

                if (isMaxStack) {
                  throw new Error('Converting circular structure to JSON');
                }

                throw error;
              }
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/ejson/ejson.js");

  /* Exports */
  Package._define("ejson", _exports2, {
    EJSON: EJSON
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var DiffSequence;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "diff-sequence": { "diff.js": function module(_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                 //
            // packages/diff-sequence/diff.js                                                                  //
            //                                                                                                 //
            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              DiffSequence: () => DiffSequence
            });
            const DiffSequence = {};
            const hasOwn = Object.prototype.hasOwnProperty;

            function isObjEmpty(obj) {
              for (let key in Object(obj)) {
                if (hasOwn.call(obj, key)) {
                  return false;
                }
              }

              return true;
            } // ordered: bool.
            // old_results and new_results: collections of documents.
            //    if ordered, they are arrays.
            //    if unordered, they are IdMaps


            DiffSequence.diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {
              if (ordered) DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);else DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);
            };

            DiffSequence.diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {
              options = options || {};
              var projectionFn = options.projectionFn || EJSON.clone;

              if (observer.movedBefore) {
                throw new Error("_diffQueryUnordered called with a movedBefore observer!");
              }

              newResults.forEach(function (newDoc, id) {
                var oldDoc = oldResults.get(id);

                if (oldDoc) {
                  if (observer.changed && !EJSON.equals(oldDoc, newDoc)) {
                    var projectedNew = projectionFn(newDoc);
                    var projectedOld = projectionFn(oldDoc);
                    var changedFields = DiffSequence.makeChangedFields(projectedNew, projectedOld);

                    if (!isObjEmpty(changedFields)) {
                      observer.changed(id, changedFields);
                    }
                  }
                } else if (observer.added) {
                  var fields = projectionFn(newDoc);
                  delete fields._id;
                  observer.added(newDoc._id, fields);
                }
              });

              if (observer.removed) {
                oldResults.forEach(function (oldDoc, id) {
                  if (!newResults.has(id)) observer.removed(id);
                });
              }
            };

            DiffSequence.diffQueryOrderedChanges = function (old_results, new_results, observer, options) {
              options = options || {};
              var projectionFn = options.projectionFn || EJSON.clone;
              var new_presence_of_id = {};
              new_results.forEach(function (doc) {
                if (new_presence_of_id[doc._id]) Meteor._debug("Duplicate _id in new_results");
                new_presence_of_id[doc._id] = true;
              });
              var old_index_of_id = {};
              old_results.forEach(function (doc, i) {
                if (doc._id in old_index_of_id) Meteor._debug("Duplicate _id in old_results");
                old_index_of_id[doc._id] = i;
              }); // ALGORITHM:
              //
              // To determine which docs should be considered "moved" (and which
              // merely change position because of other docs moving) we run
              // a "longest common subsequence" (LCS) algorithm.  The LCS of the
              // old doc IDs and the new doc IDs gives the docs that should NOT be
              // considered moved.
              // To actually call the appropriate callbacks to get from the old state to the
              // new state:
              // First, we call removed() on all the items that only appear in the old
              // state.
              // Then, once we have the items that should not move, we walk through the new
              // results array group-by-group, where a "group" is a set of items that have
              // moved, anchored on the end by an item that should not move.  One by one, we
              // move each of those elements into place "before" the anchoring end-of-group
              // item, and fire changed events on them if necessary.  Then we fire a changed
              // event on the anchor, and move on to the next group.  There is always at
              // least one group; the last group is anchored by a virtual "null" id at the
              // end.
              // Asymptotically: O(N k) where k is number of ops, or potentially
              // O(N log N) if inner loop of LCS were made to be binary search.
              //////// LCS (longest common sequence, with respect to _id)
              // (see Wikipedia article on Longest Increasing Subsequence,
              // where the LIS is taken of the sequence of old indices of the
              // docs in new_results)
              //
              // unmoved: the output of the algorithm; members of the LCS,
              // in the form of indices into new_results

              var unmoved = []; // max_seq_len: length of LCS found so far

              var max_seq_len = 0; // seq_ends[i]: the index into new_results of the last doc in a
              // common subsequence of length of i+1 <= max_seq_len

              var N = new_results.length;
              var seq_ends = new Array(N); // ptrs:  the common subsequence ending with new_results[n] extends
              // a common subsequence ending with new_results[ptr[n]], unless
              // ptr[n] is -1.

              var ptrs = new Array(N); // virtual sequence of old indices of new results

              var old_idx_seq = function (i_new) {
                return old_index_of_id[new_results[i_new]._id];
              }; // for each item in new_results, use it to extend a common subsequence
              // of length j <= max_seq_len


              for (var i = 0; i < N; i++) {
                if (old_index_of_id[new_results[i]._id] !== undefined) {
                  var j = max_seq_len; // this inner loop would traditionally be a binary search,
                  // but scanning backwards we will likely find a subseq to extend
                  // pretty soon, bounded for example by the total number of ops.
                  // If this were to be changed to a binary search, we'd still want
                  // to scan backwards a bit as an optimization.

                  while (j > 0) {
                    if (old_idx_seq(seq_ends[j - 1]) < old_idx_seq(i)) break;
                    j--;
                  }

                  ptrs[i] = j === 0 ? -1 : seq_ends[j - 1];
                  seq_ends[j] = i;
                  if (j + 1 > max_seq_len) max_seq_len = j + 1;
                }
              } // pull out the LCS/LIS into unmoved


              var idx = max_seq_len === 0 ? -1 : seq_ends[max_seq_len - 1];

              while (idx >= 0) {
                unmoved.push(idx);
                idx = ptrs[idx];
              } // the unmoved item list is built backwards, so fix that


              unmoved.reverse(); // the last group is always anchored by the end of the result list, which is
              // an id of "null"

              unmoved.push(new_results.length);
              old_results.forEach(function (doc) {
                if (!new_presence_of_id[doc._id]) observer.removed && observer.removed(doc._id);
              }); // for each group of things in the new_results that is anchored by an unmoved
              // element, iterate through the things before it.

              var startOfGroup = 0;
              unmoved.forEach(function (endOfGroup) {
                var groupId = new_results[endOfGroup] ? new_results[endOfGroup]._id : null;
                var oldDoc, newDoc, fields, projectedNew, projectedOld;

                for (var i = startOfGroup; i < endOfGroup; i++) {
                  newDoc = new_results[i];

                  if (!hasOwn.call(old_index_of_id, newDoc._id)) {
                    fields = projectionFn(newDoc);
                    delete fields._id;
                    observer.addedBefore && observer.addedBefore(newDoc._id, fields, groupId);
                    observer.added && observer.added(newDoc._id, fields);
                  } else {
                    // moved
                    oldDoc = old_results[old_index_of_id[newDoc._id]];
                    projectedNew = projectionFn(newDoc);
                    projectedOld = projectionFn(oldDoc);
                    fields = DiffSequence.makeChangedFields(projectedNew, projectedOld);

                    if (!isObjEmpty(fields)) {
                      observer.changed && observer.changed(newDoc._id, fields);
                    }

                    observer.movedBefore && observer.movedBefore(newDoc._id, groupId);
                  }
                }

                if (groupId) {
                  newDoc = new_results[endOfGroup];
                  oldDoc = old_results[old_index_of_id[newDoc._id]];
                  projectedNew = projectionFn(newDoc);
                  projectedOld = projectionFn(oldDoc);
                  fields = DiffSequence.makeChangedFields(projectedNew, projectedOld);

                  if (!isObjEmpty(fields)) {
                    observer.changed && observer.changed(newDoc._id, fields);
                  }
                }

                startOfGroup = endOfGroup + 1;
              });
            }; // General helper for diff-ing two objects.
            // callbacks is an object like so:
            // { leftOnly: function (key, leftValue) {...},
            //   rightOnly: function (key, rightValue) {...},
            //   both: function (key, leftValue, rightValue) {...},
            // }


            DiffSequence.diffObjects = function (left, right, callbacks) {
              Object.keys(left).forEach(key => {
                const leftValue = left[key];

                if (hasOwn.call(right, key)) {
                  callbacks.both && callbacks.both(key, leftValue, right[key]);
                } else {
                  callbacks.leftOnly && callbacks.leftOnly(key, leftValue);
                }
              });

              if (callbacks.rightOnly) {
                Object.keys(right).forEach(key => {
                  const rightValue = right[key];

                  if (!hasOwn.call(left, key)) {
                    callbacks.rightOnly(key, rightValue);
                  }
                });
              }
            };

            DiffSequence.diffMaps = function (left, right, callbacks) {
              left.forEach(function (leftValue, key) {
                if (right.has(key)) {
                  callbacks.both && callbacks.both(key, leftValue, right.get(key));
                } else {
                  callbacks.leftOnly && callbacks.leftOnly(key, leftValue);
                }
              });

              if (callbacks.rightOnly) {
                right.forEach(function (rightValue, key) {
                  if (!left.has(key)) {
                    callbacks.rightOnly(key, rightValue);
                  }
                });
              }
            };

            DiffSequence.makeChangedFields = function (newDoc, oldDoc) {
              var fields = {};
              DiffSequence.diffObjects(oldDoc, newDoc, {
                leftOnly: function (key, value) {
                  fields[key] = undefined;
                },
                rightOnly: function (key, value) {
                  fields[key] = value;
                },
                both: function (key, leftValue, rightValue) {
                  if (!EJSON.equals(leftValue, rightValue)) fields[key] = rightValue;
                }
              });
              return fields;
            };

            DiffSequence.applyChanges = function (doc, changeFields) {
              Object.keys(changeFields).forEach(key => {
                const value = changeFields[key];

                if (typeof value === "undefined") {
                  delete doc[key];
                } else {
                  doc[key] = value;
                }
              });
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/diff-sequence/diff.js");

  /* Exports */
  Package._define("diff-sequence", _exports2, {
    DiffSequence: DiffSequence
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var GeoJSON;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "geojson-utils": { "main.js": function _module(_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/geojson-utils/main.js                                                                          //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _exports.GeoJSON = _require("./geojson-utils.js");

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "geojson-utils.js": function module(_require2, _exports2, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/geojson-utils/geojson-utils.js                                                                 //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            (function () {
              var gju = {};

              // Export the geojson object for **CommonJS**
              if (typeof _module2 !== 'undefined' && _module2.exports) {
                _module2.exports = gju;
              }

              // adapted from http://www.kevlindev.com/gui/math/intersection/Intersection.js
              gju.lineStringsIntersect = function (l1, l2) {
                var intersects = [];
                for (var i = 0; i <= l1.coordinates.length - 2; ++i) {
                  for (var j = 0; j <= l2.coordinates.length - 2; ++j) {
                    var a1 = {
                      x: l1.coordinates[i][1],
                      y: l1.coordinates[i][0]
                    },
                        a2 = {
                      x: l1.coordinates[i + 1][1],
                      y: l1.coordinates[i + 1][0]
                    },
                        b1 = {
                      x: l2.coordinates[j][1],
                      y: l2.coordinates[j][0]
                    },
                        b2 = {
                      x: l2.coordinates[j + 1][1],
                      y: l2.coordinates[j + 1][0]
                    },
                        ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),
                        ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),
                        u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
                    if (u_b != 0) {
                      var ua = ua_t / u_b,
                          ub = ub_t / u_b;
                      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
                        intersects.push({
                          'type': 'Point',
                          'coordinates': [a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)]
                        });
                      }
                    }
                  }
                }
                if (intersects.length == 0) intersects = false;
                return intersects;
              };

              // Bounding Box

              function boundingBoxAroundPolyCoords(coords) {
                var xAll = [],
                    yAll = [];

                for (var i = 0; i < coords[0].length; i++) {
                  xAll.push(coords[0][i][1]);
                  yAll.push(coords[0][i][0]);
                }

                xAll = xAll.sort(function (a, b) {
                  return a - b;
                });
                yAll = yAll.sort(function (a, b) {
                  return a - b;
                });

                return [[xAll[0], yAll[0]], [xAll[xAll.length - 1], yAll[yAll.length - 1]]];
              }

              gju.pointInBoundingBox = function (point, bounds) {
                return !(point.coordinates[1] < bounds[0][0] || point.coordinates[1] > bounds[1][0] || point.coordinates[0] < bounds[0][1] || point.coordinates[0] > bounds[1][1]);
              };

              // Point in Polygon
              // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#Listing the Vertices

              function pnpoly(x, y, coords) {
                var vert = [[0, 0]];

                for (var i = 0; i < coords.length; i++) {
                  for (var j = 0; j < coords[i].length; j++) {
                    vert.push(coords[i][j]);
                  }
                  vert.push([0, 0]);
                }

                var inside = false;
                for (var i = 0, j = vert.length - 1; i < vert.length; j = i++) {
                  if (vert[i][0] > y != vert[j][0] > y && x < (vert[j][1] - vert[i][1]) * (y - vert[i][0]) / (vert[j][0] - vert[i][0]) + vert[i][1]) inside = !inside;
                }

                return inside;
              }

              gju.pointInPolygon = function (p, poly) {
                var coords = poly.type == "Polygon" ? [poly.coordinates] : poly.coordinates;

                var insideBox = false;
                for (var i = 0; i < coords.length; i++) {
                  if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[i]))) insideBox = true;
                }
                if (!insideBox) return false;

                var insidePoly = false;
                for (var i = 0; i < coords.length; i++) {
                  if (pnpoly(p.coordinates[1], p.coordinates[0], coords[i])) insidePoly = true;
                }

                return insidePoly;
              };

              gju.numberToRadius = function (number) {
                return number * Math.PI / 180;
              };

              gju.numberToDegree = function (number) {
                return number * 180 / Math.PI;
              };

              // written with help from @tautologe
              gju.drawCircle = function (radiusInMeters, centerPoint, steps) {
                var center = [centerPoint.coordinates[1], centerPoint.coordinates[0]],
                    dist = radiusInMeters / 1000 / 6371,

                // convert meters to radiant
                radCenter = [gju.numberToRadius(center[0]), gju.numberToRadius(center[1])],
                    steps = steps || 15,

                // 15 sided circle
                poly = [[center[0], center[1]]];
                for (var i = 0; i < steps; i++) {
                  var brng = 2 * Math.PI * i / steps;
                  var lat = Math.asin(Math.sin(radCenter[0]) * Math.cos(dist) + Math.cos(radCenter[0]) * Math.sin(dist) * Math.cos(brng));
                  var lng = radCenter[1] + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(radCenter[0]), Math.cos(dist) - Math.sin(radCenter[0]) * Math.sin(lat));
                  poly[i] = [];
                  poly[i][1] = gju.numberToDegree(lat);
                  poly[i][0] = gju.numberToDegree(lng);
                }
                return {
                  "type": "Polygon",
                  "coordinates": [poly]
                };
              };

              // assumes rectangle starts at lower left point
              gju.rectangleCentroid = function (rectangle) {
                var bbox = rectangle.coordinates[0];
                var xmin = bbox[0][0],
                    ymin = bbox[0][1],
                    xmax = bbox[2][0],
                    ymax = bbox[2][1];
                var xwidth = xmax - xmin;
                var ywidth = ymax - ymin;
                return {
                  'type': 'Point',
                  'coordinates': [xmin + xwidth / 2, ymin + ywidth / 2]
                };
              };

              // from http://www.movable-type.co.uk/scripts/latlong.html
              gju.pointDistance = function (pt1, pt2) {
                var lon1 = pt1.coordinates[0],
                    lat1 = pt1.coordinates[1],
                    lon2 = pt2.coordinates[0],
                    lat2 = pt2.coordinates[1],
                    dLat = gju.numberToRadius(lat2 - lat1),
                    dLon = gju.numberToRadius(lon2 - lon1),
                    a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(gju.numberToRadius(lat1)) * Math.cos(gju.numberToRadius(lat2)) * Math.pow(Math.sin(dLon / 2), 2),
                    c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                // Earth radius is 6371 km
                return 6371 * c * 1000; // returns meters
              },

              // checks if geometry lies entirely within a circle
              // works with Point, LineString, Polygon
              gju.geometryWithinRadius = function (geometry, center, radius) {
                if (geometry.type == 'Point') {
                  return gju.pointDistance(geometry, center) <= radius;
                } else if (geometry.type == 'LineString' || geometry.type == 'Polygon') {
                  var point = {};
                  var coordinates;
                  if (geometry.type == 'Polygon') {
                    // it's enough to check the exterior ring of the Polygon
                    coordinates = geometry.coordinates[0];
                  } else {
                    coordinates = geometry.coordinates;
                  }
                  for (var i in coordinates) {
                    point.coordinates = coordinates[i];
                    if (gju.pointDistance(point, center) > radius) {
                      return false;
                    }
                  }
                }
                return true;
              };

              // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt
              gju.area = function (polygon) {
                var area = 0;
                // TODO: polygon holes at coordinates[1]
                var points = polygon.coordinates[0];
                var j = points.length - 1;
                var p1, p2;

                for (var i = 0; i < points.length; j = i++) {
                  var p1 = {
                    x: points[i][1],
                    y: points[i][0]
                  };
                  var p2 = {
                    x: points[j][1],
                    y: points[j][0]
                  };
                  area += p1.x * p2.y;
                  area -= p1.y * p2.x;
                }

                area /= 2;
                return area;
              },

              // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt
              gju.centroid = function (polygon) {
                var f,
                    x = 0,
                    y = 0;
                // TODO: polygon holes at coordinates[1]
                var points = polygon.coordinates[0];
                var j = points.length - 1;
                var p1, p2;

                for (var i = 0; i < points.length; j = i++) {
                  var p1 = {
                    x: points[i][1],
                    y: points[i][0]
                  };
                  var p2 = {
                    x: points[j][1],
                    y: points[j][0]
                  };
                  f = p1.x * p2.y - p2.x * p1.y;
                  x += (p1.x + p2.x) * f;
                  y += (p1.y + p2.y) * f;
                }

                f = gju.area(polygon) * 6;
                return {
                  'type': 'Point',
                  'coordinates': [y / f, x / f]
                };
              }, gju.simplify = function (source, kink) {
                /* source[] array of geojson points */
                /* kink	in metres, kinks above this depth kept  */
                /* kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments */
                kink = kink || 20;
                source = source.map(function (o) {
                  return {
                    lng: o.coordinates[0],
                    lat: o.coordinates[1]
                  };
                });

                var n_source, n_stack, n_dest, start, end, i, sig;
                var dev_sqr, max_dev_sqr, band_sqr;
                var x12, y12, d12, x13, y13, d13, x23, y23, d23;
                var F = Math.PI / 180.0 * 0.5;
                var index = new Array(); /* aray of indexes of source points to include in the reduced line */
                var sig_start = new Array(); /* indices of start & end of working section */
                var sig_end = new Array();

                /* check for simple cases */

                if (source.length < 3) return source; /* one or two points */

                /* more complex case. initialize stack */

                n_source = source.length;
                band_sqr = kink * 360.0 / (2.0 * Math.PI * 6378137.0); /* Now in degrees */
                band_sqr *= band_sqr;
                n_dest = 0;
                sig_start[0] = 0;
                sig_end[0] = n_source - 1;
                n_stack = 1;

                /* while the stack is not empty  ... */
                while (n_stack > 0) {

                  /* ... pop the top-most entries off the stacks */

                  start = sig_start[n_stack - 1];
                  end = sig_end[n_stack - 1];
                  n_stack--;

                  if (end - start > 1) {
                    /* any intermediate points ? */

                    /* ... yes, so find most deviant intermediate point to
                    either side of line joining start & end points */

                    x12 = source[end].lng() - source[start].lng();
                    y12 = source[end].lat() - source[start].lat();
                    if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12);
                    x12 *= Math.cos(F * (source[end].lat() + source[start].lat())); /* use avg lat to reduce lng */
                    d12 = x12 * x12 + y12 * y12;

                    for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {

                      x13 = source[i].lng() - source[start].lng();
                      y13 = source[i].lat() - source[start].lat();
                      if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13);
                      x13 *= Math.cos(F * (source[i].lat() + source[start].lat()));
                      d13 = x13 * x13 + y13 * y13;

                      x23 = source[i].lng() - source[end].lng();
                      y23 = source[i].lat() - source[end].lat();
                      if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23);
                      x23 *= Math.cos(F * (source[i].lat() + source[end].lat()));
                      d23 = x23 * x23 + y23 * y23;

                      if (d13 >= d12 + d23) dev_sqr = d23;else if (d23 >= d12 + d13) dev_sqr = d13;else dev_sqr = (x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12) / d12; // solve triangle
                      if (dev_sqr > max_dev_sqr) {
                        sig = i;
                        max_dev_sqr = dev_sqr;
                      }
                    }

                    if (max_dev_sqr < band_sqr) {
                      /* is there a sig. intermediate point ? */
                      /* ... no, so transfer current start point */
                      index[n_dest] = start;
                      n_dest++;
                    } else {
                      /* ... yes, so push two sub-sections on stack for further processing */
                      n_stack++;
                      sig_start[n_stack - 1] = sig;
                      sig_end[n_stack - 1] = end;
                      n_stack++;
                      sig_start[n_stack - 1] = start;
                      sig_end[n_stack - 1] = sig;
                    }
                  } else {
                    /* ... no intermediate points, so transfer current start point */
                    index[n_dest] = start;
                    n_dest++;
                  }
                }

                /* transfer last point */
                index[n_dest] = n_source - 1;
                n_dest++;

                /* make return array */
                var r = new Array();
                for (var i = 0; i < n_dest; i++) r.push(source[index[i]]);

                return r.map(function (o) {
                  return {
                    type: "Point",
                    coordinates: [o.lng, o.lat]
                  };
                });
              };

              // http://www.movable-type.co.uk/scripts/latlong.html#destPoint
              gju.destinationPoint = function (pt, brng, dist) {
                dist = dist / 6371; // convert dist to angular distance in radians
                brng = gju.numberToRadius(brng);

                var lat1 = gju.numberToRadius(pt.coordinates[0]);
                var lon1 = gju.numberToRadius(pt.coordinates[1]);

                var lat2 = Math.asin(Math.sin(lat1) * Math.cos(dist) + Math.cos(lat1) * Math.sin(dist) * Math.cos(brng));
                var lon2 = lon1 + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(lat1), Math.cos(dist) - Math.sin(lat1) * Math.sin(lat2));
                lon2 = (lon2 + 3 * Math.PI) % (2 * Math.PI) - Math.PI; // normalise to -180..+180º

                return {
                  'type': 'Point',
                  'coordinates': [gju.numberToDegree(lat2), gju.numberToDegree(lon2)]
                };
              };
            })();

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports3 = _require3("/node_modules/meteor/geojson-utils/main.js");

  /* Exports */
  Package._define("geojson-utils", _exports3, {
    GeoJSON: GeoJSON
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var IdMap;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "id-map": { "id-map.js": function module(_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                        //
            // packages/id-map/id-map.js                                                              //
            //                                                                                        //
            ////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              IdMap: () => IdMap
            });
            const hasOwn = Object.prototype.hasOwnProperty;

            class IdMap {
              constructor(idStringify, idParse) {
                this.clear();
                this._idStringify = idStringify || JSON.stringify;
                this._idParse = idParse || JSON.parse;
              } // Some of these methods are designed to match methods on OrderedDict, since
              // (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.
              // (Conceivably, this should be replaced with "UnorderedDict" with a specific
              // set of methods that overlap between the two.)


              get(id) {
                var key = this._idStringify(id);

                return this._map[key];
              }

              set(id, value) {
                var key = this._idStringify(id);

                this._map[key] = value;
              }

              remove(id) {
                var key = this._idStringify(id);

                delete this._map[key];
              }

              has(id) {
                var key = this._idStringify(id);

                return hasOwn.call(this._map, key);
              }

              empty() {
                for (let key in this._map) {
                  return false;
                }

                return true;
              }

              clear() {
                this._map = Object.create(null);
              } // Iterates over the items in the map. Return `false` to break the loop.


              forEach(iterator) {
                // don't use _.each, because we can't break out of it.
                var keys = Object.keys(this._map);

                for (var i = 0; i < keys.length; i++) {
                  var breakIfFalse = iterator.call(null, this._map[keys[i]], this._idParse(keys[i]));

                  if (breakIfFalse === false) {
                    return;
                  }
                }
              }

              size() {
                return Object.keys(this._map).length;
              }

              setDefault(id, def) {
                var key = this._idStringify(id);

                if (hasOwn.call(this._map, key)) {
                  return this._map[key];
                }

                this._map[key] = def;
                return def;
              } // Assumes that values are EJSON-cloneable, and that we don't need to clone
              // IDs (ie, that nobody is going to mutate an ObjectId).


              clone() {
                var clone = new IdMap(this._idStringify, this._idParse);
                this.forEach(function (value, id) {
                  clone.set(id, EJSON.clone(value));
                });
                return clone;
              }

            }
            ////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/id-map/id-map.js");

  /* Exports */
  Package._define("id-map", _exports2, {
    IdMap: IdMap
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var charsCount, Random;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "random": { "main_client.js": function module(_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                               //
            // packages/random/main_client.js                                                                //
            //                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Random: () => Random
            });
            let BrowserRandomGenerator;
            _module.link("./BrowserRandomGenerator", {
              default(v) {
                BrowserRandomGenerator = v;
              }

            }, 0);
            let createAleaGeneratorWithGeneratedSeed;
            _module.link("./createAleaGenerator", {
              default(v) {
                createAleaGeneratorWithGeneratedSeed = v;
              }

            }, 1);
            let createRandom;
            _module.link("./createRandom", {
              default(v) {
                createRandom = v;
              }

            }, 2);
            let generator;

            if (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) {
              generator = new BrowserRandomGenerator();
            } else {
              // On IE 10 and below, there's no browser crypto API
              // available. Fall back to Alea
              //
              // XXX looks like at the moment, we use Alea in IE 11 as well,
              // which has `window.msCrypto` instead of `window.crypto`.
              generator = createAleaGeneratorWithGeneratedSeed();
            }

            const Random = createRandom(generator);
            ///////////////////////////////////////////////////////////////////////////////////////////////////
          }, "AbstractRandomGenerator.js": function module(_require3, _exports3, _module2) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                               //
            // packages/random/AbstractRandomGenerator.js                                                    //
            //                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module2.export({
              default: () => RandomGenerator
            });
            let Meteor;
            _module2.link("meteor/meteor", {
              Meteor(v) {
                Meteor = v;
              }

            }, 0);
            const UNMISTAKABLE_CHARS = '23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz';
            const BASE64_CHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' + '0123456789-_'; // `type` is one of `RandomGenerator.Type` as defined below.
            //
            // options:
            // - seeds: (required, only for RandomGenerator.Type.ALEA) an array
            //   whose items will be `toString`ed and used as the seed to the Alea
            //   algorithm

            class RandomGenerator {
              /**
               * @name Random.fraction
               * @summary Return a number between 0 and 1, like `Math.random`.
               * @locus Anywhere
               */
              fraction() {
                throw new Error("Unknown random generator type");
              }
              /**
               * @name Random.hexString
               * @summary Return a random string of `n` hexadecimal digits.
               * @locus Anywhere
               * @param {Number} n Length of the string
               */

              hexString(digits) {
                return this._randomString(digits, '0123456789abcdef');
              }

              _randomString(charsCount, alphabet) {
                let result = '';

                for (let i = 0; i < charsCount; i++) {
                  result += this.choice(alphabet);
                }

                return result;
              }
              /**
               * @name Random.id
               * @summary Return a unique identifier, such as `"Jjwjg6gouWLXhMGKW"`, that is
               * likely to be unique in the whole world.
               * @locus Anywhere
               * @param {Number} [n] Optional length of the identifier in characters
               *   (defaults to 17)
               */

              id(charsCount) {
                // 17 characters is around 96 bits of entropy, which is the amount of
                // state in the Alea PRNG.
                if (charsCount === undefined) {
                  charsCount = 17;
                }

                return this._randomString(charsCount, UNMISTAKABLE_CHARS);
              }
              /**
               * @name Random.secret
               * @summary Return a random string of printable characters with 6 bits of
               * entropy per character. Use `Random.secret` for security-critical secrets
               * that are intended for machine, rather than human, consumption.
               * @locus Anywhere
               * @param {Number} [n] Optional length of the secret string (defaults to 43
               *   characters, or 256 bits of entropy)
               */

              secret(charsCount) {
                // Default to 256 bits of entropy, or 43 characters at 6 bits per
                // character.
                if (charsCount === undefined) {
                  charsCount = 43;
                }

                return this._randomString(charsCount, BASE64_CHARS);
              }
              /**
               * @name Random.choice
               * @summary Return a random element of the given array or string.
               * @locus Anywhere
               * @param {Array|String} arrayOrString Array or string to choose from
               */

              choice(arrayOrString) {
                const index = Math.floor(this.fraction() * arrayOrString.length);

                if (typeof arrayOrString === 'string') {
                  return arrayOrString.substr(index, 1);
                }

                return arrayOrString[index];
              }

            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////
          }, "AleaRandomGenerator.js": function module(_require4, _exports4, _module3) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                               //
            // packages/random/AleaRandomGenerator.js                                                        //
            //                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module3.export({
              default: () => AleaRandomGenerator
            });
            let RandomGenerator;
            _module3.link("./AbstractRandomGenerator", {
              default(v) {
                RandomGenerator = v;
              }

            }, 0);

            // Alea PRNG, which is not cryptographically strong
            // see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript
            // for a full discussion and Alea implementation.
            function Alea(seeds) {
              function Mash() {
                let n = 0xefc8249d;

                const mash = data => {
                  data = data.toString();

                  for (let i = 0; i < data.length; i++) {
                    n += data.charCodeAt(i);
                    let h = 0.02519603282416938 * n;
                    n = h >>> 0;
                    h -= n;
                    h *= n;
                    n = h >>> 0;
                    h -= n;
                    n += h * 0x100000000; // 2^32
                  }

                  return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
                };

                mash.version = 'Mash 0.9';
                return mash;
              }

              let s0 = 0;
              let s1 = 0;
              let s2 = 0;
              let c = 1;

              if (seeds.length === 0) {
                seeds = [+new Date()];
              }

              let mash = Mash();
              s0 = mash(' ');
              s1 = mash(' ');
              s2 = mash(' ');

              for (let i = 0; i < seeds.length; i++) {
                s0 -= mash(seeds[i]);

                if (s0 < 0) {
                  s0 += 1;
                }

                s1 -= mash(seeds[i]);

                if (s1 < 0) {
                  s1 += 1;
                }

                s2 -= mash(seeds[i]);

                if (s2 < 0) {
                  s2 += 1;
                }
              }

              mash = null;

              const random = () => {
                const t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32

                s0 = s1;
                s1 = s2;
                return s2 = t - (c = t | 0);
              };

              random.uint32 = () => random() * 0x100000000; // 2^32


              random.fract53 = () => random() + (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53


              random.version = 'Alea 0.9';
              random.args = seeds;
              return random;
            } // options:
            // - seeds: an array
            //   whose items will be `toString`ed and used as the seed to the Alea
            //   algorithm


            class AleaRandomGenerator extends RandomGenerator {
              constructor() {
                let {
                  seeds = []
                } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                super();

                if (!seeds) {
                  throw new Error('No seeds were provided for Alea PRNG');
                }

                this.alea = Alea(seeds);
              }
              /**
               * @name Random.fraction
               * @summary Return a number between 0 and 1, like `Math.random`.
               * @locus Anywhere
               */

              fraction() {
                return this.alea();
              }

            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////
          }, "BrowserRandomGenerator.js": function module(_require5, _exports5, _module4) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                               //
            // packages/random/BrowserRandomGenerator.js                                                     //
            //                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module4.export({
              default: () => BrowserRandomGenerator
            });
            let RandomGenerator;
            _module4.link("./AbstractRandomGenerator", {
              default(v) {
                RandomGenerator = v;
              }

            }, 0);

            class BrowserRandomGenerator extends RandomGenerator {
              /**
               * @name Random.fraction
               * @summary Return a number between 0 and 1, like `Math.random`.
               * @locus Anywhere
               */
              fraction() {
                const array = new Uint32Array(1);
                window.crypto.getRandomValues(array);
                return array[0] * 2.3283064365386963e-10; // 2^-32
              }

            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////
          }, "createAleaGenerator.js": function module(_require6, _exports6, _module5) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                               //
            // packages/random/createAleaGenerator.js                                                        //
            //                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module5.export({
              default: () => createAleaGenerator
            });
            let AleaRandomGenerator;
            _module5.link("./AleaRandomGenerator", {
              default(v) {
                AleaRandomGenerator = v;
              }

            }, 0);
            // instantiate RNG.  Heuristically collect entropy from various sources when a
            // cryptographic PRNG isn't available.
            // client sources
            const height = typeof window !== 'undefined' && window.innerHeight || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientHeight || typeof document !== 'undefined' && document.body && document.body.clientHeight || 1;
            const width = typeof window !== 'undefined' && window.innerWidth || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientWidth || typeof document !== 'undefined' && document.body && document.body.clientWidth || 1;
            const agent = typeof navigator !== 'undefined' && navigator.userAgent || '';

            function createAleaGenerator() {
              return new AleaRandomGenerator({
                seeds: [new Date(), height, width, agent, Math.random()]
              });
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////
          }, "createRandom.js": function module(_require7, _exports7, _module6) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                               //
            // packages/random/createRandom.js                                                               //
            //                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module6.export({
              default: () => createRandom
            });
            let AleaRandomGenerator;
            _module6.link("./AleaRandomGenerator", {
              default(v) {
                AleaRandomGenerator = v;
              }

            }, 0);
            let createAleaGeneratorWithGeneratedSeed;
            _module6.link("./createAleaGenerator", {
              default(v) {
                createAleaGeneratorWithGeneratedSeed = v;
              }

            }, 1);

            function createRandom(generator) {
              // Create a non-cryptographically secure PRNG with a given seed (using
              // the Alea algorithm)
              generator.createWithSeeds = function () {
                for (var _len = arguments.length, seeds = new Array(_len), _key = 0; _key < _len; _key++) {
                  seeds[_key] = arguments[_key];
                }

                if (seeds.length === 0) {
                  throw new Error('No seeds were provided');
                }

                return new AleaRandomGenerator({
                  seeds
                });
              }; // Used like `Random`, but much faster and not cryptographically
              // secure


              generator.insecure = createAleaGeneratorWithGeneratedSeed();
              return generator;
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/random/main_client.js");

  /* Exports */
  Package._define("random", _exports2, {
    Random: Random
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var IdMap = Package['id-map'].IdMap;
  var Random = Package.random.Random;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var hexString, MongoID;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "mongo-id": { "id.js": function module(_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                           //
            // packages/mongo-id/id.js                                                                   //
            //                                                                                           //
            ///////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              MongoID: () => MongoID
            });
            let EJSON;
            _module.link("meteor/ejson", {
              EJSON(v) {
                EJSON = v;
              }

            }, 0);
            let Random;
            _module.link("meteor/random", {
              Random(v) {
                Random = v;
              }

            }, 1);
            const MongoID = {};

            MongoID._looksLikeObjectID = str => str.length === 24 && str.match(/^[0-9a-f]*$/);

            MongoID.ObjectID = class ObjectID {
              constructor(hexString) {
                //random-based impl of Mongo ObjectID
                if (hexString) {
                  hexString = hexString.toLowerCase();

                  if (!MongoID._looksLikeObjectID(hexString)) {
                    throw new Error('Invalid hexadecimal string for creating an ObjectID');
                  } // meant to work with _.isEqual(), which relies on structural equality


                  this._str = hexString;
                } else {
                  this._str = Random.hexString(24);
                }
              }

              equals(other) {
                return other instanceof MongoID.ObjectID && this.valueOf() === other.valueOf();
              }

              toString() {
                return "ObjectID(\"".concat(this._str, "\")");
              }

              clone() {
                return new MongoID.ObjectID(this._str);
              }

              typeName() {
                return 'oid';
              }

              getTimestamp() {
                return Number.parseInt(this._str.substr(0, 8), 16);
              }

              valueOf() {
                return this._str;
              }

              toJSONValue() {
                return this.valueOf();
              }

              toHexString() {
                return this.valueOf();
              }

            };
            EJSON.addType('oid', str => new MongoID.ObjectID(str));

            MongoID.idStringify = id => {
              if (id instanceof MongoID.ObjectID) {
                return id.valueOf();
              } else if (typeof id === 'string') {
                if (id === '') {
                  return id;
                } else if (id.startsWith('-') || // escape previously dashed strings
                id.startsWith('~') || // escape escaped numbers, true, false
                MongoID._looksLikeObjectID(id) || // escape object-id-form strings
                id.startsWith('{')) {
                  // escape object-form strings, for maybe implementing later
                  return "-".concat(id);
                } else {
                  return id; // other strings go through unchanged.
                }
              } else if (id === undefined) {
                return '-';
              } else if (typeof id === 'object' && id !== null) {
                throw new Error('Meteor does not currently support objects other than ObjectID as ids');
              } else {
                // Numbers, true, false, null
                return "~".concat(JSON.stringify(id));
              }
            };

            MongoID.idParse = id => {
              if (id === '') {
                return id;
              } else if (id === '-') {
                return undefined;
              } else if (id.startsWith('-')) {
                return id.substr(1);
              } else if (id.startsWith('~')) {
                return JSON.parse(id.substr(1));
              } else if (MongoID._looksLikeObjectID(id)) {
                return new MongoID.ObjectID(id);
              } else {
                return id;
              }
            };
            ///////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/mongo-id/id.js");

  /* Exports */
  Package._define("mongo-id", _exports2, {
    MongoID: MongoID
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var OrderedDict;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ordered-dict": { "ordered_dict.js": function module(_require, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                      //
            // packages/ordered-dict/ordered_dict.js                                                                //
            //                                                                                                      //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              OrderedDict: () => OrderedDict
            });

            // This file defines an ordered dictionary abstraction that is useful for
            // maintaining a dataset backed by observeChanges.  It supports ordering items
            // by specifying the item they now come before.
            // The implementation is a dictionary that contains nodes of a doubly-linked
            // list as its values.
            // constructs a new element struct
            // next and prev are whole elements, not keys.
            function element(key, value, next, prev) {
              return {
                key: key,
                value: value,
                next: next,
                prev: prev
              };
            }

            class OrderedDict {
              constructor() {
                this._dict = Object.create(null);
                this._first = null;
                this._last = null;
                this._size = 0;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                if (typeof args[0] === 'function') {
                  this._stringify = args.shift();
                } else {
                  this._stringify = function (x) {
                    return x;
                  };
                }

                args.forEach(kv => this.putBefore(kv[0], kv[1], null));
              } // the "prefix keys with a space" thing comes from here
              // https://github.com/documentcloud/underscore/issues/376#issuecomment-2815649


              _k(key) {
                return " " + this._stringify(key);
              }

              empty() {
                return !this._first;
              }

              size() {
                return this._size;
              }

              _linkEltIn(elt) {
                if (!elt.next) {
                  elt.prev = this._last;
                  if (this._last) this._last.next = elt;
                  this._last = elt;
                } else {
                  elt.prev = elt.next.prev;
                  elt.next.prev = elt;
                  if (elt.prev) elt.prev.next = elt;
                }

                if (this._first === null || this._first === elt.next) this._first = elt;
              }

              _linkEltOut(elt) {
                if (elt.next) elt.next.prev = elt.prev;
                if (elt.prev) elt.prev.next = elt.next;
                if (elt === this._last) this._last = elt.prev;
                if (elt === this._first) this._first = elt.next;
              }

              putBefore(key, item, before) {
                if (this._dict[this._k(key)]) throw new Error("Item " + key + " already present in OrderedDict");
                var elt = before ? element(key, item, this._dict[this._k(before)]) : element(key, item, null);
                if (typeof elt.next === "undefined") throw new Error("could not find item to put this one before");

                this._linkEltIn(elt);

                this._dict[this._k(key)] = elt;
                this._size++;
              }

              append(key, item) {
                this.putBefore(key, item, null);
              }

              remove(key) {
                var elt = this._dict[this._k(key)];

                if (typeof elt === "undefined") throw new Error("Item " + key + " not present in OrderedDict");

                this._linkEltOut(elt);

                this._size--;
                delete this._dict[this._k(key)];
                return elt.value;
              }

              get(key) {
                if (this.has(key)) {
                  return this._dict[this._k(key)].value;
                }
              }

              has(key) {
                return Object.prototype.hasOwnProperty.call(this._dict, this._k(key));
              } // Iterate through the items in this dictionary in order, calling
              // iter(value, key, index) on each one.
              // Stops whenever iter returns OrderedDict.BREAK, or after the last element.


              forEach(iter) {
                let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var i = 0;
                var elt = this._first;

                while (elt !== null) {
                  var b = iter.call(context, elt.value, elt.key, i);
                  if (b === OrderedDict.BREAK) return;
                  elt = elt.next;
                  i++;
                }
              }

              first() {
                if (this.empty()) {
                  return;
                }

                return this._first.key;
              }

              firstValue() {
                if (this.empty()) {
                  return;
                }

                return this._first.value;
              }

              last() {
                if (this.empty()) {
                  return;
                }

                return this._last.key;
              }

              lastValue() {
                if (this.empty()) {
                  return;
                }

                return this._last.value;
              }

              prev(key) {
                if (this.has(key)) {
                  var elt = this._dict[this._k(key)];

                  if (elt.prev) return elt.prev.key;
                }

                return null;
              }

              next(key) {
                if (this.has(key)) {
                  var elt = this._dict[this._k(key)];

                  if (elt.next) return elt.next.key;
                }

                return null;
              }

              moveBefore(key, before) {
                var elt = this._dict[this._k(key)];

                var eltBefore = before ? this._dict[this._k(before)] : null;

                if (typeof elt === "undefined") {
                  throw new Error("Item to move is not present");
                }

                if (typeof eltBefore === "undefined") {
                  throw new Error("Could not find element to move this one before");
                }

                if (eltBefore === elt.next) // no moving necessary
                  return; // remove from its old place

                this._linkEltOut(elt); // patch into its new place


                elt.next = eltBefore;

                this._linkEltIn(elt);
              } // Linear, sadly.


              indexOf(key) {
                var ret = null;
                this.forEach((v, k, i) => {
                  if (this._k(k) === this._k(key)) {
                    ret = i;
                    return OrderedDict.BREAK;
                  }

                  return;
                });
                return ret;
              }

              _checkRep() {
                Object.keys(this._dict).forEach(k => {
                  const v = this._dict[k];

                  if (v.next === v) {
                    throw new Error("Next is a loop");
                  }

                  if (v.prev === v) {
                    throw new Error("Prev is a loop");
                  }
                });
              }

            }

            OrderedDict.BREAK = {
              "break": true
            };
            //////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/ordered-dict/ordered_dict.js");

  /* Exports */
  Package._define("ordered-dict", _exports2, {
    OrderedDict: OrderedDict
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Tracker, Deps, computation;

  var _require = meteorInstall({ "node_modules": { "meteor": { "tracker": { "tracker.js": function _module() {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/tracker/tracker.js                                                                                        //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            /////////////////////////////////////////////////////
            // Package docs at http://docs.meteor.com/#tracker //
            /////////////////////////////////////////////////////

            /**
             * @namespace Tracker
             * @summary The namespace for Tracker-related methods.
             */
            Tracker = {};
            /**
             * @namespace Deps
             * @deprecated
             */

            Deps = Tracker; // http://docs.meteor.com/#tracker_active

            /**
             * @summary True if there is a current computation, meaning that dependencies on reactive data sources will be tracked and potentially cause the current computation to be rerun.
             * @locus Client
             * @type {Boolean}
             */

            Tracker.active = false; // http://docs.meteor.com/#tracker_currentcomputation

            /**
             * @summary The current computation, or `null` if there isn't one.  The current computation is the [`Tracker.Computation`](#tracker_computation) object created by the innermost active call to `Tracker.autorun`, and it's the computation that gains dependencies when reactive data sources are accessed.
             * @locus Client
             * @type {Tracker.Computation}
             */

            Tracker.currentComputation = null;

            function setCurrentComputation(c) {
              Tracker.currentComputation = c;
              Tracker.active = !!c;
            }

            function _debugFunc() {
              // We want this code to work without Meteor, and also without
              // "console" (which is technically non-standard and may be missing
              // on some browser we come across, like it was on IE 7).
              //
              // Lazy evaluation because `Meteor` does not exist right away.(??)
              return typeof Meteor !== "undefined" ? Meteor._debug : typeof console !== "undefined" && console.error ? function () {
                console.error.apply(console, arguments);
              } : function () {};
            }

            function _maybeSuppressMoreLogs(messagesLength) {
              // Sometimes when running tests, we intentionally suppress logs on expected
              // printed errors. Since the current implementation of _throwOrLog can log
              // multiple separate log messages, suppress all of them if at least one suppress
              // is expected as we still want them to count as one.
              if (typeof Meteor !== "undefined") {
                if (Meteor._suppressed_log_expected()) {
                  Meteor._suppress_log(messagesLength - 1);
                }
              }
            }

            function _throwOrLog(from, e) {
              if (throwFirstError) {
                throw e;
              } else {
                var printArgs = ["Exception from Tracker " + from + " function:"];

                if (e.stack && e.message && e.name) {
                  var idx = e.stack.indexOf(e.message);

                  if (idx < 0 || idx > e.name.length + 2) {
                    // check for "Error: "
                    // message is not part of the stack
                    var message = e.name + ": " + e.message;
                    printArgs.push(message);
                  }
                }

                printArgs.push(e.stack);

                _maybeSuppressMoreLogs(printArgs.length);

                for (var i = 0; i < printArgs.length; i++) {
                  _debugFunc()(printArgs[i]);
                }
              }
            } // Takes a function `f`, and wraps it in a `Meteor._noYieldsAllowed`
            // block if we are running on the server. On the client, returns the
            // original function (since `Meteor._noYieldsAllowed` is a
            // no-op). This has the benefit of not adding an unnecessary stack
            // frame on the client.


            function withNoYieldsAllowed(f) {
              if (typeof Meteor === 'undefined' || Meteor.isClient) {
                return f;
              } else {
                return function () {
                  var args = arguments;

                  Meteor._noYieldsAllowed(function () {
                    f.apply(null, args);
                  });
                };
              }
            }

            var nextId = 1; // computations whose callbacks we should call at flush time

            var pendingComputations = []; // `true` if a Tracker.flush is scheduled, or if we are in Tracker.flush now

            var willFlush = false; // `true` if we are in Tracker.flush now

            var inFlush = false; // `true` if we are computing a computation now, either first time
            // or recompute.  This matches Tracker.active unless we are inside
            // Tracker.nonreactive, which nullfies currentComputation even though
            // an enclosing computation may still be running.

            var inCompute = false; // `true` if the `_throwFirstError` option was passed in to the call
            // to Tracker.flush that we are in. When set, throw rather than log the
            // first error encountered while flushing. Before throwing the error,
            // finish flushing (from a finally block), logging any subsequent
            // errors.

            var throwFirstError = false;
            var afterFlushCallbacks = [];

            function requireFlush() {
              if (!willFlush) {
                // We want this code to work without Meteor, see debugFunc above
                if (typeof Meteor !== "undefined") Meteor._setImmediate(Tracker._runFlush);else setTimeout(Tracker._runFlush, 0);
                willFlush = true;
              }
            } // Tracker.Computation constructor is visible but private
            // (throws an error if you try to call it)


            var constructingComputation = false; //
            // http://docs.meteor.com/#tracker_computation

            /**
             * @summary A Computation object represents code that is repeatedly rerun
             * in response to
             * reactive data changes. Computations don't have return values; they just
             * perform actions, such as rerendering a template on the screen. Computations
             * are created using Tracker.autorun. Use stop to prevent further rerunning of a
             * computation.
             * @instancename computation
             */

            Tracker.Computation = class Computation {
              constructor(f, parent, onError) {
                if (!constructingComputation) throw new Error("Tracker.Computation constructor is private; use Tracker.autorun");
                constructingComputation = false; // http://docs.meteor.com/#computation_stopped

                /**
                 * @summary True if this computation has been stopped.
                 * @locus Client
                 * @memberOf Tracker.Computation
                 * @instance
                 * @name  stopped
                 */

                this.stopped = false; // http://docs.meteor.com/#computation_invalidated

                /**
                 * @summary True if this computation has been invalidated (and not yet rerun), or if it has been stopped.
                 * @locus Client
                 * @memberOf Tracker.Computation
                 * @instance
                 * @name  invalidated
                 * @type {Boolean}
                 */

                this.invalidated = false; // http://docs.meteor.com/#computation_firstrun

                /**
                 * @summary True during the initial run of the computation at the time `Tracker.autorun` is called, and false on subsequent reruns and at other times.
                 * @locus Client
                 * @memberOf Tracker.Computation
                 * @instance
                 * @name  firstRun
                 * @type {Boolean}
                 */

                this.firstRun = true;
                this._id = nextId++;
                this._onInvalidateCallbacks = [];
                this._onStopCallbacks = []; // the plan is at some point to use the parent relation
                // to constrain the order that computations are processed

                this._parent = parent;
                this._func = f;
                this._onError = onError;
                this._recomputing = false;
                var errored = true;

                try {
                  this._compute();

                  errored = false;
                } finally {
                  this.firstRun = false;
                  if (errored) this.stop();
                }
              } // http://docs.meteor.com/#computation_oninvalidate

              /**
               * @summary Registers `callback` to run when this computation is next invalidated, or runs it immediately if the computation is already invalidated.  The callback is run exactly once and not upon future invalidations unless `onInvalidate` is called again after the computation becomes valid again.
               * @locus Client
               * @param {Function} callback Function to be called on invalidation. Receives one argument, the computation that was invalidated.
               */

              onInvalidate(f) {
                if (typeof f !== 'function') throw new Error("onInvalidate requires a function");

                if (this.invalidated) {
                  Tracker.nonreactive(() => {
                    withNoYieldsAllowed(f)(this);
                  });
                } else {
                  this._onInvalidateCallbacks.push(f);
                }
              }
              /**
               * @summary Registers `callback` to run when this computation is stopped, or runs it immediately if the computation is already stopped.  The callback is run after any `onInvalidate` callbacks.
               * @locus Client
               * @param {Function} callback Function to be called on stop. Receives one argument, the computation that was stopped.
               */

              onStop(f) {
                if (typeof f !== 'function') throw new Error("onStop requires a function");

                if (this.stopped) {
                  Tracker.nonreactive(() => {
                    withNoYieldsAllowed(f)(this);
                  });
                } else {
                  this._onStopCallbacks.push(f);
                }
              } // http://docs.meteor.com/#computation_invalidate

              /**
               * @summary Invalidates this computation so that it will be rerun.
               * @locus Client
               */

              invalidate() {
                if (!this.invalidated) {
                  // if we're currently in _recompute(), don't enqueue
                  // ourselves, since we'll rerun immediately anyway.
                  if (!this._recomputing && !this.stopped) {
                    requireFlush();
                    pendingComputations.push(this);
                  }

                  this.invalidated = true; // callbacks can't add callbacks, because
                  // this.invalidated === true.

                  for (var i = 0, f; f = this._onInvalidateCallbacks[i]; i++) {
                    Tracker.nonreactive(() => {
                      withNoYieldsAllowed(f)(this);
                    });
                  }

                  this._onInvalidateCallbacks = [];
                }
              } // http://docs.meteor.com/#computation_stop

              /**
               * @summary Prevents this computation from rerunning.
               * @locus Client
               */

              stop() {
                if (!this.stopped) {
                  this.stopped = true;
                  this.invalidate();

                  for (var i = 0, f; f = this._onStopCallbacks[i]; i++) {
                    Tracker.nonreactive(() => {
                      withNoYieldsAllowed(f)(this);
                    });
                  }

                  this._onStopCallbacks = [];
                }
              }

              _compute() {
                this.invalidated = false;
                var previous = Tracker.currentComputation;
                setCurrentComputation(this);
                var previousInCompute = inCompute;
                inCompute = true;

                try {
                  withNoYieldsAllowed(this._func)(this);
                } finally {
                  setCurrentComputation(previous);
                  inCompute = previousInCompute;
                }
              }

              _needsRecompute() {
                return this.invalidated && !this.stopped;
              }

              _recompute() {
                this._recomputing = true;

                try {
                  if (this._needsRecompute()) {
                    try {
                      this._compute();
                    } catch (e) {
                      if (this._onError) {
                        this._onError(e);
                      } else {
                        _throwOrLog("recompute", e);
                      }
                    }
                  }
                } finally {
                  this._recomputing = false;
                }
              }
              /**
               * @summary Process the reactive updates for this computation immediately
               * and ensure that the computation is rerun. The computation is rerun only
               * if it is invalidated.
               * @locus Client
               */

              flush() {
                if (this._recomputing) return;

                this._recompute();
              }
              /**
               * @summary Causes the function inside this computation to run and
               * synchronously process all reactive updtes.
               * @locus Client
               */

              run() {
                this.invalidate();
                this.flush();
              }

            }; //
            // http://docs.meteor.com/#tracker_dependency

            /**
             * @summary A Dependency represents an atomic unit of reactive data that a
             * computation might depend on. Reactive data sources such as Session or
             * Minimongo internally create different Dependency objects for different
             * pieces of data, each of which may be depended on by multiple computations.
             * When the data changes, the computations are invalidated.
             * @class
             * @instanceName dependency
             */

            Tracker.Dependency = class Dependency {
              constructor() {
                this._dependentsById = Object.create(null);
              } // http://docs.meteor.com/#dependency_depend
              //
              // Adds `computation` to this set if it is not already
              // present.  Returns true if `computation` is a new member of the set.
              // If no argument, defaults to currentComputation, or does nothing
              // if there is no currentComputation.

              /**
               * @summary Declares that the current computation (or `fromComputation` if given) depends on `dependency`.  The computation will be invalidated the next time `dependency` changes.
                If there is no current computation and `depend()` is called with no arguments, it does nothing and returns false.
                Returns true if the computation is a new dependent of `dependency` rather than an existing one.
               * @locus Client
               * @param {Tracker.Computation} [fromComputation] An optional computation declared to depend on `dependency` instead of the current computation.
               * @returns {Boolean}
               */

              depend(computation) {
                if (!computation) {
                  if (!Tracker.active) return false;
                  computation = Tracker.currentComputation;
                }

                var id = computation._id;

                if (!(id in this._dependentsById)) {
                  this._dependentsById[id] = computation;
                  computation.onInvalidate(() => {
                    delete this._dependentsById[id];
                  });
                  return true;
                }

                return false;
              } // http://docs.meteor.com/#dependency_changed

              /**
               * @summary Invalidate all dependent computations immediately and remove them as dependents.
               * @locus Client
               */

              changed() {
                for (var id in this._dependentsById) this._dependentsById[id].invalidate();
              } // http://docs.meteor.com/#dependency_hasdependents

              /**
               * @summary True if this Dependency has one or more dependent Computations, which would be invalidated if this Dependency were to change.
               * @locus Client
               * @returns {Boolean}
               */

              hasDependents() {
                for (var id in this._dependentsById) return true;

                return false;
              }

            }; // http://docs.meteor.com/#tracker_flush

            /**
             * @summary Process all reactive updates immediately and ensure that all invalidated computations are rerun.
             * @locus Client
             */

            Tracker.flush = function (options) {
              Tracker._runFlush({
                finishSynchronously: true,
                throwFirstError: options && options._throwFirstError
              });
            };
            /**
             * @summary True if we are computing a computation now, either first time or recompute.  This matches Tracker.active unless we are inside Tracker.nonreactive, which nullfies currentComputation even though an enclosing computation may still be running.
             * @locus Client
             * @returns {Boolean}
             */

            Tracker.inFlush = function () {
              return inFlush;
            }; // Run all pending computations and afterFlush callbacks.  If we were not called
            // directly via Tracker.flush, this may return before they're all done to allow
            // the event loop to run a little before continuing.


            Tracker._runFlush = function (options) {
              // XXX What part of the comment below is still true? (We no longer
              // have Spark)
              //
              // Nested flush could plausibly happen if, say, a flush causes
              // DOM mutation, which causes a "blur" event, which runs an
              // app event handler that calls Tracker.flush.  At the moment
              // Spark blocks event handlers during DOM mutation anyway,
              // because the LiveRange tree isn't valid.  And we don't have
              // any useful notion of a nested flush.
              //
              // https://app.asana.com/0/159908330244/385138233856
              if (Tracker.inFlush()) throw new Error("Can't call Tracker.flush while flushing");
              if (inCompute) throw new Error("Can't flush inside Tracker.autorun");
              options = options || {};
              inFlush = true;
              willFlush = true;
              throwFirstError = !!options.throwFirstError;
              var recomputedCount = 0;
              var finishedTry = false;

              try {
                while (pendingComputations.length || afterFlushCallbacks.length) {
                  // recompute all pending computations
                  while (pendingComputations.length) {
                    var comp = pendingComputations.shift();

                    comp._recompute();

                    if (comp._needsRecompute()) {
                      pendingComputations.unshift(comp);
                    }

                    if (!options.finishSynchronously && ++recomputedCount > 1000) {
                      finishedTry = true;
                      return;
                    }
                  }

                  if (afterFlushCallbacks.length) {
                    // call one afterFlush callback, which may
                    // invalidate more computations
                    var func = afterFlushCallbacks.shift();

                    try {
                      func();
                    } catch (e) {
                      _throwOrLog("afterFlush", e);
                    }
                  }
                }

                finishedTry = true;
              } finally {
                if (!finishedTry) {
                  // we're erroring due to throwFirstError being true.
                  inFlush = false; // needed before calling `Tracker.flush()` again
                  // finish flushing

                  Tracker._runFlush({
                    finishSynchronously: options.finishSynchronously,
                    throwFirstError: false
                  });
                }

                willFlush = false;
                inFlush = false;

                if (pendingComputations.length || afterFlushCallbacks.length) {
                  // We're yielding because we ran a bunch of computations and we aren't
                  // required to finish synchronously, so we'd like to give the event loop a
                  // chance. We should flush again soon.
                  if (options.finishSynchronously) {
                    throw new Error("still have more to do?"); // shouldn't happen
                  }

                  setTimeout(requireFlush, 10);
                }
              }
            }; // http://docs.meteor.com/#tracker_autorun
            //
            // Run f(). Record its dependencies. Rerun it whenever the
            // dependencies change.
            //
            // Returns a new Computation, which is also passed to f.
            //
            // Links the computation to the current computation
            // so that it is stopped if the current computation is invalidated.

            /**
             * @callback Tracker.ComputationFunction
             * @param {Tracker.Computation}
             */

            /**
             * @summary Run a function now and rerun it later whenever its dependencies
             * change. Returns a Computation object that can be used to stop or observe the
             * rerunning.
             * @locus Client
             * @param {Tracker.ComputationFunction} runFunc The function to run. It receives
             * one argument: the Computation object that will be returned.
             * @param {Object} [options]
             * @param {Function} options.onError Optional. The function to run when an error
             * happens in the Computation. The only argument it receives is the Error
             * thrown. Defaults to the error being logged to the console.
             * @returns {Tracker.Computation}
             */

            Tracker.autorun = function (f, options) {
              if (typeof f !== 'function') throw new Error('Tracker.autorun requires a function argument');
              options = options || {};
              constructingComputation = true;
              var c = new Tracker.Computation(f, Tracker.currentComputation, options.onError);
              if (Tracker.active) Tracker.onInvalidate(function () {
                c.stop();
              });
              return c;
            }; // http://docs.meteor.com/#tracker_nonreactive
            //
            // Run `f` with no current computation, returning the return value
            // of `f`.  Used to turn off reactivity for the duration of `f`,
            // so that reactive data sources accessed by `f` will not result in any
            // computations being invalidated.

            /**
             * @summary Run a function without tracking dependencies.
             * @locus Client
             * @param {Function} func A function to call immediately.
             */

            Tracker.nonreactive = function (f) {
              var previous = Tracker.currentComputation;
              setCurrentComputation(null);

              try {
                return f();
              } finally {
                setCurrentComputation(previous);
              }
            }; // http://docs.meteor.com/#tracker_oninvalidate

            /**
             * @summary Registers a new [`onInvalidate`](#computation_oninvalidate) callback on the current computation (which must exist), to be called immediately when the current computation is invalidated or stopped.
             * @locus Client
             * @param {Function} callback A callback function that will be invoked as `func(c)`, where `c` is the computation on which the callback is registered.
             */

            Tracker.onInvalidate = function (f) {
              if (!Tracker.active) throw new Error("Tracker.onInvalidate requires a currentComputation");
              Tracker.currentComputation.onInvalidate(f);
            }; // http://docs.meteor.com/#tracker_afterflush

            /**
             * @summary Schedules a function to be called during the next flush, or later in the current flush if one is in progress, after all invalidated computations have been rerun.  The function will be run once and not on subsequent flushes unless `afterFlush` is called again.
             * @locus Client
             * @param {Function} callback A function to call at flush time.
             */

            Tracker.afterFlush = function (f) {
              afterFlushCallbacks.push(f);
              requireFlush();
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/tracker/tracker.js");

  /* Exports */
  Package._define("tracker", {
    Tracker: Tracker,
    Deps: Deps
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var EJSON = Package.ejson.EJSON;
  var GeoJSON = Package['geojson-utils'].GeoJSON;
  var IdMap = Package['id-map'].IdMap;
  var MongoID = Package['mongo-id'].MongoID;
  var OrderedDict = Package['ordered-dict'].OrderedDict;
  var Random = Package.random.Random;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var operand, selectorValue, MinimongoTest, MinimongoError, selector, doc, callback, options, oldResults, a, b, LocalCollection, Minimongo;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "minimongo": { "minimongo_client.js": function module(_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/minimongo_client.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.link("./minimongo_common.js");
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function module(_require2, _exports2, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/common.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module2.export({
              hasOwn: () => hasOwn,
              ELEMENT_OPERATORS: () => ELEMENT_OPERATORS,
              compileDocumentSelector: () => compileDocumentSelector,
              equalityElementMatcher: () => equalityElementMatcher,
              expandArraysInBranches: () => expandArraysInBranches,
              isIndexable: () => isIndexable,
              isNumericKey: () => isNumericKey,
              isOperatorObject: () => isOperatorObject,
              makeLookupFunction: () => makeLookupFunction,
              nothingMatcher: () => nothingMatcher,
              pathsToTree: () => pathsToTree,
              populateDocumentWithQueryFields: () => populateDocumentWithQueryFields,
              projectionDetails: () => projectionDetails,
              regexpElementMatcher: () => regexpElementMatcher
            });
            let LocalCollection;
            _module2.link("./local_collection.js", {
              default(v) {
                LocalCollection = v;
              }

            }, 0);
            const hasOwn = Object.prototype.hasOwnProperty;
            const ELEMENT_OPERATORS = {
              $lt: makeInequality(cmpValue => cmpValue < 0),
              $gt: makeInequality(cmpValue => cmpValue > 0),
              $lte: makeInequality(cmpValue => cmpValue <= 0),
              $gte: makeInequality(cmpValue => cmpValue >= 0),
              $mod: {
                compileElementSelector(operand) {
                  if (!(Array.isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {
                    throw Error('argument to $mod must be an array of two numbers');
                  } // XXX could require to be ints or round or something


                  const divisor = operand[0];
                  const remainder = operand[1];
                  return value => typeof value === 'number' && value % divisor === remainder;
                }

              },
              $in: {
                compileElementSelector(operand) {
                  if (!Array.isArray(operand)) {
                    throw Error('$in needs an array');
                  }

                  const elementMatchers = operand.map(option => {
                    if (option instanceof RegExp) {
                      return regexpElementMatcher(option);
                    }

                    if (isOperatorObject(option)) {
                      throw Error('cannot nest $ under $in');
                    }

                    return equalityElementMatcher(option);
                  });
                  return value => {
                    // Allow {a: {$in: [null]}} to match when 'a' does not exist.
                    if (value === undefined) {
                      value = null;
                    }

                    return elementMatchers.some(matcher => matcher(value));
                  };
                }

              },
              $size: {
                // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we
                // don't want to consider the element [5,5] in the leaf array [[5,5]] as a
                // possible value.
                dontExpandLeafArrays: true,

                compileElementSelector(operand) {
                  if (typeof operand === 'string') {
                    // Don't ask me why, but by experimentation, this seems to be what Mongo
                    // does.
                    operand = 0;
                  } else if (typeof operand !== 'number') {
                    throw Error('$size needs a number');
                  }

                  return value => Array.isArray(value) && value.length === operand;
                }

              },
              $type: {
                // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should
                // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:
                // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but
                // should *not* include it itself.
                dontIncludeLeafArrays: true,

                compileElementSelector(operand) {
                  if (typeof operand === 'string') {
                    const operandAliasMap = {
                      'double': 1,
                      'string': 2,
                      'object': 3,
                      'array': 4,
                      'binData': 5,
                      'undefined': 6,
                      'objectId': 7,
                      'bool': 8,
                      'date': 9,
                      'null': 10,
                      'regex': 11,
                      'dbPointer': 12,
                      'javascript': 13,
                      'symbol': 14,
                      'javascriptWithScope': 15,
                      'int': 16,
                      'timestamp': 17,
                      'long': 18,
                      'decimal': 19,
                      'minKey': -1,
                      'maxKey': 127
                    };

                    if (!hasOwn.call(operandAliasMap, operand)) {
                      throw Error("unknown string alias for $type: ".concat(operand));
                    }

                    operand = operandAliasMap[operand];
                  } else if (typeof operand === 'number') {
                    if (operand === 0 || operand < -1 || operand > 19 && operand !== 127) {
                      throw Error("Invalid numerical $type code: ".concat(operand));
                    }
                  } else {
                    throw Error('argument to $type is not a number or a string');
                  }

                  return value => value !== undefined && LocalCollection._f._type(value) === operand;
                }

              },
              $bitsAllSet: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAllSet');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);
                  };
                }

              },
              $bitsAnySet: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAnySet');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);
                  };
                }

              },
              $bitsAllClear: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAllClear');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));
                  };
                }

              },
              $bitsAnyClear: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAnyClear');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);
                  };
                }

              },
              $regex: {
                compileElementSelector(operand, valueSelector) {
                  if (!(typeof operand === 'string' || operand instanceof RegExp)) {
                    throw Error('$regex has to be a string or RegExp');
                  }

                  let regexp;

                  if (valueSelector.$options !== undefined) {
                    // Options passed in $options (even the empty string) always overrides
                    // options in the RegExp object itself.
                    // Be clear that we only support the JS-supported options, not extended
                    // ones (eg, Mongo supports x and s). Ideally we would implement x and s
                    // by transforming the regexp, but not today...
                    if (/[^gim]/.test(valueSelector.$options)) {
                      throw new Error('Only the i, m, and g regexp options are supported');
                    }

                    const source = operand instanceof RegExp ? operand.source : operand;
                    regexp = new RegExp(source, valueSelector.$options);
                  } else if (operand instanceof RegExp) {
                    regexp = operand;
                  } else {
                    regexp = new RegExp(operand);
                  }

                  return regexpElementMatcher(regexp);
                }

              },
              $elemMatch: {
                dontExpandLeafArrays: true,

                compileElementSelector(operand, valueSelector, matcher) {
                  if (!LocalCollection._isPlainObject(operand)) {
                    throw Error('$elemMatch need an object');
                  }

                  const isDocMatcher = !isOperatorObject(Object.keys(operand).filter(key => !hasOwn.call(LOGICAL_OPERATORS, key)).reduce((a, b) => Object.assign(a, {
                    [b]: operand[b]
                  }), {}), true);
                  let subMatcher;

                  if (isDocMatcher) {
                    // This is NOT the same as compileValueSelector(operand), and not just
                    // because of the slightly different calling convention.
                    // {$elemMatch: {x: 3}} means "an element has a field x:3", not
                    // "consists only of a field x:3". Also, regexps and sub-$ are allowed.
                    subMatcher = compileDocumentSelector(operand, matcher, {
                      inElemMatch: true
                    });
                  } else {
                    subMatcher = compileValueSelector(operand, matcher);
                  }

                  return value => {
                    if (!Array.isArray(value)) {
                      return false;
                    }

                    for (let i = 0; i < value.length; ++i) {
                      const arrayElement = value[i];
                      let arg;

                      if (isDocMatcher) {
                        // We can only match {$elemMatch: {b: 3}} against objects.
                        // (We can also match against arrays, if there's numeric indices,
                        // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)
                        if (!isIndexable(arrayElement)) {
                          return false;
                        }

                        arg = arrayElement;
                      } else {
                        // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches
                        // {a: [8]} but not {a: [[8]]}
                        arg = [{
                          value: arrayElement,
                          dontIterate: true
                        }];
                      } // XXX support $near in $elemMatch by propagating $distance?


                      if (subMatcher(arg).result) {
                        return i; // specially understood to mean "use as arrayIndices"
                      }
                    }

                    return false;
                  };
                }

              }
            };
            // Operators that appear at the top level of a document selector.
            const LOGICAL_OPERATORS = {
              $and(subSelector, matcher, inElemMatch) {
                return andDocumentMatchers(compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch));
              },

              $or(subSelector, matcher, inElemMatch) {
                const matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // Special case: if there is only one matcher, use it directly, *preserving*
                // any arrayIndices it returns.

                if (matchers.length === 1) {
                  return matchers[0];
                }

                return doc => {
                  const result = matchers.some(fn => fn(doc).result); // $or does NOT set arrayIndices when it has multiple
                  // sub-expressions. (Tested against MongoDB.)

                  return {
                    result
                  };
                };
              },

              $nor(subSelector, matcher, inElemMatch) {
                const matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);
                return doc => {
                  const result = matchers.every(fn => !fn(doc).result); // Never set arrayIndices, because we only match if nothing in particular
                  // 'matched' (and because this is consistent with MongoDB).

                  return {
                    result
                  };
                };
              },

              $where(selectorValue, matcher) {
                // Record that *any* path may be used.
                matcher._recordPathUsed('');

                matcher._hasWhere = true;

                if (!(selectorValue instanceof Function)) {
                  // XXX MongoDB seems to have more complex logic to decide where or or not
                  // to add 'return'; not sure exactly what it is.
                  selectorValue = Function('obj', "return ".concat(selectorValue));
                } // We make the document available as both `this` and `obj`.
                // // XXX not sure what we should do if this throws


                return doc => ({
                  result: selectorValue.call(doc, doc)
                });
              },

              // This is just used as a comment in the query (in MongoDB, it also ends up in
              // query logs); it has no effect on the actual selection.
              $comment() {
                return () => ({
                  result: true
                });
              }

            }; // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a
            // document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as
            // "match each branched value independently and combine with
            // convertElementMatcherToBranchedMatcher".

            const VALUE_OPERATORS = {
              $eq(operand) {
                return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand));
              },

              $not(operand, valueSelector, matcher) {
                return invertBranchedMatcher(compileValueSelector(operand, matcher));
              },

              $ne(operand) {
                return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)));
              },

              $nin(operand) {
                return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));
              },

              $exists(operand) {
                const exists = convertElementMatcherToBranchedMatcher(value => value !== undefined);
                return operand ? exists : invertBranchedMatcher(exists);
              },

              // $options just provides options for $regex; its logic is inside $regex
              $options(operand, valueSelector) {
                if (!hasOwn.call(valueSelector, '$regex')) {
                  throw Error('$options needs a $regex');
                }

                return everythingMatcher;
              },

              // $maxDistance is basically an argument to $near
              $maxDistance(operand, valueSelector) {
                if (!valueSelector.$near) {
                  throw Error('$maxDistance needs a $near');
                }

                return everythingMatcher;
              },

              $all(operand, valueSelector, matcher) {
                if (!Array.isArray(operand)) {
                  throw Error('$all requires array');
                } // Not sure why, but this seems to be what MongoDB does.


                if (operand.length === 0) {
                  return nothingMatcher;
                }

                const branchedMatchers = operand.map(criterion => {
                  // XXX handle $all/$elemMatch combination
                  if (isOperatorObject(criterion)) {
                    throw Error('no $ expressions in $all');
                  } // This is always a regexp or equality selector.


                  return compileValueSelector(criterion, matcher);
                }); // andBranchedMatchers does NOT require all selectors to return true on the
                // SAME branch.

                return andBranchedMatchers(branchedMatchers);
              },

              $near(operand, valueSelector, matcher, isRoot) {
                if (!isRoot) {
                  throw Error('$near can\'t be inside another $ operator');
                }

                matcher._hasGeoQuery = true; // There are two kinds of geodata in MongoDB: legacy coordinate pairs and
                // GeoJSON. They use different distance metrics, too. GeoJSON queries are
                // marked with a $geometry property, though legacy coordinates can be
                // matched using $geometry.

                let maxDistance, point, distance;

                if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {
                  // GeoJSON "2dsphere" mode.
                  maxDistance = operand.$maxDistance;
                  point = operand.$geometry;

                  distance = value => {
                    // XXX: for now, we don't calculate the actual distance between, say,
                    // polygon and circle. If people care about this use-case it will get
                    // a priority.
                    if (!value) {
                      return null;
                    }

                    if (!value.type) {
                      return GeoJSON.pointDistance(point, {
                        type: 'Point',
                        coordinates: pointToArray(value)
                      });
                    }

                    if (value.type === 'Point') {
                      return GeoJSON.pointDistance(point, value);
                    }

                    return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1;
                  };
                } else {
                  maxDistance = valueSelector.$maxDistance;

                  if (!isIndexable(operand)) {
                    throw Error('$near argument must be coordinate pair or GeoJSON');
                  }

                  point = pointToArray(operand);

                  distance = value => {
                    if (!isIndexable(value)) {
                      return null;
                    }

                    return distanceCoordinatePairs(point, value);
                  };
                }

                return branchedValues => {
                  // There might be multiple points in the document that match the given
                  // field. Only one of them needs to be within $maxDistance, but we need to
                  // evaluate all of them and use the nearest one for the implicit sort
                  // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)
                  //
                  // Note: This differs from MongoDB's implementation, where a document will
                  // actually show up *multiple times* in the result set, with one entry for
                  // each within-$maxDistance branching point.
                  const result = {
                    result: false
                  };
                  expandArraysInBranches(branchedValues).every(branch => {
                    // if operation is an update, don't skip branches, just return the first
                    // one (#3599)
                    let curDistance;

                    if (!matcher._isUpdate) {
                      if (!(typeof branch.value === 'object')) {
                        return true;
                      }

                      curDistance = distance(branch.value); // Skip branches that aren't real points or are too far away.

                      if (curDistance === null || curDistance > maxDistance) {
                        return true;
                      } // Skip anything that's a tie.


                      if (result.distance !== undefined && result.distance <= curDistance) {
                        return true;
                      }
                    }

                    result.result = true;
                    result.distance = curDistance;

                    if (branch.arrayIndices) {
                      result.arrayIndices = branch.arrayIndices;
                    } else {
                      delete result.arrayIndices;
                    }

                    return !matcher._isUpdate;
                  });
                  return result;
                };
              }

            }; // NB: We are cheating and using this function to implement 'AND' for both
            // 'document matchers' and 'branched matchers'. They both return result objects
            // but the argument is different: for the former it's a whole doc, whereas for
            // the latter it's an array of 'branched values'.

            function andSomeMatchers(subMatchers) {
              if (subMatchers.length === 0) {
                return everythingMatcher;
              }

              if (subMatchers.length === 1) {
                return subMatchers[0];
              }

              return docOrBranches => {
                const match = {};
                match.result = subMatchers.every(fn => {
                  const subResult = fn(docOrBranches); // Copy a 'distance' number out of the first sub-matcher that has
                  // one. Yes, this means that if there are multiple $near fields in a
                  // query, something arbitrary happens; this appears to be consistent with
                  // Mongo.

                  if (subResult.result && subResult.distance !== undefined && match.distance === undefined) {
                    match.distance = subResult.distance;
                  } // Similarly, propagate arrayIndices from sub-matchers... but to match
                  // MongoDB behavior, this time the *last* sub-matcher with arrayIndices
                  // wins.


                  if (subResult.result && subResult.arrayIndices) {
                    match.arrayIndices = subResult.arrayIndices;
                  }

                  return subResult.result;
                }); // If we didn't actually match, forget any extra metadata we came up with.

                if (!match.result) {
                  delete match.distance;
                  delete match.arrayIndices;
                }

                return match;
              };
            }

            const andDocumentMatchers = andSomeMatchers;
            const andBranchedMatchers = andSomeMatchers;

            function compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {
              if (!Array.isArray(selectors) || selectors.length === 0) {
                throw Error('$and/$or/$nor must be nonempty array');
              }

              return selectors.map(subSelector => {
                if (!LocalCollection._isPlainObject(subSelector)) {
                  throw Error('$or/$and/$nor entries need to be full objects');
                }

                return compileDocumentSelector(subSelector, matcher, {
                  inElemMatch
                });
              });
            } // Takes in a selector that could match a full document (eg, the original
            // selector). Returns a function mapping document->result object.
            //
            // matcher is the Matcher object we are compiling.
            //
            // If this is the root document selector (ie, not wrapped in $and or the like),
            // then isRoot is true. (This is used by $near.)


            function compileDocumentSelector(docSelector, matcher) {
              let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              const docMatchers = Object.keys(docSelector).map(key => {
                const subSelector = docSelector[key];

                if (key.substr(0, 1) === '$') {
                  // Outer operators are either logical operators (they recurse back into
                  // this function), or $where.
                  if (!hasOwn.call(LOGICAL_OPERATORS, key)) {
                    throw new Error("Unrecognized logical operator: ".concat(key));
                  }

                  matcher._isSimple = false;
                  return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);
                } // Record this path, but only if we aren't in an elemMatcher, since in an
                // elemMatch this is a path inside an object in an array, not in the doc
                // root.


                if (!options.inElemMatch) {
                  matcher._recordPathUsed(key);
                } // Don't add a matcher if subSelector is a function -- this is to match
                // the behavior of Meteor on the server (inherited from the node mongodb
                // driver), which is to ignore any part of a selector which is a function.


                if (typeof subSelector === 'function') {
                  return undefined;
                }

                const lookUpByIndex = makeLookupFunction(key);
                const valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot);
                return doc => valueMatcher(lookUpByIndex(doc));
              }).filter(Boolean);
              return andDocumentMatchers(docMatchers);
            }

            // Takes in a selector that could match a key-indexed value in a document; eg,
            // {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to
            // indicate equality).  Returns a branched matcher: a function mapping
            // [branched value]->result object.
            function compileValueSelector(valueSelector, matcher, isRoot) {
              if (valueSelector instanceof RegExp) {
                matcher._isSimple = false;
                return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector));
              }

              if (isOperatorObject(valueSelector)) {
                return operatorBranchedMatcher(valueSelector, matcher, isRoot);
              }

              return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector));
            } // Given an element matcher (which evaluates a single value), returns a branched
            // value (which evaluates the element matcher on all the branches and returns a
            // more structured return value possibly including arrayIndices).


            function convertElementMatcherToBranchedMatcher(elementMatcher) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              return branches => {
                const expanded = options.dontExpandLeafArrays ? branches : expandArraysInBranches(branches, options.dontIncludeLeafArrays);
                const match = {};
                match.result = expanded.some(element => {
                  let matched = elementMatcher(element.value); // Special case for $elemMatch: it means "true, and use this as an array
                  // index if I didn't already have one".

                  if (typeof matched === 'number') {
                    // XXX This code dates from when we only stored a single array index
                    // (for the outermost array). Should we be also including deeper array
                    // indices from the $elemMatch match?
                    if (!element.arrayIndices) {
                      element.arrayIndices = [matched];
                    }

                    matched = true;
                  } // If some element matched, and it's tagged with array indices, include
                  // those indices in our result object.


                  if (matched && element.arrayIndices) {
                    match.arrayIndices = element.arrayIndices;
                  }

                  return matched;
                });
                return match;
              };
            } // Helpers for $near.


            function distanceCoordinatePairs(a, b) {
              const pointA = pointToArray(a);
              const pointB = pointToArray(b);
              return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);
            } // Takes something that is not an operator object and returns an element matcher
            // for equality with that thing.


            function equalityElementMatcher(elementSelector) {
              if (isOperatorObject(elementSelector)) {
                throw Error('Can\'t create equalityValueSelector for operator object');
              } // Special-case: null and undefined are equal (if you got undefined in there
              // somewhere, or if you got it due to some branch being non-existent in the
              // weird special case), even though they aren't with EJSON.equals.
              // undefined or null


              if (elementSelector == null) {
                return value => value == null;
              }

              return value => LocalCollection._f._equal(elementSelector, value);
            }

            function everythingMatcher(docOrBranchedValues) {
              return {
                result: true
              };
            }

            function expandArraysInBranches(branches, skipTheArrays) {
              const branchesOut = [];
              branches.forEach(branch => {
                const thisIsArray = Array.isArray(branch.value); // We include the branch itself, *UNLESS* we it's an array that we're going
                // to iterate and we're told to skip arrays.  (That's right, we include some
                // arrays even skipTheArrays is true: these are arrays that were found via
                // explicit numerical indices.)

                if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {
                  branchesOut.push({
                    arrayIndices: branch.arrayIndices,
                    value: branch.value
                  });
                }

                if (thisIsArray && !branch.dontIterate) {
                  branch.value.forEach((value, i) => {
                    branchesOut.push({
                      arrayIndices: (branch.arrayIndices || []).concat(i),
                      value
                    });
                  });
                }
              });
              return branchesOut;
            }

            // Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.
            function getOperandBitmask(operand, selector) {
              // numeric bitmask
              // You can provide a numeric bitmask to be matched against the operand field.
              // It must be representable as a non-negative 32-bit signed integer.
              // Otherwise, $bitsAllSet will return an error.
              if (Number.isInteger(operand) && operand >= 0) {
                return new Uint8Array(new Int32Array([operand]).buffer);
              } // bindata bitmask
              // You can also use an arbitrarily large BinData instance as a bitmask.


              if (EJSON.isBinary(operand)) {
                return new Uint8Array(operand.buffer);
              } // position list
              // If querying a list of bit positions, each <position> must be a non-negative
              // integer. Bit positions start at 0 from the least significant bit.


              if (Array.isArray(operand) && operand.every(x => Number.isInteger(x) && x >= 0)) {
                const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);
                const view = new Uint8Array(buffer);
                operand.forEach(x => {
                  view[x >> 3] |= 1 << (x & 0x7);
                });
                return view;
              } // bad operand


              throw Error("operand to ".concat(selector, " must be a numeric bitmask (representable as a ") + 'non-negative 32-bit signed integer), a bindata bitmask or an array with ' + 'bit positions (non-negative integers)');
            }

            function getValueBitmask(value, length) {
              // The field value must be either numerical or a BinData instance. Otherwise,
              // $bits... will not match the current document.
              // numerical
              if (Number.isSafeInteger(value)) {
                // $bits... will not match numerical values that cannot be represented as a
                // signed 64-bit integer. This can be the case if a value is either too
                // large or small to fit in a signed 64-bit integer, or if it has a
                // fractional component.
                const buffer = new ArrayBuffer(Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT));
                let view = new Uint32Array(buffer, 0, 2);
                view[0] = value % ((1 << 16) * (1 << 16)) | 0;
                view[1] = value / ((1 << 16) * (1 << 16)) | 0; // sign extension

                if (value < 0) {
                  view = new Uint8Array(buffer, 2);
                  view.forEach((byte, i) => {
                    view[i] = 0xff;
                  });
                }

                return new Uint8Array(buffer);
              } // bindata


              if (EJSON.isBinary(value)) {
                return new Uint8Array(value.buffer);
              } // no match


              return false;
            } // Actually inserts a key value into the selector document
            // However, this checks there is no ambiguity in setting
            // the value for the given key, throws otherwise


            function insertIntoDocument(document, key, value) {
              Object.keys(document).forEach(existingKey => {
                if (existingKey.length > key.length && existingKey.indexOf("".concat(key, ".")) === 0 || key.length > existingKey.length && key.indexOf("".concat(existingKey, ".")) === 0) {
                  throw new Error("cannot infer query fields to set, both paths '".concat(existingKey, "' and ") + "'".concat(key, "' are matched"));
                } else if (existingKey === key) {
                  throw new Error("cannot infer query fields to set, path '".concat(key, "' is matched twice"));
                }
              });
              document[key] = value;
            } // Returns a branched matcher that matches iff the given matcher does not.
            // Note that this implicitly "deMorganizes" the wrapped function.  ie, it
            // means that ALL branch values need to fail to match innerBranchedMatcher.


            function invertBranchedMatcher(branchedMatcher) {
              return branchValues => {
                // We explicitly choose to strip arrayIndices here: it doesn't make sense to
                // say "update the array element that does not match something", at least
                // in mongo-land.
                return {
                  result: !branchedMatcher(branchValues).result
                };
              };
            }

            function isIndexable(obj) {
              return Array.isArray(obj) || LocalCollection._isPlainObject(obj);
            }

            function isNumericKey(s) {
              return (/^[0-9]+$/.test(s)
              );
            }

            function isOperatorObject(valueSelector, inconsistentOK) {
              if (!LocalCollection._isPlainObject(valueSelector)) {
                return false;
              }

              let theseAreOperators = undefined;
              Object.keys(valueSelector).forEach(selKey => {
                const thisIsOperator = selKey.substr(0, 1) === '$';

                if (theseAreOperators === undefined) {
                  theseAreOperators = thisIsOperator;
                } else if (theseAreOperators !== thisIsOperator) {
                  if (!inconsistentOK) {
                    throw new Error("Inconsistent operator: ".concat(JSON.stringify(valueSelector)));
                  }

                  theseAreOperators = false;
                }
              });
              return !!theseAreOperators; // {} has no operators
            }

            // Helper for $lt/$gt/$lte/$gte.
            function makeInequality(cmpValueComparator) {
              return {
                compileElementSelector(operand) {
                  // Arrays never compare false with non-arrays for any inequality.
                  // XXX This was behavior we observed in pre-release MongoDB 2.5, but
                  //     it seems to have been reverted.
                  //     See https://jira.mongodb.org/browse/SERVER-11444
                  if (Array.isArray(operand)) {
                    return () => false;
                  } // Special case: consider undefined and null the same (so true with
                  // $gte/$lte).


                  if (operand === undefined) {
                    operand = null;
                  }

                  const operandType = LocalCollection._f._type(operand);

                  return value => {
                    if (value === undefined) {
                      value = null;
                    } // Comparisons are never true among things of different type (except
                    // null vs undefined).


                    if (LocalCollection._f._type(value) !== operandType) {
                      return false;
                    }

                    return cmpValueComparator(LocalCollection._f._cmp(value, operand));
                  };
                }

              };
            } // makeLookupFunction(key) returns a lookup function.
            //
            // A lookup function takes in a document and returns an array of matching
            // branches.  If no arrays are found while looking up the key, this array will
            // have exactly one branches (possibly 'undefined', if some segment of the key
            // was not found).
            //
            // If arrays are found in the middle, this can have more than one element, since
            // we 'branch'. When we 'branch', if there are more key segments to look up,
            // then we only pursue branches that are plain objects (not arrays or scalars).
            // This means we can actually end up with no branches!
            //
            // We do *NOT* branch on arrays that are found at the end (ie, at the last
            // dotted member of the key). We just return that array; if you want to
            // effectively 'branch' over the array's values, post-process the lookup
            // function with expandArraysInBranches.
            //
            // Each branch is an object with keys:
            //  - value: the value at the branch
            //  - dontIterate: an optional bool; if true, it means that 'value' is an array
            //    that expandArraysInBranches should NOT expand. This specifically happens
            //    when there is a numeric index in the key, and ensures the
            //    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT
            //    match {a: [[5]]}.
            //  - arrayIndices: if any array indexing was done during lookup (either due to
            //    explicit numeric indices or implicit branching), this will be an array of
            //    the array indices used, from outermost to innermost; it is falsey or
            //    absent if no array index is used. If an explicit numeric index is used,
            //    the index will be followed in arrayIndices by the string 'x'.
            //
            //    Note: arrayIndices is used for two purposes. First, it is used to
            //    implement the '$' modifier feature, which only ever looks at its first
            //    element.
            //
            //    Second, it is used for sort key generation, which needs to be able to tell
            //    the difference between different paths. Moreover, it needs to
            //    differentiate between explicit and implicit branching, which is why
            //    there's the somewhat hacky 'x' entry: this means that explicit and
            //    implicit array lookups will have different full arrayIndices paths. (That
            //    code only requires that different paths have different arrayIndices; it
            //    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices
            //    could contain objects with flags like 'implicit', but I think that only
            //    makes the code surrounding them more complex.)
            //
            //    (By the way, this field ends up getting passed around a lot without
            //    cloning, so never mutate any arrayIndices field/var in this package!)
            //
            //
            // At the top level, you may only pass in a plain object or array.
            //
            // See the test 'minimongo - lookup' for some examples of what lookup functions
            // return.


            function makeLookupFunction(key) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              const parts = key.split('.');
              const firstPart = parts.length ? parts[0] : '';
              const lookupRest = parts.length > 1 && makeLookupFunction(parts.slice(1).join('.'), options);

              const omitUnnecessaryFields = result => {
                if (!result.dontIterate) {
                  delete result.dontIterate;
                }

                if (result.arrayIndices && !result.arrayIndices.length) {
                  delete result.arrayIndices;
                }

                return result;
              }; // Doc will always be a plain object or an array.
              // apply an explicit numeric index, an array.


              return function (doc) {
                let arrayIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

                if (Array.isArray(doc)) {
                  // If we're being asked to do an invalid lookup into an array (non-integer
                  // or out-of-bounds), return no results (which is different from returning
                  // a single undefined result, in that `null` equality checks won't match).
                  if (!(isNumericKey(firstPart) && firstPart < doc.length)) {
                    return [];
                  } // Remember that we used this array index. Include an 'x' to indicate that
                  // the previous index came from being considered as an explicit array
                  // index (not branching).


                  arrayIndices = arrayIndices.concat(+firstPart, 'x');
                } // Do our first lookup.


                const firstLevel = doc[firstPart]; // If there is no deeper to dig, return what we found.
                //
                // If what we found is an array, most value selectors will choose to treat
                // the elements of the array as matchable values in their own right, but
                // that's done outside of the lookup function. (Exceptions to this are $size
                // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:
                // [[1, 2]]}.)
                //
                // That said, if we just did an *explicit* array lookup (on doc) to find
                // firstLevel, and firstLevel is an array too, we do NOT want value
                // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.
                // So in that case, we mark the return value as 'don't iterate'.

                if (!lookupRest) {
                  return [omitUnnecessaryFields({
                    arrayIndices,
                    dontIterate: Array.isArray(doc) && Array.isArray(firstLevel),
                    value: firstLevel
                  })];
                } // We need to dig deeper.  But if we can't, because what we've found is not
                // an array or plain object, we're done. If we just did a numeric index into
                // an array, we return nothing here (this is a change in Mongo 2.5 from
                // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,
                // return a single `undefined` (which can, for example, match via equality
                // with `null`).


                if (!isIndexable(firstLevel)) {
                  if (Array.isArray(doc)) {
                    return [];
                  }

                  return [omitUnnecessaryFields({
                    arrayIndices,
                    value: undefined
                  })];
                }

                const result = [];

                const appendToResult = more => {
                  result.push(...more);
                }; // Dig deeper: look up the rest of the parts on whatever we've found.
                // (lookupRest is smart enough to not try to do invalid lookups into
                // firstLevel if it's an array.)


                appendToResult(lookupRest(firstLevel, arrayIndices)); // If we found an array, then in *addition* to potentially treating the next
                // part as a literal integer lookup, we should also 'branch': try to look up
                // the rest of the parts on each array element in parallel.
                //
                // In this case, we *only* dig deeper into array elements that are plain
                // objects. (Recall that we only got this far if we have further to dig.)
                // This makes sense: we certainly don't dig deeper into non-indexable
                // objects. And it would be weird to dig into an array: it's simpler to have
                // a rule that explicit integer indexes only apply to an outer array, not to
                // an array you find after a branching search.
                //
                // In the special case of a numeric part in a *sort selector* (not a query
                // selector), we skip the branching: we ONLY allow the numeric part to mean
                // 'look up this index' in that case, not 'also look up this index in all
                // the elements of the array'.

                if (Array.isArray(firstLevel) && !(isNumericKey(parts[1]) && options.forSort)) {
                  firstLevel.forEach((branch, arrayIndex) => {
                    if (LocalCollection._isPlainObject(branch)) {
                      appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));
                    }
                  });
                }

                return result;
              };
            }

            // Object exported only for unit testing.
            // Use it to export private functions to test in Tinytest.
            MinimongoTest = {
              makeLookupFunction
            };

            MinimongoError = function (message) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (typeof message === 'string' && options.field) {
                message += " for field '".concat(options.field, "'");
              }

              const error = new Error(message);
              error.name = 'MinimongoError';
              return error;
            };

            function nothingMatcher(docOrBranchedValues) {
              return {
                result: false
              };
            }

            // Takes an operator object (an object with $ keys) and returns a branched
            // matcher for it.
            function operatorBranchedMatcher(valueSelector, matcher, isRoot) {
              // Each valueSelector works separately on the various branches.  So one
              // operator can match one branch and another can match another branch.  This
              // is OK.
              const operatorMatchers = Object.keys(valueSelector).map(operator => {
                const operand = valueSelector[operator];
                const simpleRange = ['$lt', '$lte', '$gt', '$gte'].includes(operator) && typeof operand === 'number';
                const simpleEquality = ['$ne', '$eq'].includes(operator) && operand !== Object(operand);
                const simpleInclusion = ['$in', '$nin'].includes(operator) && Array.isArray(operand) && !operand.some(x => x === Object(x));

                if (!(simpleRange || simpleInclusion || simpleEquality)) {
                  matcher._isSimple = false;
                }

                if (hasOwn.call(VALUE_OPERATORS, operator)) {
                  return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);
                }

                if (hasOwn.call(ELEMENT_OPERATORS, operator)) {
                  const options = ELEMENT_OPERATORS[operator];
                  return convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options);
                }

                throw new Error("Unrecognized operator: ".concat(operator));
              });
              return andBranchedMatchers(operatorMatchers);
            } // paths - Array: list of mongo style paths
            // newLeafFn - Function: of form function(path) should return a scalar value to
            //                       put into list created for that path
            // conflictFn - Function: of form function(node, path, fullPath) is called
            //                        when building a tree path for 'fullPath' node on
            //                        'path' was already a leaf with a value. Must return a
            //                        conflict resolution.
            // initial tree - Optional Object: starting tree.
            // @returns - Object: tree represented as a set of nested objects


            function pathsToTree(paths, newLeafFn, conflictFn) {
              let root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
              paths.forEach(path => {
                const pathArray = path.split('.');
                let tree = root; // use .every just for iteration with break

                const success = pathArray.slice(0, -1).every((key, i) => {
                  if (!hasOwn.call(tree, key)) {
                    tree[key] = {};
                  } else if (tree[key] !== Object(tree[key])) {
                    tree[key] = conflictFn(tree[key], pathArray.slice(0, i + 1).join('.'), path); // break out of loop if we are failing for this path

                    if (tree[key] !== Object(tree[key])) {
                      return false;
                    }
                  }

                  tree = tree[key];
                  return true;
                });

                if (success) {
                  const lastKey = pathArray[pathArray.length - 1];

                  if (hasOwn.call(tree, lastKey)) {
                    tree[lastKey] = conflictFn(tree[lastKey], path, path);
                  } else {
                    tree[lastKey] = newLeafFn(path);
                  }
                }
              });
              return root;
            }

            // Makes sure we get 2 elements array and assume the first one to be x and
            // the second one to y no matter what user passes.
            // In case user passes { lon: x, lat: y } returns [x, y]
            function pointToArray(point) {
              return Array.isArray(point) ? point.slice() : [point.x, point.y];
            } // Creating a document from an upsert is quite tricky.
            // E.g. this selector: {"$or": [{"b.foo": {"$all": ["bar"]}}]}, should result
            // in: {"b.foo": "bar"}
            // But this selector: {"$or": [{"b": {"foo": {"$all": ["bar"]}}}]} should throw
            // an error
            // Some rules (found mainly with trial & error, so there might be more):
            // - handle all childs of $and (or implicit $and)
            // - handle $or nodes with exactly 1 child
            // - ignore $or nodes with more than 1 child
            // - ignore $nor and $not nodes
            // - throw when a value can not be set unambiguously
            // - every value for $all should be dealt with as separate $eq-s
            // - threat all children of $all as $eq setters (=> set if $all.length === 1,
            //   otherwise throw error)
            // - you can not mix '$'-prefixed keys and non-'$'-prefixed keys
            // - you can only have dotted keys on a root-level
            // - you can not have '$'-prefixed keys more than one-level deep in an object
            // Handles one key/value pair to put in the selector document


            function populateDocumentWithKeyValue(document, key, value) {
              if (value && Object.getPrototypeOf(value) === Object.prototype) {
                populateDocumentWithObject(document, key, value);
              } else if (!(value instanceof RegExp)) {
                insertIntoDocument(document, key, value);
              }
            } // Handles a key, value pair to put in the selector document
            // if the value is an object


            function populateDocumentWithObject(document, key, value) {
              const keys = Object.keys(value);
              const unprefixedKeys = keys.filter(op => op[0] !== '$');

              if (unprefixedKeys.length > 0 || !keys.length) {
                // Literal (possibly empty) object ( or empty object )
                // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields
                if (keys.length !== unprefixedKeys.length) {
                  throw new Error("unknown operator: ".concat(unprefixedKeys[0]));
                }

                validateObject(value, key);
                insertIntoDocument(document, key, value);
              } else {
                Object.keys(value).forEach(op => {
                  const object = value[op];

                  if (op === '$eq') {
                    populateDocumentWithKeyValue(document, key, object);
                  } else if (op === '$all') {
                    // every value for $all should be dealt with as separate $eq-s
                    object.forEach(element => populateDocumentWithKeyValue(document, key, element));
                  }
                });
              }
            } // Fills a document with certain fields from an upsert selector


            function populateDocumentWithQueryFields(query) {
              let document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (Object.getPrototypeOf(query) === Object.prototype) {
                // handle implicit $and
                Object.keys(query).forEach(key => {
                  const value = query[key];

                  if (key === '$and') {
                    // handle explicit $and
                    value.forEach(element => populateDocumentWithQueryFields(element, document));
                  } else if (key === '$or') {
                    // handle $or nodes with exactly 1 child
                    if (value.length === 1) {
                      populateDocumentWithQueryFields(value[0], document);
                    }
                  } else if (key[0] !== '$') {
                    // Ignore other '$'-prefixed logical selectors
                    populateDocumentWithKeyValue(document, key, value);
                  }
                });
              } else {
                // Handle meteor-specific shortcut for selecting _id
                if (LocalCollection._selectorIsId(query)) {
                  insertIntoDocument(document, '_id', query);
                }
              }

              return document;
            }

            function projectionDetails(fields) {
              // Find the non-_id keys (_id is handled specially because it is included
              // unless explicitly excluded). Sort the keys, so that our code to detect
              // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.
              let fieldsKeys = Object.keys(fields).sort(); // If _id is the only field in the projection, do not remove it, since it is
              // required to determine if this is an exclusion or exclusion. Also keep an
              // inclusive _id, since inclusive _id follows the normal rules about mixing
              // inclusive and exclusive fields. If _id is not the only field in the
              // projection and is exclusive, remove it so it can be handled later by a
              // special case, since exclusive _id is always allowed.

              if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') && !(fieldsKeys.includes('_id') && fields._id)) {
                fieldsKeys = fieldsKeys.filter(key => key !== '_id');
              }

              let including = null; // Unknown

              fieldsKeys.forEach(keyPath => {
                const rule = !!fields[keyPath];

                if (including === null) {
                  including = rule;
                } // This error message is copied from MongoDB shell


                if (including !== rule) {
                  throw MinimongoError('You cannot currently mix including and excluding fields.');
                }
              });
              const projectionRulesTree = pathsToTree(fieldsKeys, path => including, (node, path, fullPath) => {
                // Check passed projection fields' keys: If you have two rules such as
                // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If
                // that happens, there is a probability you are doing something wrong,
                // framework should notify you about such mistake earlier on cursor
                // compilation step than later during runtime.  Note, that real mongo
                // doesn't do anything about it and the later rule appears in projection
                // project, more priority it takes.
                //
                // Example, assume following in mongo shell:
                // > db.coll.insert({ a: { b: 23, c: 44 } })
                // > db.coll.find({}, { 'a': 1, 'a.b': 1 })
                // {"_id": ObjectId("520bfe456024608e8ef24af3"), "a": {"b": 23}}
                // > db.coll.find({}, { 'a.b': 1, 'a': 1 })
                // {"_id": ObjectId("520bfe456024608e8ef24af3"), "a": {"b": 23, "c": 44}}
                //
                // Note, how second time the return set of keys is different.
                const currentPath = fullPath;
                const anotherPath = path;
                throw MinimongoError("both ".concat(currentPath, " and ").concat(anotherPath, " found in fields option, ") + 'using both of them may trigger unexpected behavior. Did you mean to ' + 'use only one of them?');
              });
              return {
                including,
                tree: projectionRulesTree
              };
            }

            function regexpElementMatcher(regexp) {
              return value => {
                if (value instanceof RegExp) {
                  return value.toString() === regexp.toString();
                } // Regexps only work against strings.


                if (typeof value !== 'string') {
                  return false;
                } // Reset regexp's state to avoid inconsistent matching for objects with the
                // same value on consecutive calls of regexp.test. This happens only if the
                // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for
                // which we should *not* change the lastIndex but MongoDB doesn't support
                // either of these flags.


                regexp.lastIndex = 0;
                return regexp.test(value);
              };
            }

            // Validates the key in a path.
            // Objects that are nested more then 1 level cannot have dotted fields
            // or fields starting with '$'
            function validateKeyInPath(key, path) {
              if (key.includes('.')) {
                throw new Error("The dotted field '".concat(key, "' in '").concat(path, ".").concat(key, " is not valid for storage."));
              }

              if (key[0] === '$') {
                throw new Error("The dollar ($) prefixed field  '".concat(path, ".").concat(key, " is not valid for storage."));
              }
            } // Recursively validates an object that is nested more than one level deep


            function validateObject(object, path) {
              if (object && Object.getPrototypeOf(object) === Object.prototype) {
                Object.keys(object).forEach(key => {
                  validateKeyInPath(key, path);
                  validateObject(object[key], path + '.' + key);
                });
              }
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "cursor.js": function module(_require4, _exports4, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/cursor.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module3.export({
              default: () => Cursor
            });
            let LocalCollection;
            _module3.link("./local_collection.js", {
              default(v) {
                LocalCollection = v;
              }

            }, 0);
            let hasOwn;
            _module3.link("./common.js", {
              hasOwn(v) {
                hasOwn = v;
              }

            }, 1);

            class Cursor {
              // don't call this ctor directly.  use LocalCollection.find().
              constructor(collection, selector) {
                let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                this.collection = collection;
                this.sorter = null;
                this.matcher = new Minimongo.Matcher(selector);

                if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {
                  // stash for fast _id and { _id }
                  this._selectorId = hasOwn.call(selector, '_id') ? selector._id : selector;
                } else {
                  this._selectorId = undefined;

                  if (this.matcher.hasGeoQuery() || options.sort) {
                    this.sorter = new Minimongo.Sorter(options.sort || []);
                  }
                }

                this.skip = options.skip || 0;
                this.limit = options.limit;
                this.fields = options.fields;
                this._projectionFn = LocalCollection._compileProjection(this.fields || {});
                this._transform = LocalCollection.wrapTransform(options.transform); // by default, queries register w/ Tracker when it is available.

                if (typeof Tracker !== 'undefined') {
                  this.reactive = options.reactive === undefined ? true : options.reactive;
                }
              }
              /**
               * @summary Returns the number of documents that match a query.
               * @memberOf Mongo.Cursor
               * @method  count
               * @param {boolean} [applySkipLimit=true] If set to `false`, the value
               *                                         returned will reflect the total
               *                                         number of matching documents,
               *                                         ignoring any value supplied for
               *                                         limit
               * @instance
               * @locus Anywhere
               * @returns {Number}
               */

              count() {
                let applySkipLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

                if (this.reactive) {
                  // allow the observe to be unordered
                  this._depend({
                    added: true,
                    removed: true
                  }, true);
                }

                return this._getRawObjects({
                  ordered: true,
                  applySkipLimit
                }).length;
              }
              /**
               * @summary Return all matching documents as an Array.
               * @memberOf Mongo.Cursor
               * @method  fetch
               * @instance
               * @locus Anywhere
               * @returns {Object[]}
               */

              fetch() {
                const result = [];
                this.forEach(doc => {
                  result.push(doc);
                });
                return result;
              }

              [Symbol.iterator]() {
                if (this.reactive) {
                  this._depend({
                    addedBefore: true,
                    removed: true,
                    changed: true,
                    movedBefore: true
                  });
                }

                let index = 0;

                const objects = this._getRawObjects({
                  ordered: true
                });

                return {
                  next: () => {
                    if (index < objects.length) {
                      // This doubles as a clone operation.
                      let element = this._projectionFn(objects[index++]);

                      if (this._transform) element = this._transform(element);
                      return {
                        value: element
                      };
                    }

                    return {
                      done: true
                    };
                  }
                };
              }
              /**
               * @callback IterationCallback
               * @param {Object} doc
               * @param {Number} index
               */

              /**
               * @summary Call `callback` once for each matching document, sequentially and
               *          synchronously.
               * @locus Anywhere
               * @method  forEach
               * @instance
               * @memberOf Mongo.Cursor
               * @param {IterationCallback} callback Function to call. It will be called
               *                                     with three arguments: the document, a
               *                                     0-based index, and <em>cursor</em>
               *                                     itself.
               * @param {Any} [thisArg] An object which will be the value of `this` inside
               *                        `callback`.
               */

              forEach(callback, thisArg) {
                if (this.reactive) {
                  this._depend({
                    addedBefore: true,
                    removed: true,
                    changed: true,
                    movedBefore: true
                  });
                }

                this._getRawObjects({
                  ordered: true
                }).forEach((element, i) => {
                  // This doubles as a clone operation.
                  element = this._projectionFn(element);

                  if (this._transform) {
                    element = this._transform(element);
                  }

                  callback.call(thisArg, element, i, this);
                });
              }

              getTransform() {
                return this._transform;
              }
              /**
               * @summary Map callback over all matching documents.  Returns an Array.
               * @locus Anywhere
               * @method map
               * @instance
               * @memberOf Mongo.Cursor
               * @param {IterationCallback} callback Function to call. It will be called
               *                                     with three arguments: the document, a
               *                                     0-based index, and <em>cursor</em>
               *                                     itself.
               * @param {Any} [thisArg] An object which will be the value of `this` inside
               *                        `callback`.
               */

              map(callback, thisArg) {
                const result = [];
                this.forEach((doc, i) => {
                  result.push(callback.call(thisArg, doc, i, this));
                });
                return result;
              } // options to contain:
              //  * callbacks for observe():
              //    - addedAt (document, atIndex)
              //    - added (document)
              //    - changedAt (newDocument, oldDocument, atIndex)
              //    - changed (newDocument, oldDocument)
              //    - removedAt (document, atIndex)
              //    - removed (document)
              //    - movedTo (document, oldIndex, newIndex)
              //
              // attributes available on returned query handle:
              //  * stop(): end updates
              //  * collection: the collection this query is querying
              //
              // iff x is a returned query handle, (x instanceof
              // LocalCollection.ObserveHandle) is true
              //
              // initial results delivered through added callback
              // XXX maybe callbacks should take a list of objects, to expose transactions?
              // XXX maybe support field limiting (to limit what you're notified on)

              /**
               * @summary Watch a query.  Receive callbacks as the result set changes.
               * @locus Anywhere
               * @memberOf Mongo.Cursor
               * @instance
               * @param {Object} callbacks Functions to call to deliver the result set as it
               *                           changes
               */

              observe(options) {
                return LocalCollection._observeFromObserveChanges(this, options);
              }
              /**
               * @summary Watch a query. Receive callbacks as the result set changes. Only
               *          the differences between the old and new documents are passed to
               *          the callbacks.
               * @locus Anywhere
               * @memberOf Mongo.Cursor
               * @instance
               * @param {Object} callbacks Functions to call to deliver the result set as it
               *                           changes
               */

              observeChanges(options) {
                const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options); // there are several places that assume you aren't combining skip/limit with
                // unordered observe.  eg, update's EJSON.clone, and the "there are several"
                // comment in _modifyAndNotify
                // XXX allow skip/limit with unordered observe


                if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {
                  throw new Error("Must use an ordered observe with skip or limit (i.e. 'addedBefore' " + "for observeChanges or 'addedAt' for observe, instead of 'added').");
                }

                if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {
                  throw Error('You may not observe a cursor with {fields: {_id: 0}}');
                }

                const distances = this.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap();
                const query = {
                  cursor: this,
                  dirty: false,
                  distances,
                  matcher: this.matcher,
                  // not fast pathed
                  ordered,
                  projectionFn: this._projectionFn,
                  resultsSnapshot: null,
                  sorter: ordered && this.sorter
                };
                let qid; // Non-reactive queries call added[Before] and then never call anything
                // else.

                if (this.reactive) {
                  qid = this.collection.next_qid++;
                  this.collection.queries[qid] = query;
                }

                query.results = this._getRawObjects({
                  ordered,
                  distances: query.distances
                });

                if (this.collection.paused) {
                  query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap();
                } // wrap callbacks we were passed. callbacks only fire when not paused and
                // are never undefined
                // Filters out blacklisted fields according to cursor's projection.
                // XXX wrong place for this?
                // furthermore, callbacks enqueue until the operation we're working on is
                // done.


                const wrapCallback = fn => {
                  if (!fn) {
                    return () => {};
                  }

                  const self = this;
                  return function ()
                  /* args*/
                  {
                    if (self.collection.paused) {
                      return;
                    }

                    const args = arguments;

                    self.collection._observeQueue.queueTask(() => {
                      fn.apply(this, args);
                    });
                  };
                };

                query.added = wrapCallback(options.added);
                query.changed = wrapCallback(options.changed);
                query.removed = wrapCallback(options.removed);

                if (ordered) {
                  query.addedBefore = wrapCallback(options.addedBefore);
                  query.movedBefore = wrapCallback(options.movedBefore);
                }

                if (!options._suppress_initial && !this.collection.paused) {
                  query.results.forEach(doc => {
                    const fields = EJSON.clone(doc);
                    delete fields._id;

                    if (ordered) {
                      query.addedBefore(doc._id, this._projectionFn(fields), null);
                    }

                    query.added(doc._id, this._projectionFn(fields));
                  });
                }

                const handle = Object.assign(new LocalCollection.ObserveHandle(), {
                  collection: this.collection,
                  stop: () => {
                    if (this.reactive) {
                      delete this.collection.queries[qid];
                    }
                  }
                });

                if (this.reactive && Tracker.active) {
                  // XXX in many cases, the same observe will be recreated when
                  // the current autorun is rerun.  we could save work by
                  // letting it linger across rerun and potentially get
                  // repurposed if the same observe is performed, using logic
                  // similar to that of Meteor.subscribe.
                  Tracker.onInvalidate(() => {
                    handle.stop();
                  });
                } // run the observe callbacks resulting from the initial contents
                // before we leave the observe.


                this.collection._observeQueue.drain();

                return handle;
              } // Since we don't actually have a "nextObject" interface, there's really no
              // reason to have a "rewind" interface.  All it did was make multiple calls
              // to fetch/map/forEach return nothing the second time.
              // XXX COMPAT WITH 0.8.1


              rewind() {} // XXX Maybe we need a version of observe that just calls a callback if
              // anything changed.


              _depend(changers, _allow_unordered) {
                if (Tracker.active) {
                  const dependency = new Tracker.Dependency();
                  const notify = dependency.changed.bind(dependency);
                  dependency.depend();
                  const options = {
                    _allow_unordered,
                    _suppress_initial: true
                  };
                  ['added', 'addedBefore', 'changed', 'movedBefore', 'removed'].forEach(fn => {
                    if (changers[fn]) {
                      options[fn] = notify;
                    }
                  }); // observeChanges will stop() when this computation is invalidated

                  this.observeChanges(options);
                }
              }

              _getCollectionName() {
                return this.collection.name;
              } // Returns a collection of matching objects, but doesn't deep copy them.
              //
              // If ordered is set, returns a sorted array, respecting sorter, skip, and
              // limit properties of the query provided that options.applySkipLimit is
              // not set to false (#1201). If sorter is falsey, no sort -- you get the
              // natural order.
              //
              // If ordered is not set, returns an object mapping from ID to doc (sorter,
              // skip and limit should not be set).
              //
              // If ordered is set and this cursor is a $near geoquery, then this function
              // will use an _IdMap to track each distance from the $near argument point in
              // order to use it as a sort key. If an _IdMap is passed in the 'distances'
              // argument, this function will clear it and use it for this purpose
              // (otherwise it will just create its own _IdMap). The observeChanges
              // implementation uses this to remember the distances after this function
              // returns.


              _getRawObjects() {
                let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                // By default this method will respect skip and limit because .fetch(),
                // .forEach() etc... expect this behaviour. It can be forced to ignore
                // skip and limit by setting applySkipLimit to false (.count() does this,
                // for example)
                const applySkipLimit = options.applySkipLimit !== false; // XXX use OrderedDict instead of array, and make IdMap and OrderedDict
                // compatible

                const results = options.ordered ? [] : new LocalCollection._IdMap(); // fast path for single ID value

                if (this._selectorId !== undefined) {
                  // If you have non-zero skip and ask for a single id, you get nothing.
                  // This is so it matches the behavior of the '{_id: foo}' path.
                  if (applySkipLimit && this.skip) {
                    return results;
                  }

                  const selectedDoc = this.collection._docs.get(this._selectorId);

                  if (selectedDoc) {
                    if (options.ordered) {
                      results.push(selectedDoc);
                    } else {
                      results.set(this._selectorId, selectedDoc);
                    }
                  }

                  return results;
                } // slow path for arbitrary selector, sort, skip, limit
                // in the observeChanges case, distances is actually part of the "query"
                // (ie, live results set) object.  in other cases, distances is only used
                // inside this function.


                let distances;

                if (this.matcher.hasGeoQuery() && options.ordered) {
                  if (options.distances) {
                    distances = options.distances;
                    distances.clear();
                  } else {
                    distances = new LocalCollection._IdMap();
                  }
                }

                this.collection._docs.forEach((doc, id) => {
                  const matchResult = this.matcher.documentMatches(doc);

                  if (matchResult.result) {
                    if (options.ordered) {
                      results.push(doc);

                      if (distances && matchResult.distance !== undefined) {
                        distances.set(id, matchResult.distance);
                      }
                    } else {
                      results.set(id, doc);
                    }
                  } // Override to ensure all docs are matched if ignoring skip & limit


                  if (!applySkipLimit) {
                    return true;
                  } // Fast path for limited unsorted queries.
                  // XXX 'length' check here seems wrong for ordered


                  return !this.limit || this.skip || this.sorter || results.length !== this.limit;
                });

                if (!options.ordered) {
                  return results;
                }

                if (this.sorter) {
                  results.sort(this.sorter.getComparator({
                    distances
                  }));
                } // Return the full set of results if there is no skip or limit or if we're
                // ignoring them


                if (!applySkipLimit || !this.limit && !this.skip) {
                  return results;
                }

                return results.slice(this.skip, this.limit ? this.limit + this.skip : results.length);
              }

              _publishCursor(subscription) {
                // XXX minimongo should not depend on mongo-livedata!
                if (!Package.mongo) {
                  throw new Error('Can\'t publish from Minimongo without the `mongo` package.');
                }

                if (!this.collection.name) {
                  throw new Error('Can\'t publish a cursor from a collection without a name.');
                }

                return Package.mongo.Mongo.Collection._publishCursor(this, subscription, this.collection.name);
              }

            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "local_collection.js": function module(_require5, _exports5, _module4) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/local_collection.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module4.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            _module4.export({
              default: () => LocalCollection
            });
            let Cursor;
            _module4.link("./cursor.js", {
              default(v) {
                Cursor = v;
              }

            }, 0);
            let ObserveHandle;
            _module4.link("./observe_handle.js", {
              default(v) {
                ObserveHandle = v;
              }

            }, 1);
            let hasOwn, isIndexable, isNumericKey, isOperatorObject, populateDocumentWithQueryFields, projectionDetails;
            _module4.link("./common.js", {
              hasOwn(v) {
                hasOwn = v;
              },

              isIndexable(v) {
                isIndexable = v;
              },

              isNumericKey(v) {
                isNumericKey = v;
              },

              isOperatorObject(v) {
                isOperatorObject = v;
              },

              populateDocumentWithQueryFields(v) {
                populateDocumentWithQueryFields = v;
              },

              projectionDetails(v) {
                projectionDetails = v;
              }

            }, 2);

            class LocalCollection {
              constructor(name) {
                this.name = name; // _id -> document (also containing id)

                this._docs = new LocalCollection._IdMap();
                this._observeQueue = new Meteor._SynchronousQueue();
                this.next_qid = 1; // live query id generator
                // qid -> live query object. keys:
                //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.
                //  results: array (ordered) or object (unordered) of current results
                //    (aliased with this._docs!)
                //  resultsSnapshot: snapshot of results. null if not paused.
                //  cursor: Cursor object for the query.
                //  selector, sorter, (callbacks): functions

                this.queries = Object.create(null); // null if not saving originals; an IdMap from id to original document value
                // if saving originals. See comments before saveOriginals().

                this._savedOriginals = null; // True when observers are paused and we should not send callbacks.

                this.paused = false;
              } // options may include sort, skip, limit, reactive
              // sort may be any of these forms:
              //     {a: 1, b: -1}
              //     [["a", "asc"], ["b", "desc"]]
              //     ["a", ["b", "desc"]]
              //   (in the first form you're beholden to key enumeration order in
              //   your javascript VM)
              //
              // reactive: if given, and false, don't register with Tracker (default
              // is true)
              //
              // XXX possibly should support retrieving a subset of fields? and
              // have it be a hint (ignored on the client, when not copying the
              // doc?)
              //
              // XXX sort does not yet support subkeys ('a.b') .. fix that!
              // XXX add one more sort form: "key"
              // XXX tests


              find(selector, options) {
                // default syntax for everything is to omit the selector argument.
                // but if selector is explicitly passed in as false or undefined, we
                // want a selector that matches nothing.
                if (arguments.length === 0) {
                  selector = {};
                }

                return new LocalCollection.Cursor(this, selector, options);
              }

              findOne(selector) {
                let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                if (arguments.length === 0) {
                  selector = {};
                } // NOTE: by setting limit 1 here, we end up using very inefficient
                // code that recomputes the whole query on each update. The upside is
                // that when you reactively depend on a findOne you only get
                // invalidated when the found object changes, not any object in the
                // collection. Most findOne will be by id, which has a fast path, so
                // this might not be a big deal. In most cases, invalidation causes
                // the called to re-query anyway, so this should be a net performance
                // improvement.


                options.limit = 1;
                return this.find(selector, options).fetch()[0];
              } // XXX possibly enforce that 'undefined' does not appear (we assume
              // this in our handling of null and $exists)


              insert(doc, callback) {
                doc = EJSON.clone(doc);
                assertHasValidFieldNames(doc); // if you really want to use ObjectIDs, set this global.
                // Mongo.Collection specifies its own ids and does not use this code.

                if (!hasOwn.call(doc, '_id')) {
                  doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();
                }

                const id = doc._id;

                if (this._docs.has(id)) {
                  throw MinimongoError("Duplicate _id '".concat(id, "'"));
                }

                this._saveOriginal(id, undefined);

                this._docs.set(id, doc);

                const queriesToRecompute = []; // trigger live queries that match

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    return;
                  }

                  const matchResult = query.matcher.documentMatches(doc);

                  if (matchResult.result) {
                    if (query.distances && matchResult.distance !== undefined) {
                      query.distances.set(id, matchResult.distance);
                    }

                    if (query.cursor.skip || query.cursor.limit) {
                      queriesToRecompute.push(qid);
                    } else {
                      LocalCollection._insertInResults(query, doc);
                    }
                  }
                });
                queriesToRecompute.forEach(qid => {
                  if (this.queries[qid]) {
                    this._recomputeResults(this.queries[qid]);
                  }
                });

                this._observeQueue.drain(); // Defer because the caller likely doesn't expect the callback to be run
                // immediately.


                if (callback) {
                  Meteor.defer(() => {
                    callback(null, id);
                  });
                }

                return id;
              } // Pause the observers. No callbacks from observers will fire until
              // 'resumeObservers' is called.


              pauseObservers() {
                // No-op if already paused.
                if (this.paused) {
                  return;
                } // Set the 'paused' flag such that new observer messages don't fire.


                this.paused = true; // Take a snapshot of the query results for each query.

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];
                  query.resultsSnapshot = EJSON.clone(query.results);
                });
              }

              remove(selector, callback) {
                // Easy special case: if we're not calling observeChanges callbacks and
                // we're not saving originals and we got asked to remove everything, then
                // just empty everything directly.
                if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {
                  const result = this._docs.size();

                  this._docs.clear();

                  Object.keys(this.queries).forEach(qid => {
                    const query = this.queries[qid];

                    if (query.ordered) {
                      query.results = [];
                    } else {
                      query.results.clear();
                    }
                  });

                  if (callback) {
                    Meteor.defer(() => {
                      callback(null, result);
                    });
                  }

                  return result;
                }

                const matcher = new Minimongo.Matcher(selector);
                const remove = [];

                this._eachPossiblyMatchingDoc(selector, (doc, id) => {
                  if (matcher.documentMatches(doc).result) {
                    remove.push(id);
                  }
                });

                const queriesToRecompute = [];
                const queryRemove = [];

                for (let i = 0; i < remove.length; i++) {
                  const removeId = remove[i];

                  const removeDoc = this._docs.get(removeId);

                  Object.keys(this.queries).forEach(qid => {
                    const query = this.queries[qid];

                    if (query.dirty) {
                      return;
                    }

                    if (query.matcher.documentMatches(removeDoc).result) {
                      if (query.cursor.skip || query.cursor.limit) {
                        queriesToRecompute.push(qid);
                      } else {
                        queryRemove.push({
                          qid,
                          doc: removeDoc
                        });
                      }
                    }
                  });

                  this._saveOriginal(removeId, removeDoc);

                  this._docs.remove(removeId);
                } // run live query callbacks _after_ we've removed the documents.


                queryRemove.forEach(remove => {
                  const query = this.queries[remove.qid];

                  if (query) {
                    query.distances && query.distances.remove(remove.doc._id);

                    LocalCollection._removeFromResults(query, remove.doc);
                  }
                });
                queriesToRecompute.forEach(qid => {
                  const query = this.queries[qid];

                  if (query) {
                    this._recomputeResults(query);
                  }
                });

                this._observeQueue.drain();

                const result = remove.length;

                if (callback) {
                  Meteor.defer(() => {
                    callback(null, result);
                  });
                }

                return result;
              } // Resume the observers. Observers immediately receive change
              // notifications to bring them to the current state of the
              // database. Note that this is not just replaying all the changes that
              // happened during the pause, it is a smarter 'coalesced' diff.


              resumeObservers() {
                // No-op if not paused.
                if (!this.paused) {
                  return;
                } // Unset the 'paused' flag. Make sure to do this first, otherwise
                // observer methods won't actually fire when we trigger them.


                this.paused = false;
                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    query.dirty = false; // re-compute results will perform `LocalCollection._diffQueryChanges`
                    // automatically.

                    this._recomputeResults(query, query.resultsSnapshot);
                  } else {
                    // Diff the current results against the snapshot and send to observers.
                    // pass the query object for its observer callbacks.
                    LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, {
                      projectionFn: query.projectionFn
                    });
                  }

                  query.resultsSnapshot = null;
                });

                this._observeQueue.drain();
              }

              retrieveOriginals() {
                if (!this._savedOriginals) {
                  throw new Error('Called retrieveOriginals without saveOriginals');
                }

                const originals = this._savedOriginals;
                this._savedOriginals = null;
                return originals;
              } // To track what documents are affected by a piece of code, call
              // saveOriginals() before it and retrieveOriginals() after it.
              // retrieveOriginals returns an object whose keys are the ids of the documents
              // that were affected since the call to saveOriginals(), and the values are
              // equal to the document's contents at the time of saveOriginals. (In the case
              // of an inserted document, undefined is the value.) You must alternate
              // between calls to saveOriginals() and retrieveOriginals().


              saveOriginals() {
                if (this._savedOriginals) {
                  throw new Error('Called saveOriginals twice without retrieveOriginals');
                }

                this._savedOriginals = new LocalCollection._IdMap();
              } // XXX atomicity: if multi is true, and one modification fails, do
              // we rollback the whole operation, or what?


              update(selector, mod, options, callback) {
                if (!callback && options instanceof Function) {
                  callback = options;
                  options = null;
                }

                if (!options) {
                  options = {};
                }

                const matcher = new Minimongo.Matcher(selector, true); // Save the original results of any query that we might need to
                // _recomputeResults on, because _modifyAndNotify will mutate the objects in
                // it. (We don't need to save the original results of paused queries because
                // they already have a resultsSnapshot and we won't be diffing in
                // _recomputeResults.)

                const qidToOriginalResults = {}; // We should only clone each document once, even if it appears in multiple
                // queries

                const docMap = new LocalCollection._IdMap();

                const idsMatched = LocalCollection._idsMatchedBySelector(selector);

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if ((query.cursor.skip || query.cursor.limit) && !this.paused) {
                    // Catch the case of a reactive `count()` on a cursor with skip
                    // or limit, which registers an unordered observe. This is a
                    // pretty rare case, so we just clone the entire result set with
                    // no optimizations for documents that appear in these result
                    // sets and other queries.
                    if (query.results instanceof LocalCollection._IdMap) {
                      qidToOriginalResults[qid] = query.results.clone();
                      return;
                    }

                    if (!(query.results instanceof Array)) {
                      throw new Error('Assertion failed: query.results not an array');
                    } // Clones a document to be stored in `qidToOriginalResults`
                    // because it may be modified before the new and old result sets
                    // are diffed. But if we know exactly which document IDs we're
                    // going to modify, then we only need to clone those.


                    const memoizedCloneIfNeeded = doc => {
                      if (docMap.has(doc._id)) {
                        return docMap.get(doc._id);
                      }

                      const docToMemoize = idsMatched && !idsMatched.some(id => EJSON.equals(id, doc._id)) ? doc : EJSON.clone(doc);
                      docMap.set(doc._id, docToMemoize);
                      return docToMemoize;
                    };

                    qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);
                  }
                });
                const recomputeQids = {};
                let updateCount = 0;

                this._eachPossiblyMatchingDoc(selector, (doc, id) => {
                  const queryResult = matcher.documentMatches(doc);

                  if (queryResult.result) {
                    // XXX Should we save the original even if mod ends up being a no-op?
                    this._saveOriginal(id, doc);

                    this._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);

                    ++updateCount;

                    if (!options.multi) {
                      return false; // break
                    }
                  }

                  return true;
                });

                Object.keys(recomputeQids).forEach(qid => {
                  const query = this.queries[qid];

                  if (query) {
                    this._recomputeResults(query, qidToOriginalResults[qid]);
                  }
                });

                this._observeQueue.drain(); // If we are doing an upsert, and we didn't modify any documents yet, then
                // it's time to do an insert. Figure out what document we are inserting, and
                // generate an id for it.


                let insertedId;

                if (updateCount === 0 && options.upsert) {
                  const doc = LocalCollection._createUpsertDocument(selector, mod);

                  if (!doc._id && options.insertedId) {
                    doc._id = options.insertedId;
                  }

                  insertedId = this.insert(doc);
                  updateCount = 1;
                } // Return the number of affected documents, or in the upsert case, an object
                // containing the number of affected docs and the id of the doc that was
                // inserted, if any.


                let result;

                if (options._returnObject) {
                  result = {
                    numberAffected: updateCount
                  };

                  if (insertedId !== undefined) {
                    result.insertedId = insertedId;
                  }
                } else {
                  result = updateCount;
                }

                if (callback) {
                  Meteor.defer(() => {
                    callback(null, result);
                  });
                }

                return result;
              } // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is
              // equivalent to LocalCollection.update(sel, mod, {upsert: true,
              // _returnObject: true}).


              upsert(selector, mod, options, callback) {
                if (!callback && typeof options === 'function') {
                  callback = options;
                  options = {};
                }

                return this.update(selector, mod, Object.assign({}, options, {
                  upsert: true,
                  _returnObject: true
                }), callback);
              } // Iterates over a subset of documents that could match selector; calls
              // fn(doc, id) on each of them.  Specifically, if selector specifies
              // specific _id's, it only looks at those.  doc is *not* cloned: it is the
              // same object that is in _docs.


              _eachPossiblyMatchingDoc(selector, fn) {
                const specificIds = LocalCollection._idsMatchedBySelector(selector);

                if (specificIds) {
                  specificIds.some(id => {
                    const doc = this._docs.get(id);

                    if (doc) {
                      return fn(doc, id) === false;
                    }
                  });
                } else {
                  this._docs.forEach(fn);
                }
              }

              _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {
                const matched_before = {};
                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    return;
                  }

                  if (query.ordered) {
                    matched_before[qid] = query.matcher.documentMatches(doc).result;
                  } else {
                    // Because we don't support skip or limit (yet) in unordered queries, we
                    // can just do a direct lookup.
                    matched_before[qid] = query.results.has(doc._id);
                  }
                });
                const old_doc = EJSON.clone(doc);

                LocalCollection._modify(doc, mod, {
                  arrayIndices
                });

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    return;
                  }

                  const afterMatch = query.matcher.documentMatches(doc);
                  const after = afterMatch.result;
                  const before = matched_before[qid];

                  if (after && query.distances && afterMatch.distance !== undefined) {
                    query.distances.set(doc._id, afterMatch.distance);
                  }

                  if (query.cursor.skip || query.cursor.limit) {
                    // We need to recompute any query where the doc may have been in the
                    // cursor's window either before or after the update. (Note that if skip
                    // or limit is set, "before" and "after" being true do not necessarily
                    // mean that the document is in the cursor's output after skip/limit is
                    // applied... but if they are false, then the document definitely is NOT
                    // in the output. So it's safe to skip recompute if neither before or
                    // after are true.)
                    if (before || after) {
                      recomputeQids[qid] = true;
                    }
                  } else if (before && !after) {
                    LocalCollection._removeFromResults(query, doc);
                  } else if (!before && after) {
                    LocalCollection._insertInResults(query, doc);
                  } else if (before && after) {
                    LocalCollection._updateInResults(query, doc, old_doc);
                  }
                });
              } // Recomputes the results of a query and runs observe callbacks for the
              // difference between the previous results and the current results (unless
              // paused). Used for skip/limit queries.
              //
              // When this is used by insert or remove, it can just use query.results for
              // the old results (and there's no need to pass in oldResults), because these
              // operations don't mutate the documents in the collection. Update needs to
              // pass in an oldResults which was deep-copied before the modifier was
              // applied.
              //
              // oldResults is guaranteed to be ignored if the query is not paused.


              _recomputeResults(query, oldResults) {
                if (this.paused) {
                  // There's no reason to recompute the results now as we're still paused.
                  // By flagging the query as "dirty", the recompute will be performed
                  // when resumeObservers is called.
                  query.dirty = true;
                  return;
                }

                if (!this.paused && !oldResults) {
                  oldResults = query.results;
                }

                if (query.distances) {
                  query.distances.clear();
                }

                query.results = query.cursor._getRawObjects({
                  distances: query.distances,
                  ordered: query.ordered
                });

                if (!this.paused) {
                  LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, {
                    projectionFn: query.projectionFn
                  });
                }
              }

              _saveOriginal(id, doc) {
                // Are we even trying to save originals?
                if (!this._savedOriginals) {
                  return;
                } // Have we previously mutated the original (and so 'doc' is not actually
                // original)?  (Note the 'has' check rather than truth: we store undefined
                // here for inserted docs!)


                if (this._savedOriginals.has(id)) {
                  return;
                }

                this._savedOriginals.set(id, EJSON.clone(doc));
              }

            }

            LocalCollection.Cursor = Cursor;
            LocalCollection.ObserveHandle = ObserveHandle; // XXX maybe move these into another ObserveHelpers package or something
            // _CachingChangeObserver is an object which receives observeChanges callbacks
            // and keeps a cache of the current cursor state up to date in this.docs. Users
            // of this class should read the docs field but not modify it. You should pass
            // the "applyChange" field as the callbacks to the underlying observeChanges
            // call. Optionally, you can specify your own observeChanges callbacks which are
            // invoked immediately before the docs field is updated; this object is made
            // available as `this` to those callbacks.

            LocalCollection._CachingChangeObserver = class _CachingChangeObserver {
              constructor() {
                let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                const orderedFromCallbacks = options.callbacks && LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);

                if (hasOwn.call(options, 'ordered')) {
                  this.ordered = options.ordered;

                  if (options.callbacks && options.ordered !== orderedFromCallbacks) {
                    throw Error('ordered option doesn\'t match callbacks');
                  }
                } else if (options.callbacks) {
                  this.ordered = orderedFromCallbacks;
                } else {
                  throw Error('must provide ordered or callbacks');
                }

                const callbacks = options.callbacks || {};

                if (this.ordered) {
                  this.docs = new OrderedDict(MongoID.idStringify);
                  this.applyChange = {
                    addedBefore: (id, fields, before) => {
                      // Take a shallow copy since the top-level properties can be changed
                      const doc = _objectSpread({}, fields);

                      doc._id = id;

                      if (callbacks.addedBefore) {
                        callbacks.addedBefore.call(this, id, EJSON.clone(fields), before);
                      } // This line triggers if we provide added with movedBefore.


                      if (callbacks.added) {
                        callbacks.added.call(this, id, EJSON.clone(fields));
                      } // XXX could `before` be a falsy ID?  Technically
                      // idStringify seems to allow for them -- though
                      // OrderedDict won't call stringify on a falsy arg.


                      this.docs.putBefore(id, doc, before || null);
                    },
                    movedBefore: (id, before) => {
                      const doc = this.docs.get(id);

                      if (callbacks.movedBefore) {
                        callbacks.movedBefore.call(this, id, before);
                      }

                      this.docs.moveBefore(id, before || null);
                    }
                  };
                } else {
                  this.docs = new LocalCollection._IdMap();
                  this.applyChange = {
                    added: (id, fields) => {
                      // Take a shallow copy since the top-level properties can be changed
                      const doc = _objectSpread({}, fields);

                      if (callbacks.added) {
                        callbacks.added.call(this, id, EJSON.clone(fields));
                      }

                      doc._id = id;
                      this.docs.set(id, doc);
                    }
                  };
                } // The methods in _IdMap and OrderedDict used by these callbacks are
                // identical.


                this.applyChange.changed = (id, fields) => {
                  const doc = this.docs.get(id);

                  if (!doc) {
                    throw new Error("Unknown id for changed: ".concat(id));
                  }

                  if (callbacks.changed) {
                    callbacks.changed.call(this, id, EJSON.clone(fields));
                  }

                  DiffSequence.applyChanges(doc, fields);
                };

                this.applyChange.removed = id => {
                  if (callbacks.removed) {
                    callbacks.removed.call(this, id);
                  }

                  this.docs.remove(id);
                };
              }

            };
            LocalCollection._IdMap = class _IdMap extends IdMap {
              constructor() {
                super(MongoID.idStringify, MongoID.idParse);
              }

            }; // Wrap a transform function to return objects that have the _id field
            // of the untransformed document. This ensures that subsystems such as
            // the observe-sequence package that call `observe` can keep track of
            // the documents identities.
            //
            // - Require that it returns objects
            // - If the return value has an _id field, verify that it matches the
            //   original _id field
            // - If the return value doesn't have an _id field, add it back.

            LocalCollection.wrapTransform = transform => {
              if (!transform) {
                return null;
              } // No need to doubly-wrap transforms.


              if (transform.__wrappedTransform__) {
                return transform;
              }

              const wrapped = doc => {
                if (!hasOwn.call(doc, '_id')) {
                  // XXX do we ever have a transform on the oplog's collection? because that
                  // collection has no _id.
                  throw new Error('can only transform documents with _id');
                }

                const id = doc._id; // XXX consider making tracker a weak dependency and checking
                // Package.tracker here

                const transformed = Tracker.nonreactive(() => transform(doc));

                if (!LocalCollection._isPlainObject(transformed)) {
                  throw new Error('transform must return object');
                }

                if (hasOwn.call(transformed, '_id')) {
                  if (!EJSON.equals(transformed._id, id)) {
                    throw new Error('transformed document can\'t have different _id');
                  }
                } else {
                  transformed._id = id;
                }

                return transformed;
              };

              wrapped.__wrappedTransform__ = true;
              return wrapped;
            }; // XXX the sorted-query logic below is laughably inefficient. we'll
            // need to come up with a better datastructure for this.
            //
            // XXX the logic for observing with a skip or a limit is even more
            // laughably inefficient. we recompute the whole results every time!
            // This binary search puts a value between any equal values, and the first
            // lesser value.


            LocalCollection._binarySearch = (cmp, array, value) => {
              let first = 0;
              let range = array.length;

              while (range > 0) {
                const halfRange = Math.floor(range / 2);

                if (cmp(value, array[first + halfRange]) >= 0) {
                  first += halfRange + 1;
                  range -= halfRange + 1;
                } else {
                  range = halfRange;
                }
              }

              return first;
            };

            LocalCollection._checkSupportedProjection = fields => {
              if (fields !== Object(fields) || Array.isArray(fields)) {
                throw MinimongoError('fields option must be an object');
              }

              Object.keys(fields).forEach(keyPath => {
                if (keyPath.split('.').includes('$')) {
                  throw MinimongoError('Minimongo doesn\'t support $ operator in projections yet.');
                }

                const value = fields[keyPath];

                if (typeof value === 'object' && ['$elemMatch', '$meta', '$slice'].some(key => hasOwn.call(value, key))) {
                  throw MinimongoError('Minimongo doesn\'t support operators in projections yet.');
                }

                if (![1, 0, true, false].includes(value)) {
                  throw MinimongoError('Projection values should be one of 1, 0, true, or false');
                }
              });
            }; // Knows how to compile a fields projection to a predicate function.
            // @returns - Function: a closure that filters out an object according to the
            //            fields projection rules:
            //            @param obj - Object: MongoDB-styled document
            //            @returns - Object: a document with the fields filtered out
            //                       according to projection rules. Doesn't retain subfields
            //                       of passed argument.


            LocalCollection._compileProjection = fields => {
              LocalCollection._checkSupportedProjection(fields);

              const _idProjection = fields._id === undefined ? true : fields._id;

              const details = projectionDetails(fields); // returns transformed doc according to ruleTree

              const transform = (doc, ruleTree) => {
                // Special case for "sets"
                if (Array.isArray(doc)) {
                  return doc.map(subdoc => transform(subdoc, ruleTree));
                }

                const result = details.including ? {} : EJSON.clone(doc);
                Object.keys(ruleTree).forEach(key => {
                  if (!hasOwn.call(doc, key)) {
                    return;
                  }

                  const rule = ruleTree[key];

                  if (rule === Object(rule)) {
                    // For sub-objects/subsets we branch
                    if (doc[key] === Object(doc[key])) {
                      result[key] = transform(doc[key], rule);
                    }
                  } else if (details.including) {
                    // Otherwise we don't even touch this subfield
                    result[key] = EJSON.clone(doc[key]);
                  } else {
                    delete result[key];
                  }
                });
                return result;
              };

              return doc => {
                const result = transform(doc, details.tree);

                if (_idProjection && hasOwn.call(doc, '_id')) {
                  result._id = doc._id;
                }

                if (!_idProjection && hasOwn.call(result, '_id')) {
                  delete result._id;
                }

                return result;
              };
            }; // Calculates the document to insert in case we're doing an upsert and the
            // selector does not match any elements


            LocalCollection._createUpsertDocument = (selector, modifier) => {
              const selectorDocument = populateDocumentWithQueryFields(selector);

              const isModify = LocalCollection._isModificationMod(modifier);

              const newDoc = {};

              if (selectorDocument._id) {
                newDoc._id = selectorDocument._id;
                delete selectorDocument._id;
              } // This double _modify call is made to help with nested properties (see issue
              // #8631). We do this even if it's a replacement for validation purposes (e.g.
              // ambiguous id's)


              LocalCollection._modify(newDoc, {
                $set: selectorDocument
              });

              LocalCollection._modify(newDoc, modifier, {
                isInsert: true
              });

              if (isModify) {
                return newDoc;
              } // Replacement can take _id from query document


              const replacement = Object.assign({}, modifier);

              if (newDoc._id) {
                replacement._id = newDoc._id;
              }

              return replacement;
            };

            LocalCollection._diffObjects = (left, right, callbacks) => {
              return DiffSequence.diffObjects(left, right, callbacks);
            }; // ordered: bool.
            // old_results and new_results: collections of documents.
            //    if ordered, they are arrays.
            //    if unordered, they are IdMaps


            LocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) => DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);

            LocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) => DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);

            LocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) => DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);

            LocalCollection._findInOrderedResults = (query, doc) => {
              if (!query.ordered) {
                throw new Error('Can\'t call _findInOrderedResults on unordered query');
              }

              for (let i = 0; i < query.results.length; i++) {
                if (query.results[i] === doc) {
                  return i;
                }
              }

              throw Error('object missing from query');
            }; // If this is a selector which explicitly constrains the match by ID to a finite
            // number of documents, returns a list of their IDs.  Otherwise returns
            // null. Note that the selector may have other restrictions so it may not even
            // match those document!  We care about $in and $and since those are generated
            // access-controlled update and remove.


            LocalCollection._idsMatchedBySelector = selector => {
              // Is the selector just an ID?
              if (LocalCollection._selectorIsId(selector)) {
                return [selector];
              }

              if (!selector) {
                return null;
              } // Do we have an _id clause?


              if (hasOwn.call(selector, '_id')) {
                // Is the _id clause just an ID?
                if (LocalCollection._selectorIsId(selector._id)) {
                  return [selector._id];
                } // Is the _id clause {_id: {$in: ["x", "y", "z"]}}?


                if (selector._id && Array.isArray(selector._id.$in) && selector._id.$in.length && selector._id.$in.every(LocalCollection._selectorIsId)) {
                  return selector._id.$in;
                }

                return null;
              } // If this is a top-level $and, and any of the clauses constrain their
              // documents, then the whole selector is constrained by any one clause's
              // constraint. (Well, by their intersection, but that seems unlikely.)


              if (Array.isArray(selector.$and)) {
                for (let i = 0; i < selector.$and.length; ++i) {
                  const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);

                  if (subIds) {
                    return subIds;
                  }
                }
              }

              return null;
            };

            LocalCollection._insertInResults = (query, doc) => {
              const fields = EJSON.clone(doc);
              delete fields._id;

              if (query.ordered) {
                if (!query.sorter) {
                  query.addedBefore(doc._id, query.projectionFn(fields), null);
                  query.results.push(doc);
                } else {
                  const i = LocalCollection._insertInSortedList(query.sorter.getComparator({
                    distances: query.distances
                  }), query.results, doc);

                  let next = query.results[i + 1];

                  if (next) {
                    next = next._id;
                  } else {
                    next = null;
                  }

                  query.addedBefore(doc._id, query.projectionFn(fields), next);
                }

                query.added(doc._id, query.projectionFn(fields));
              } else {
                query.added(doc._id, query.projectionFn(fields));
                query.results.set(doc._id, doc);
              }
            };

            LocalCollection._insertInSortedList = (cmp, array, value) => {
              if (array.length === 0) {
                array.push(value);
                return 0;
              }

              const i = LocalCollection._binarySearch(cmp, array, value);

              array.splice(i, 0, value);
              return i;
            };

            LocalCollection._isModificationMod = mod => {
              let isModify = false;
              let isReplace = false;
              Object.keys(mod).forEach(key => {
                if (key.substr(0, 1) === '$') {
                  isModify = true;
                } else {
                  isReplace = true;
                }
              });

              if (isModify && isReplace) {
                throw new Error('Update parameter cannot have both modifier and non-modifier fields.');
              }

              return isModify;
            }; // XXX maybe this should be EJSON.isObject, though EJSON doesn't know about
            // RegExp
            // XXX note that _type(undefined) === 3!!!!


            LocalCollection._isPlainObject = x => {
              return x && LocalCollection._f._type(x) === 3;
            }; // XXX need a strategy for passing the binding of $ into this
            // function, from the compiled selector
            //
            // maybe just {key.up.to.just.before.dollarsign: array_index}
            //
            // XXX atomicity: if one modification fails, do we roll back the whole
            // change?
            //
            // options:
            //   - isInsert is set when _modify is being called to compute the document to
            //     insert as part of an upsert operation. We use this primarily to figure
            //     out when to set the fields in $setOnInsert, if present.


            LocalCollection._modify = function (doc, modifier) {
              let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

              if (!LocalCollection._isPlainObject(modifier)) {
                throw MinimongoError('Modifier must be an object');
              } // Make sure the caller can't mutate our data structures.


              modifier = EJSON.clone(modifier);
              const isModifier = isOperatorObject(modifier);
              const newDoc = isModifier ? EJSON.clone(doc) : modifier;

              if (isModifier) {
                // apply modifiers to the doc.
                Object.keys(modifier).forEach(operator => {
                  // Treat $setOnInsert as $set if this is an insert.
                  const setOnInsert = options.isInsert && operator === '$setOnInsert';
                  const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];
                  const operand = modifier[operator];

                  if (!modFunc) {
                    throw MinimongoError("Invalid modifier specified ".concat(operator));
                  }

                  Object.keys(operand).forEach(keypath => {
                    const arg = operand[keypath];

                    if (keypath === '') {
                      throw MinimongoError('An empty update path is not valid.');
                    }

                    const keyparts = keypath.split('.');

                    if (!keyparts.every(Boolean)) {
                      throw MinimongoError("The update path '".concat(keypath, "' contains an empty field name, ") + 'which is not allowed.');
                    }

                    const target = findModTarget(newDoc, keyparts, {
                      arrayIndices: options.arrayIndices,
                      forbidArray: operator === '$rename',
                      noCreate: NO_CREATE_MODIFIERS[operator]
                    });
                    modFunc(target, keyparts.pop(), arg, keypath, newDoc);
                  });
                });

                if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {
                  throw MinimongoError("After applying the update to the document {_id: \"".concat(doc._id, "\", ...},") + ' the (immutable) field \'_id\' was found to have been altered to ' + "_id: \"".concat(newDoc._id, "\""));
                }
              } else {
                if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {
                  throw MinimongoError("The _id field cannot be changed from {_id: \"".concat(doc._id, "\"} to ") + "{_id: \"".concat(modifier._id, "\"}"));
                } // replace the whole document


                assertHasValidFieldNames(modifier);
              } // move new document into place.


              Object.keys(doc).forEach(key => {
                // Note: this used to be for (var key in doc) however, this does not
                // work right in Opera. Deleting from a doc while iterating over it
                // would sometimes cause opera to skip some keys.
                if (key !== '_id') {
                  delete doc[key];
                }
              });
              Object.keys(newDoc).forEach(key => {
                doc[key] = newDoc[key];
              });
            };

            LocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {
              const transform = cursor.getTransform() || (doc => doc);

              let suppressed = !!observeCallbacks._suppress_initial;
              let observeChangesCallbacks;

              if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {
                // The "_no_indices" option sets all index arguments to -1 and skips the
                // linear scans required to generate them.  This lets observers that don't
                // need absolute indices benefit from the other features of this API --
                // relative order, transforms, and applyChanges -- without the speed hit.
                const indices = !observeCallbacks._no_indices;
                observeChangesCallbacks = {
                  addedBefore(id, fields, before) {
                    if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {
                      return;
                    }

                    const doc = transform(Object.assign(fields, {
                      _id: id
                    }));

                    if (observeCallbacks.addedAt) {
                      observeCallbacks.addedAt(doc, indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1, before);
                    } else {
                      observeCallbacks.added(doc);
                    }
                  },

                  changed(id, fields) {
                    if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {
                      return;
                    }

                    let doc = EJSON.clone(this.docs.get(id));

                    if (!doc) {
                      throw new Error("Unknown id for changed: ".concat(id));
                    }

                    const oldDoc = transform(EJSON.clone(doc));
                    DiffSequence.applyChanges(doc, fields);

                    if (observeCallbacks.changedAt) {
                      observeCallbacks.changedAt(transform(doc), oldDoc, indices ? this.docs.indexOf(id) : -1);
                    } else {
                      observeCallbacks.changed(transform(doc), oldDoc);
                    }
                  },

                  movedBefore(id, before) {
                    if (!observeCallbacks.movedTo) {
                      return;
                    }

                    const from = indices ? this.docs.indexOf(id) : -1;
                    let to = indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1; // When not moving backwards, adjust for the fact that removing the
                    // document slides everything back one slot.

                    if (to > from) {
                      --to;
                    }

                    observeCallbacks.movedTo(transform(EJSON.clone(this.docs.get(id))), from, to, before || null);
                  },

                  removed(id) {
                    if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {
                      return;
                    } // technically maybe there should be an EJSON.clone here, but it's about
                    // to be removed from this.docs!


                    const doc = transform(this.docs.get(id));

                    if (observeCallbacks.removedAt) {
                      observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);
                    } else {
                      observeCallbacks.removed(doc);
                    }
                  }

                };
              } else {
                observeChangesCallbacks = {
                  added(id, fields) {
                    if (!suppressed && observeCallbacks.added) {
                      observeCallbacks.added(transform(Object.assign(fields, {
                        _id: id
                      })));
                    }
                  },

                  changed(id, fields) {
                    if (observeCallbacks.changed) {
                      const oldDoc = this.docs.get(id);
                      const doc = EJSON.clone(oldDoc);
                      DiffSequence.applyChanges(doc, fields);
                      observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc)));
                    }
                  },

                  removed(id) {
                    if (observeCallbacks.removed) {
                      observeCallbacks.removed(transform(this.docs.get(id)));
                    }
                  }

                };
              }

              const changeObserver = new LocalCollection._CachingChangeObserver({
                callbacks: observeChangesCallbacks
              }); // CachingChangeObserver clones all received input on its callbacks
              // So we can mark it as safe to reduce the ejson clones.
              // This is tested by the `mongo-livedata - (extended) scribbling` tests

              changeObserver.applyChange._fromObserve = true;
              const handle = cursor.observeChanges(changeObserver.applyChange, {
                nonMutatingCallbacks: true
              });
              suppressed = false;
              return handle;
            };

            LocalCollection._observeCallbacksAreOrdered = callbacks => {
              if (callbacks.added && callbacks.addedAt) {
                throw new Error('Please specify only one of added() and addedAt()');
              }

              if (callbacks.changed && callbacks.changedAt) {
                throw new Error('Please specify only one of changed() and changedAt()');
              }

              if (callbacks.removed && callbacks.removedAt) {
                throw new Error('Please specify only one of removed() and removedAt()');
              }

              return !!(callbacks.addedAt || callbacks.changedAt || callbacks.movedTo || callbacks.removedAt);
            };

            LocalCollection._observeChangesCallbacksAreOrdered = callbacks => {
              if (callbacks.added && callbacks.addedBefore) {
                throw new Error('Please specify only one of added() and addedBefore()');
              }

              return !!(callbacks.addedBefore || callbacks.movedBefore);
            };

            LocalCollection._removeFromResults = (query, doc) => {
              if (query.ordered) {
                const i = LocalCollection._findInOrderedResults(query, doc);

                query.removed(doc._id);
                query.results.splice(i, 1);
              } else {
                const id = doc._id; // in case callback mutates doc

                query.removed(doc._id);
                query.results.remove(id);
              }
            }; // Is this selector just shorthand for lookup by _id?


            LocalCollection._selectorIsId = selector => typeof selector === 'number' || typeof selector === 'string' || selector instanceof MongoID.ObjectID; // Is the selector just lookup by _id (shorthand or not)?


            LocalCollection._selectorIsIdPerhapsAsObject = selector => LocalCollection._selectorIsId(selector) || LocalCollection._selectorIsId(selector && selector._id) && Object.keys(selector).length === 1;

            LocalCollection._updateInResults = (query, doc, old_doc) => {
              if (!EJSON.equals(doc._id, old_doc._id)) {
                throw new Error('Can\'t change a doc\'s _id while updating');
              }

              const projectionFn = query.projectionFn;
              const changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));

              if (!query.ordered) {
                if (Object.keys(changedFields).length) {
                  query.changed(doc._id, changedFields);
                  query.results.set(doc._id, doc);
                }

                return;
              }

              const old_idx = LocalCollection._findInOrderedResults(query, doc);

              if (Object.keys(changedFields).length) {
                query.changed(doc._id, changedFields);
              }

              if (!query.sorter) {
                return;
              } // just take it out and put it back in again, and see if the index changes


              query.results.splice(old_idx, 1);

              const new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({
                distances: query.distances
              }), query.results, doc);

              if (old_idx !== new_idx) {
                let next = query.results[new_idx + 1];

                if (next) {
                  next = next._id;
                } else {
                  next = null;
                }

                query.movedBefore && query.movedBefore(doc._id, next);
              }
            };

            const MODIFIERS = {
              $currentDate(target, field, arg) {
                if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {
                  if (arg.$type !== 'date') {
                    throw MinimongoError('Minimongo does currently only support the date type in ' + '$currentDate modifiers', {
                      field
                    });
                  }
                } else if (arg !== true) {
                  throw MinimongoError('Invalid $currentDate modifier', {
                    field
                  });
                }

                target[field] = new Date();
              },

              $min(target, field, arg) {
                if (typeof arg !== 'number') {
                  throw MinimongoError('Modifier $min allowed for numbers only', {
                    field
                  });
                }

                if (field in target) {
                  if (typeof target[field] !== 'number') {
                    throw MinimongoError('Cannot apply $min modifier to non-number', {
                      field
                    });
                  }

                  if (target[field] > arg) {
                    target[field] = arg;
                  }
                } else {
                  target[field] = arg;
                }
              },

              $max(target, field, arg) {
                if (typeof arg !== 'number') {
                  throw MinimongoError('Modifier $max allowed for numbers only', {
                    field
                  });
                }

                if (field in target) {
                  if (typeof target[field] !== 'number') {
                    throw MinimongoError('Cannot apply $max modifier to non-number', {
                      field
                    });
                  }

                  if (target[field] < arg) {
                    target[field] = arg;
                  }
                } else {
                  target[field] = arg;
                }
              },

              $inc(target, field, arg) {
                if (typeof arg !== 'number') {
                  throw MinimongoError('Modifier $inc allowed for numbers only', {
                    field
                  });
                }

                if (field in target) {
                  if (typeof target[field] !== 'number') {
                    throw MinimongoError('Cannot apply $inc modifier to non-number', {
                      field
                    });
                  }

                  target[field] += arg;
                } else {
                  target[field] = arg;
                }
              },

              $set(target, field, arg) {
                if (target !== Object(target)) {
                  // not an array or an object
                  const error = MinimongoError('Cannot set property on non-object field', {
                    field
                  });
                  error.setPropertyError = true;
                  throw error;
                }

                if (target === null) {
                  const error = MinimongoError('Cannot set property on null', {
                    field
                  });
                  error.setPropertyError = true;
                  throw error;
                }

                assertHasValidFieldNames(arg);
                target[field] = arg;
              },

              $setOnInsert(target, field, arg) {// converted to `$set` in `_modify`
              },

              $unset(target, field, arg) {
                if (target !== undefined) {
                  if (target instanceof Array) {
                    if (field in target) {
                      target[field] = null;
                    }
                  } else {
                    delete target[field];
                  }
                }
              },

              $push(target, field, arg) {
                if (target[field] === undefined) {
                  target[field] = [];
                }

                if (!(target[field] instanceof Array)) {
                  throw MinimongoError('Cannot apply $push modifier to non-array', {
                    field
                  });
                }

                if (!(arg && arg.$each)) {
                  // Simple mode: not $each
                  assertHasValidFieldNames(arg);
                  target[field].push(arg);
                  return;
                } // Fancy mode: $each (and maybe $slice and $sort and $position)


                const toPush = arg.$each;

                if (!(toPush instanceof Array)) {
                  throw MinimongoError('$each must be an array', {
                    field
                  });
                }

                assertHasValidFieldNames(toPush); // Parse $position

                let position = undefined;

                if ('$position' in arg) {
                  if (typeof arg.$position !== 'number') {
                    throw MinimongoError('$position must be a numeric value', {
                      field
                    });
                  } // XXX should check to make sure integer


                  if (arg.$position < 0) {
                    throw MinimongoError('$position in $push must be zero or positive', {
                      field
                    });
                  }

                  position = arg.$position;
                } // Parse $slice.


                let slice = undefined;

                if ('$slice' in arg) {
                  if (typeof arg.$slice !== 'number') {
                    throw MinimongoError('$slice must be a numeric value', {
                      field
                    });
                  } // XXX should check to make sure integer


                  slice = arg.$slice;
                } // Parse $sort.


                let sortFunction = undefined;

                if (arg.$sort) {
                  if (slice === undefined) {
                    throw MinimongoError('$sort requires $slice to be present', {
                      field
                    });
                  } // XXX this allows us to use a $sort whose value is an array, but that's
                  // actually an extension of the Node driver, so it won't work
                  // server-side. Could be confusing!
                  // XXX is it correct that we don't do geo-stuff here?


                  sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();
                  toPush.forEach(element => {
                    if (LocalCollection._f._type(element) !== 3) {
                      throw MinimongoError('$push like modifiers using $sort require all elements to be ' + 'objects', {
                        field
                      });
                    }
                  });
                } // Actually push.


                if (position === undefined) {
                  toPush.forEach(element => {
                    target[field].push(element);
                  });
                } else {
                  const spliceArguments = [position, 0];
                  toPush.forEach(element => {
                    spliceArguments.push(element);
                  });
                  target[field].splice(...spliceArguments);
                } // Actually sort.


                if (sortFunction) {
                  target[field].sort(sortFunction);
                } // Actually slice.


                if (slice !== undefined) {
                  if (slice === 0) {
                    target[field] = []; // differs from Array.slice!
                  } else if (slice < 0) {
                    target[field] = target[field].slice(slice);
                  } else {
                    target[field] = target[field].slice(0, slice);
                  }
                }
              },

              $pushAll(target, field, arg) {
                if (!(typeof arg === 'object' && arg instanceof Array)) {
                  throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');
                }

                assertHasValidFieldNames(arg);
                const toPush = target[field];

                if (toPush === undefined) {
                  target[field] = arg;
                } else if (!(toPush instanceof Array)) {
                  throw MinimongoError('Cannot apply $pushAll modifier to non-array', {
                    field
                  });
                } else {
                  toPush.push(...arg);
                }
              },

              $addToSet(target, field, arg) {
                let isEach = false;

                if (typeof arg === 'object') {
                  // check if first key is '$each'
                  const keys = Object.keys(arg);

                  if (keys[0] === '$each') {
                    isEach = true;
                  }
                }

                const values = isEach ? arg.$each : [arg];
                assertHasValidFieldNames(values);
                const toAdd = target[field];

                if (toAdd === undefined) {
                  target[field] = values;
                } else if (!(toAdd instanceof Array)) {
                  throw MinimongoError('Cannot apply $addToSet modifier to non-array', {
                    field
                  });
                } else {
                  values.forEach(value => {
                    if (toAdd.some(element => LocalCollection._f._equal(value, element))) {
                      return;
                    }

                    toAdd.push(value);
                  });
                }
              },

              $pop(target, field, arg) {
                if (target === undefined) {
                  return;
                }

                const toPop = target[field];

                if (toPop === undefined) {
                  return;
                }

                if (!(toPop instanceof Array)) {
                  throw MinimongoError('Cannot apply $pop modifier to non-array', {
                    field
                  });
                }

                if (typeof arg === 'number' && arg < 0) {
                  toPop.splice(0, 1);
                } else {
                  toPop.pop();
                }
              },

              $pull(target, field, arg) {
                if (target === undefined) {
                  return;
                }

                const toPull = target[field];

                if (toPull === undefined) {
                  return;
                }

                if (!(toPull instanceof Array)) {
                  throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {
                    field
                  });
                }

                let out;

                if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {
                  // XXX would be much nicer to compile this once, rather than
                  // for each document we modify.. but usually we're not
                  // modifying that many documents, so we'll let it slide for
                  // now
                  // XXX Minimongo.Matcher isn't up for the job, because we need
                  // to permit stuff like {$pull: {a: {$gt: 4}}}.. something
                  // like {$gt: 4} is not normally a complete selector.
                  // same issue as $elemMatch possibly?
                  const matcher = new Minimongo.Matcher(arg);
                  out = toPull.filter(element => !matcher.documentMatches(element).result);
                } else {
                  out = toPull.filter(element => !LocalCollection._f._equal(element, arg));
                }

                target[field] = out;
              },

              $pullAll(target, field, arg) {
                if (!(typeof arg === 'object' && arg instanceof Array)) {
                  throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only', {
                    field
                  });
                }

                if (target === undefined) {
                  return;
                }

                const toPull = target[field];

                if (toPull === undefined) {
                  return;
                }

                if (!(toPull instanceof Array)) {
                  throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {
                    field
                  });
                }

                target[field] = toPull.filter(object => !arg.some(element => LocalCollection._f._equal(object, element)));
              },

              $rename(target, field, arg, keypath, doc) {
                // no idea why mongo has this restriction..
                if (keypath === arg) {
                  throw MinimongoError('$rename source must differ from target', {
                    field
                  });
                }

                if (target === null) {
                  throw MinimongoError('$rename source field invalid', {
                    field
                  });
                }

                if (typeof arg !== 'string') {
                  throw MinimongoError('$rename target must be a string', {
                    field
                  });
                }

                if (arg.includes('\0')) {
                  // Null bytes are not allowed in Mongo field names
                  // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names
                  throw MinimongoError('The \'to\' field for $rename cannot contain an embedded null byte', {
                    field
                  });
                }

                if (target === undefined) {
                  return;
                }

                const object = target[field];
                delete target[field];
                const keyparts = arg.split('.');
                const target2 = findModTarget(doc, keyparts, {
                  forbidArray: true
                });

                if (target2 === null) {
                  throw MinimongoError('$rename target field invalid', {
                    field
                  });
                }

                target2[keyparts.pop()] = object;
              },

              $bit(target, field, arg) {
                // XXX mongo only supports $bit on integers, and we only support
                // native javascript numbers (doubles) so far, so we can't support $bit
                throw MinimongoError('$bit is not supported', {
                  field
                });
              },

              $v() {// As discussed in https://github.com/meteor/meteor/issues/9623,
                // the `$v` operator is not needed by Meteor, but problems can occur if
                // it's not at least callable (as of Mongo >= 3.6). It's defined here as
                // a no-op to work around these problems.
              }

            };
            const NO_CREATE_MODIFIERS = {
              $pop: true,
              $pull: true,
              $pullAll: true,
              $rename: true,
              $unset: true
            }; // Make sure field names do not contain Mongo restricted
            // characters ('.', '$', '\0').
            // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names

            const invalidCharMsg = {
              $: 'start with \'$\'',
              '.': 'contain \'.\'',
              '\0': 'contain null bytes'
            }; // checks if all field names in an object are valid

            function assertHasValidFieldNames(doc) {
              if (doc && typeof doc === 'object') {
                JSON.stringify(doc, (key, value) => {
                  assertIsValidFieldName(key);
                  return value;
                });
              }
            }

            function assertIsValidFieldName(key) {
              let match;

              if (typeof key === 'string' && (match = key.match(/^\$|\.|\0/))) {
                throw MinimongoError("Key ".concat(key, " must not ").concat(invalidCharMsg[match[0]]));
              }
            } // for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],
            // and then you would operate on the 'e' property of the returned
            // object.
            //
            // if options.noCreate is falsey, creates intermediate levels of
            // structure as necessary, like mkdir -p (and raises an exception if
            // that would mean giving a non-numeric property to an array.) if
            // options.noCreate is true, return undefined instead.
            //
            // may modify the last element of keyparts to signal to the caller that it needs
            // to use a different value to index into the returned object (for example,
            // ['a', '01'] -> ['a', 1]).
            //
            // if forbidArray is true, return null if the keypath goes through an array.
            //
            // if options.arrayIndices is set, use its first element for the (first) '$' in
            // the path.


            function findModTarget(doc, keyparts) {
              let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              let usedArrayIndex = false;

              for (let i = 0; i < keyparts.length; i++) {
                const last = i === keyparts.length - 1;
                let keypart = keyparts[i];

                if (!isIndexable(doc)) {
                  if (options.noCreate) {
                    return undefined;
                  }

                  const error = MinimongoError("cannot use the part '".concat(keypart, "' to traverse ").concat(doc));
                  error.setPropertyError = true;
                  throw error;
                }

                if (doc instanceof Array) {
                  if (options.forbidArray) {
                    return null;
                  }

                  if (keypart === '$') {
                    if (usedArrayIndex) {
                      throw MinimongoError('Too many positional (i.e. \'$\') elements');
                    }

                    if (!options.arrayIndices || !options.arrayIndices.length) {
                      throw MinimongoError('The positional operator did not find the match needed from the ' + 'query');
                    }

                    keypart = options.arrayIndices[0];
                    usedArrayIndex = true;
                  } else if (isNumericKey(keypart)) {
                    keypart = parseInt(keypart);
                  } else {
                    if (options.noCreate) {
                      return undefined;
                    }

                    throw MinimongoError("can't append to array using string field name [".concat(keypart, "]"));
                  }

                  if (last) {
                    keyparts[i] = keypart; // handle 'a.01'
                  }

                  if (options.noCreate && keypart >= doc.length) {
                    return undefined;
                  }

                  while (doc.length < keypart) {
                    doc.push(null);
                  }

                  if (!last) {
                    if (doc.length === keypart) {
                      doc.push({});
                    } else if (typeof doc[keypart] !== 'object') {
                      throw MinimongoError("can't modify field '".concat(keyparts[i + 1], "' of list value ") + JSON.stringify(doc[keypart]));
                    }
                  }
                } else {
                  assertIsValidFieldName(keypart);

                  if (!(keypart in doc)) {
                    if (options.noCreate) {
                      return undefined;
                    }

                    if (!last) {
                      doc[keypart] = {};
                    }
                  }
                }

                if (last) {
                  return doc;
                }

                doc = doc[keypart];
              } // notreached
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "matcher.js": function module(_require6, _exports6, _module5) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/matcher.js                                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module5.export({
              default: () => Matcher
            });
            let LocalCollection;
            _module5.link("./local_collection.js", {
              default(v) {
                LocalCollection = v;
              }

            }, 0);
            let compileDocumentSelector, hasOwn, nothingMatcher;
            _module5.link("./common.js", {
              compileDocumentSelector(v) {
                compileDocumentSelector = v;
              },

              hasOwn(v) {
                hasOwn = v;
              },

              nothingMatcher(v) {
                nothingMatcher = v;
              }

            }, 1);

            class Matcher {
              constructor(selector, isUpdate) {
                // A set (object mapping string -> *) of all of the document paths looked
                // at by the selector. Also includes the empty string if it may look at any
                // path (eg, $where).
                this._paths = {}; // Set to true if compilation finds a $near.

                this._hasGeoQuery = false; // Set to true if compilation finds a $where.

                this._hasWhere = false; // Set to false if compilation finds anything other than a simple equality
                // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used
                // with scalars as operands.

                this._isSimple = true; // Set to a dummy document which always matches this Matcher. Or set to null
                // if such document is too hard to find.

                this._matchingDocument = undefined; // A clone of the original selector. It may just be a function if the user
                // passed in a function; otherwise is definitely an object (eg, IDs are
                // translated into {_id: ID} first. Used by canBecomeTrueByModifier and
                // Sorter._useWithMatcher.

                this._selector = null;
                this._docMatcher = this._compileSelector(selector); // Set to true if selection is done for an update operation
                // Default is false
                // Used for $near array update (issue #3599)

                this._isUpdate = isUpdate;
              }

              documentMatches(doc) {
                if (doc !== Object(doc)) {
                  throw Error('documentMatches needs a document');
                }

                return this._docMatcher(doc);
              }

              hasGeoQuery() {
                return this._hasGeoQuery;
              }

              hasWhere() {
                return this._hasWhere;
              }

              isSimple() {
                return this._isSimple;
              } // Given a selector, return a function that takes one argument, a
              // document. It returns a result object.


              _compileSelector(selector) {
                // you can pass a literal function instead of a selector
                if (selector instanceof Function) {
                  this._isSimple = false;
                  this._selector = selector;

                  this._recordPathUsed('');

                  return doc => ({
                    result: !!selector.call(doc)
                  });
                } // shorthand -- scalar _id


                if (LocalCollection._selectorIsId(selector)) {
                  this._selector = {
                    _id: selector
                  };

                  this._recordPathUsed('_id');

                  return doc => ({
                    result: EJSON.equals(doc._id, selector)
                  });
                } // protect against dangerous selectors.  falsey and {_id: falsey} are both
                // likely programmer error, and not what you want, particularly for
                // destructive operations.


                if (!selector || hasOwn.call(selector, '_id') && !selector._id) {
                  this._isSimple = false;
                  return nothingMatcher;
                } // Top level can't be an array or true or binary.


                if (Array.isArray(selector) || EJSON.isBinary(selector) || typeof selector === 'boolean') {
                  throw new Error("Invalid selector: ".concat(selector));
                }

                this._selector = EJSON.clone(selector);
                return compileDocumentSelector(selector, this, {
                  isRoot: true
                });
              } // Returns a list of key paths the given selector is looking for. It includes
              // the empty string if there is a $where.


              _getPaths() {
                return Object.keys(this._paths);
              }

              _recordPathUsed(path) {
                this._paths[path] = true;
              }

            }

            // helpers used by compiled selector code
            LocalCollection._f = {
              // XXX for _all and _in, consider building 'inquery' at compile time..
              _type(v) {
                if (typeof v === 'number') {
                  return 1;
                }

                if (typeof v === 'string') {
                  return 2;
                }

                if (typeof v === 'boolean') {
                  return 8;
                }

                if (Array.isArray(v)) {
                  return 4;
                }

                if (v === null) {
                  return 10;
                } // note that typeof(/x/) === "object"


                if (v instanceof RegExp) {
                  return 11;
                }

                if (typeof v === 'function') {
                  return 13;
                }

                if (v instanceof Date) {
                  return 9;
                }

                if (EJSON.isBinary(v)) {
                  return 5;
                }

                if (v instanceof MongoID.ObjectID) {
                  return 7;
                } // object


                return 3; // XXX support some/all of these:
                // 14, symbol
                // 15, javascript code with scope
                // 16, 18: 32-bit/64-bit integer
                // 17, timestamp
                // 255, minkey
                // 127, maxkey
              },

              // deep equality test: use for literal document and array matches
              _equal(a, b) {
                return EJSON.equals(a, b, {
                  keyOrderSensitive: true
                });
              },

              // maps a type code to a value that can be used to sort values of different
              // types
              _typeorder(t) {
                // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types
                // XXX what is the correct sort position for Javascript code?
                // ('100' in the matrix below)
                // XXX minkey/maxkey
                return [-1, // (not a type)
                1, // number
                2, // string
                3, // object
                4, // array
                5, // binary
                -1, // deprecated
                6, // ObjectID
                7, // bool
                8, // Date
                0, // null
                9, // RegExp
                -1, // deprecated
                100, // JS code
                2, // deprecated (symbol)
                100, // JS code
                1, // 32-bit int
                8, // Mongo timestamp
                1 // 64-bit int
                ][t];
              },

              // compare two values of unknown type according to BSON ordering
              // semantics. (as an extension, consider 'undefined' to be less than
              // any other value.) return negative if a is less, positive if b is
              // less, or 0 if equal
              _cmp(a, b) {
                if (a === undefined) {
                  return b === undefined ? 0 : -1;
                }

                if (b === undefined) {
                  return 1;
                }

                let ta = LocalCollection._f._type(a);

                let tb = LocalCollection._f._type(b);

                const oa = LocalCollection._f._typeorder(ta);

                const ob = LocalCollection._f._typeorder(tb);

                if (oa !== ob) {
                  return oa < ob ? -1 : 1;
                } // XXX need to implement this if we implement Symbol or integers, or
                // Timestamp


                if (ta !== tb) {
                  throw Error('Missing type coercion logic in _cmp');
                }

                if (ta === 7) {
                  // ObjectID
                  // Convert to string.
                  ta = tb = 2;
                  a = a.toHexString();
                  b = b.toHexString();
                }

                if (ta === 9) {
                  // Date
                  // Convert to millis.
                  ta = tb = 1;
                  a = a.getTime();
                  b = b.getTime();
                }

                if (ta === 1) // double
                  return a - b;
                if (tb === 2) // string
                  return a < b ? -1 : a === b ? 0 : 1;

                if (ta === 3) {
                  // Object
                  // this could be much more efficient in the expected case ...
                  const toArray = object => {
                    const result = [];
                    Object.keys(object).forEach(key => {
                      result.push(key, object[key]);
                    });
                    return result;
                  };

                  return LocalCollection._f._cmp(toArray(a), toArray(b));
                }

                if (ta === 4) {
                  // Array
                  for (let i = 0;; i++) {
                    if (i === a.length) {
                      return i === b.length ? 0 : -1;
                    }

                    if (i === b.length) {
                      return 1;
                    }

                    const s = LocalCollection._f._cmp(a[i], b[i]);

                    if (s !== 0) {
                      return s;
                    }
                  }
                }

                if (ta === 5) {
                  // binary
                  // Surprisingly, a small binary blob is always less than a large one in
                  // Mongo.
                  if (a.length !== b.length) {
                    return a.length - b.length;
                  }

                  for (let i = 0; i < a.length; i++) {
                    if (a[i] < b[i]) {
                      return -1;
                    }

                    if (a[i] > b[i]) {
                      return 1;
                    }
                  }

                  return 0;
                }

                if (ta === 8) {
                  // boolean
                  if (a) {
                    return b ? 0 : 1;
                  }

                  return b ? -1 : 0;
                }

                if (ta === 10) // null
                  return 0;
                if (ta === 11) // regexp
                  throw Error('Sorting not supported on regular expression'); // XXX
                // 13: javascript code
                // 14: symbol
                // 15: javascript code with scope
                // 16: 32-bit integer
                // 17: timestamp
                // 18: 64-bit integer
                // 255: minkey
                // 127: maxkey

                if (ta === 13) // javascript code
                  throw Error('Sorting not supported on Javascript code'); // XXX

                throw Error('Unknown type to sort');
              }

            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "minimongo_common.js": function module(_require7, _exports7, _module6) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/minimongo_common.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let LocalCollection_;
            _module6.link("./local_collection.js", {
              default(v) {
                LocalCollection_ = v;
              }

            }, 0);
            let Matcher;
            _module6.link("./matcher.js", {
              default(v) {
                Matcher = v;
              }

            }, 1);
            let Sorter;
            _module6.link("./sorter.js", {
              default(v) {
                Sorter = v;
              }

            }, 2);
            LocalCollection = LocalCollection_;
            Minimongo = {
              LocalCollection: LocalCollection_,
              Matcher,
              Sorter
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "observe_handle.js": function module(_require8, _exports8, _module7) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/observe_handle.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module7.export({
              default: () => ObserveHandle
            });

            class ObserveHandle {}
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "sorter.js": function module(_require9, _exports9, _module8) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/sorter.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module8.export({
              default: () => Sorter
            });
            let ELEMENT_OPERATORS, equalityElementMatcher, expandArraysInBranches, hasOwn, isOperatorObject, makeLookupFunction, regexpElementMatcher;
            _module8.link("./common.js", {
              ELEMENT_OPERATORS(v) {
                ELEMENT_OPERATORS = v;
              },

              equalityElementMatcher(v) {
                equalityElementMatcher = v;
              },

              expandArraysInBranches(v) {
                expandArraysInBranches = v;
              },

              hasOwn(v) {
                hasOwn = v;
              },

              isOperatorObject(v) {
                isOperatorObject = v;
              },

              makeLookupFunction(v) {
                makeLookupFunction = v;
              },

              regexpElementMatcher(v) {
                regexpElementMatcher = v;
              }

            }, 0);

            class Sorter {
              constructor(spec) {
                this._sortSpecParts = [];
                this._sortFunction = null;

                const addSpecPart = (path, ascending) => {
                  if (!path) {
                    throw Error('sort keys must be non-empty');
                  }

                  if (path.charAt(0) === '$') {
                    throw Error("unsupported sort key: ".concat(path));
                  }

                  this._sortSpecParts.push({
                    ascending,
                    lookup: makeLookupFunction(path, {
                      forSort: true
                    }),
                    path
                  });
                };

                if (spec instanceof Array) {
                  spec.forEach(element => {
                    if (typeof element === 'string') {
                      addSpecPart(element, true);
                    } else {
                      addSpecPart(element[0], element[1] !== 'desc');
                    }
                  });
                } else if (typeof spec === 'object') {
                  Object.keys(spec).forEach(key => {
                    addSpecPart(key, spec[key] >= 0);
                  });
                } else if (typeof spec === 'function') {
                  this._sortFunction = spec;
                } else {
                  throw Error("Bad sort specification: ".concat(JSON.stringify(spec)));
                } // If a function is specified for sorting, we skip the rest.


                if (this._sortFunction) {
                  return;
                } // To implement affectedByModifier, we piggy-back on top of Matcher's
                // affectedByModifier code; we create a selector that is affected by the
                // same modifiers as this sort order. This is only implemented on the
                // server.


                if (this.affectedByModifier) {
                  const selector = {};

                  this._sortSpecParts.forEach(spec => {
                    selector[spec.path] = 1;
                  });

                  this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);
                }

                this._keyComparator = composeComparators(this._sortSpecParts.map((spec, i) => this._keyFieldComparator(i)));
              }

              getComparator(options) {
                // If sort is specified or have no distances, just use the comparator from
                // the source specification (which defaults to "everything is equal".
                // issue #3599
                // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation
                // sort effectively overrides $near
                if (this._sortSpecParts.length || !options || !options.distances) {
                  return this._getBaseComparator();
                }

                const distances = options.distances; // Return a comparator which compares using $near distances.

                return (a, b) => {
                  if (!distances.has(a._id)) {
                    throw Error("Missing distance for ".concat(a._id));
                  }

                  if (!distances.has(b._id)) {
                    throw Error("Missing distance for ".concat(b._id));
                  }

                  return distances.get(a._id) - distances.get(b._id);
                };
              } // Takes in two keys: arrays whose lengths match the number of spec
              // parts. Returns negative, 0, or positive based on using the sort spec to
              // compare fields.


              _compareKeys(key1, key2) {
                if (key1.length !== this._sortSpecParts.length || key2.length !== this._sortSpecParts.length) {
                  throw Error('Key has wrong length');
                }

                return this._keyComparator(key1, key2);
              } // Iterates over each possible "key" from doc (ie, over each branch), calling
              // 'cb' with the key.


              _generateKeysFromDoc(doc, cb) {
                if (this._sortSpecParts.length === 0) {
                  throw new Error('can\'t generate keys without a spec');
                }

                const pathFromIndices = indices => "".concat(indices.join(','), ",");

                let knownPaths = null; // maps index -> ({'' -> value} or {path -> value})

                const valuesByIndexAndPath = this._sortSpecParts.map(spec => {
                  // Expand any leaf arrays that we find, and ignore those arrays
                  // themselves.  (We never sort based on an array itself.)
                  let branches = expandArraysInBranches(spec.lookup(doc), true); // If there are no values for a key (eg, key goes to an empty array),
                  // pretend we found one undefined value.

                  if (!branches.length) {
                    branches = [{
                      value: void 0
                    }];
                  }

                  const element = Object.create(null);
                  let usedPaths = false;
                  branches.forEach(branch => {
                    if (!branch.arrayIndices) {
                      // If there are no array indices for a branch, then it must be the
                      // only branch, because the only thing that produces multiple branches
                      // is the use of arrays.
                      if (branches.length > 1) {
                        throw Error('multiple branches but no array used?');
                      }

                      element[''] = branch.value;
                      return;
                    }

                    usedPaths = true;
                    const path = pathFromIndices(branch.arrayIndices);

                    if (hasOwn.call(element, path)) {
                      throw Error("duplicate path: ".concat(path));
                    }

                    element[path] = branch.value; // If two sort fields both go into arrays, they have to go into the
                    // exact same arrays and we have to find the same paths.  This is
                    // roughly the same condition that makes MongoDB throw this strange
                    // error message.  eg, the main thing is that if sort spec is {a: 1,
                    // b:1} then a and b cannot both be arrays.
                    //
                    // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'
                    // and 'a.x.y' are both arrays, but we don't allow this for now.
                    // #NestedArraySort
                    // XXX achieve full compatibility here

                    if (knownPaths && !hasOwn.call(knownPaths, path)) {
                      throw Error('cannot index parallel arrays');
                    }
                  });

                  if (knownPaths) {
                    // Similarly to above, paths must match everywhere, unless this is a
                    // non-array field.
                    if (!hasOwn.call(element, '') && Object.keys(knownPaths).length !== Object.keys(element).length) {
                      throw Error('cannot index parallel arrays!');
                    }
                  } else if (usedPaths) {
                    knownPaths = {};
                    Object.keys(element).forEach(path => {
                      knownPaths[path] = true;
                    });
                  }

                  return element;
                });

                if (!knownPaths) {
                  // Easy case: no use of arrays.
                  const soleKey = valuesByIndexAndPath.map(values => {
                    if (!hasOwn.call(values, '')) {
                      throw Error('no value in sole key case?');
                    }

                    return values[''];
                  });
                  cb(soleKey);
                  return;
                }

                Object.keys(knownPaths).forEach(path => {
                  const key = valuesByIndexAndPath.map(values => {
                    if (hasOwn.call(values, '')) {
                      return values[''];
                    }

                    if (!hasOwn.call(values, path)) {
                      throw Error('missing path?');
                    }

                    return values[path];
                  });
                  cb(key);
                });
              } // Returns a comparator that represents the sort specification (but not
              // including a possible geoquery distance tie-breaker).


              _getBaseComparator() {
                if (this._sortFunction) {
                  return this._sortFunction;
                } // If we're only sorting on geoquery distance and no specs, just say
                // everything is equal.


                if (!this._sortSpecParts.length) {
                  return (doc1, doc2) => 0;
                }

                return (doc1, doc2) => {
                  const key1 = this._getMinKeyFromDoc(doc1);

                  const key2 = this._getMinKeyFromDoc(doc2);

                  return this._compareKeys(key1, key2);
                };
              } // Finds the minimum key from the doc, according to the sort specs.  (We say
              // "minimum" here but this is with respect to the sort spec, so "descending"
              // sort fields mean we're finding the max for that field.)
              //
              // Note that this is NOT "find the minimum value of the first field, the
              // minimum value of the second field, etc"... it's "choose the
              // lexicographically minimum value of the key vector, allowing only keys which
              // you can find along the same paths".  ie, for a doc {a: [{x: 0, y: 5}, {x:
              // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and
              // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.


              _getMinKeyFromDoc(doc) {
                let minKey = null;

                this._generateKeysFromDoc(doc, key => {
                  if (minKey === null) {
                    minKey = key;
                    return;
                  }

                  if (this._compareKeys(key, minKey) < 0) {
                    minKey = key;
                  }
                });

                return minKey;
              }

              _getPaths() {
                return this._sortSpecParts.map(part => part.path);
              } // Given an index 'i', returns a comparator that compares two key arrays based
              // on field 'i'.


              _keyFieldComparator(i) {
                const invert = !this._sortSpecParts[i].ascending;
                return (key1, key2) => {
                  const compare = LocalCollection._f._cmp(key1[i], key2[i]);

                  return invert ? -compare : compare;
                };
              }

            }

            // Given an array of comparators
            // (functions (a,b)->(negative or positive or zero)), returns a single
            // comparator which uses each comparator in order and returns the first
            // non-zero value.
            function composeComparators(comparatorArray) {
              return (a, b) => {
                for (let i = 0; i < comparatorArray.length; ++i) {
                  const compare = comparatorArray[i](a, b);

                  if (compare !== 0) {
                    return compare;
                  }
                }

                return 0;
              };
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports3 = _require3("/node_modules/meteor/minimongo/minimongo_client.js");

  /* Exports */
  Package._define("minimongo", _exports3, {
    LocalCollection: LocalCollection,
    Minimongo: Minimongo,
    MinimongoTest: MinimongoTest,
    MinimongoError: MinimongoError
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var check, Match;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "check": { "match.js": function module(_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/check/match.js                                                                                       //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              check: () => check,
              Match: () => Match
            });
            let isPlainObject;
            _module.link("./isPlainObject", {
              isPlainObject(v) {
                isPlainObject = v;
              }

            }, 0);
            // Things we explicitly do NOT support:
            //    - heterogenous arrays
            const currentArgumentChecker = new Meteor.EnvironmentVariable();
            const hasOwn = Object.prototype.hasOwnProperty;
            /**
             * @summary Check that a value matches a [pattern](#matchpatterns).
             * If the value does not match the pattern, throw a `Match.Error`.
             *
             * Particularly useful to assert that arguments to a function have the right
             * types and structure.
             * @locus Anywhere
             * @param {Any} value The value to check
             * @param {MatchPattern} pattern The pattern to match `value` against
             */

            function check(value, pattern) {
              // Record that check got called, if somebody cared.
              //
              // We use getOrNullIfOutsideFiber so that it's OK to call check()
              // from non-Fiber server contexts; the downside is that if you forget to
              // bindEnvironment on some random callback in your method/publisher,
              // it might not find the argumentChecker and you'll get an error about
              // not checking an argument that it looks like you're checking (instead
              // of just getting a "Node code must run in a Fiber" error).
              const argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();

              if (argChecker) {
                argChecker.checking(value);
              }

              const result = testSubtree(value, pattern);

              if (result) {
                const err = new Match.Error(result.message);

                if (result.path) {
                  err.message += " in field ".concat(result.path);
                  err.path = result.path;
                }

                throw err;
              }
            }

            ;
            /**
             * @namespace Match
             * @summary The namespace for all Match types and methods.
             */

            const Match = {
              Optional: function (pattern) {
                return new Optional(pattern);
              },
              Maybe: function (pattern) {
                return new Maybe(pattern);
              },
              OneOf: function () {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                return new OneOf(args);
              },
              Any: ['__any__'],
              Where: function (condition) {
                return new Where(condition);
              },
              ObjectIncluding: function (pattern) {
                return new ObjectIncluding(pattern);
              },
              ObjectWithValues: function (pattern) {
                return new ObjectWithValues(pattern);
              },
              // Matches only signed 32-bit integers
              Integer: ['__integer__'],
              // XXX matchers should know how to describe themselves for errors
              Error: Meteor.makeErrorType('Match.Error', function (msg) {
                this.message = "Match error: ".concat(msg); // The path of the value that failed to match. Initially empty, this gets
                // populated by catching and rethrowing the exception as it goes back up the
                // stack.
                // E.g.: "vals[3].entity.created"

                this.path = ''; // If this gets sent over DDP, don't give full internal details but at least
                // provide something better than 500 Internal server error.

                this.sanitizedError = new Meteor.Error(400, 'Match failed');
              }),

              // Tests to see if value matches pattern. Unlike check, it merely returns true
              // or false (unless an error other than Match.Error was thrown). It does not
              // interact with _failIfArgumentsAreNotAllChecked.
              // XXX maybe also implement a Match.match which returns more information about
              //     failures but without using exception handling or doing what check()
              //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion

              /**
               * @summary Returns true if the value matches the pattern.
               * @locus Anywhere
               * @param {Any} value The value to check
               * @param {MatchPattern} pattern The pattern to match `value` against
               */
              test(value, pattern) {
                return !testSubtree(value, pattern);
              },

              // Runs `f.apply(context, args)`. If check() is not called on every element of
              // `args` (either directly or in the first level of an array), throws an error
              // (using `description` in the message).
              _failIfArgumentsAreNotAllChecked(f, context, args, description) {
                const argChecker = new ArgumentChecker(args, description);
                const result = currentArgumentChecker.withValue(argChecker, () => f.apply(context, args)); // If f didn't itself throw, make sure it checked all of its arguments.

                argChecker.throwUnlessAllArgumentsHaveBeenChecked();
                return result;
              }

            };

            class Optional {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            class Maybe {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            class OneOf {
              constructor(choices) {
                if (!choices || choices.length === 0) {
                  throw new Error('Must provide at least one choice to Match.OneOf');
                }

                this.choices = choices;
              }

            }

            class Where {
              constructor(condition) {
                this.condition = condition;
              }

            }

            class ObjectIncluding {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            class ObjectWithValues {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            const stringForErrorMessage = function (value) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (value === null) {
                return 'null';
              }

              if (options.onlyShowType) {
                return typeof value;
              } // Your average non-object things.  Saves from doing the try/catch below for.


              if (typeof value !== 'object') {
                return EJSON.stringify(value);
              }

              try {
                // Find objects with circular references since EJSON doesn't support them yet (Issue #4778 + Unaccepted PR)
                // If the native stringify is going to choke, EJSON.stringify is going to choke too.
                JSON.stringify(value);
              } catch (stringifyError) {
                if (stringifyError.name === 'TypeError') {
                  return typeof value;
                }
              }

              return EJSON.stringify(value);
            };

            const typeofChecks = [[String, 'string'], [Number, 'number'], [Boolean, 'boolean'], // While we don't allow undefined/function in EJSON, this is good for optional
            // arguments with OneOf.
            [Function, 'function'], [undefined, 'undefined']]; // Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.

            const testSubtree = (value, pattern) => {
              // Match anything!
              if (pattern === Match.Any) {
                return false;
              } // Basic atomic types.
              // Do not match boxed objects (e.g. String, Boolean)


              for (let i = 0; i < typeofChecks.length; ++i) {
                if (pattern === typeofChecks[i][0]) {
                  if (typeof value === typeofChecks[i][1]) {
                    return false;
                  }

                  return {
                    message: "Expected ".concat(typeofChecks[i][1], ", got ").concat(stringForErrorMessage(value, {
                      onlyShowType: true
                    })),
                    path: ''
                  };
                }
              }

              if (pattern === null) {
                if (value === null) {
                  return false;
                }

                return {
                  message: "Expected null, got ".concat(stringForErrorMessage(value)),
                  path: ''
                };
              } // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.


              if (typeof pattern === 'string' || typeof pattern === 'number' || typeof pattern === 'boolean') {
                if (value === pattern) {
                  return false;
                }

                return {
                  message: "Expected ".concat(pattern, ", got ").concat(stringForErrorMessage(value)),
                  path: ''
                };
              } // Match.Integer is special type encoded with array


              if (pattern === Match.Integer) {
                // There is no consistent and reliable way to check if variable is a 64-bit
                // integer. One of the popular solutions is to get reminder of division by 1
                // but this method fails on really large floats with big precision.
                // E.g.: 1.348192308491824e+23 % 1 === 0 in V8
                // Bitwise operators work consistantly but always cast variable to 32-bit
                // signed integer according to JavaScript specs.
                if (typeof value === 'number' && (value | 0) === value) {
                  return false;
                }

                return {
                  message: "Expected Integer, got ".concat(stringForErrorMessage(value)),
                  path: ''
                };
              } // 'Object' is shorthand for Match.ObjectIncluding({});


              if (pattern === Object) {
                pattern = Match.ObjectIncluding({});
              } // Array (checked AFTER Any, which is implemented as an Array).


              if (pattern instanceof Array) {
                if (pattern.length !== 1) {
                  return {
                    message: "Bad pattern: arrays must have one type element ".concat(stringForErrorMessage(pattern)),
                    path: ''
                  };
                }

                if (!Array.isArray(value) && !isArguments(value)) {
                  return {
                    message: "Expected array, got ".concat(stringForErrorMessage(value)),
                    path: ''
                  };
                }

                for (let i = 0, length = value.length; i < length; i++) {
                  const result = testSubtree(value[i], pattern[0]);

                  if (result) {
                    result.path = _prependPath(i, result.path);
                    return result;
                  }
                }

                return false;
              } // Arbitrary validation checks. The condition can return false or throw a
              // Match.Error (ie, it can internally use check()) to fail.


              if (pattern instanceof Where) {
                let result;

                try {
                  result = pattern.condition(value);
                } catch (err) {
                  if (!(err instanceof Match.Error)) {
                    throw err;
                  }

                  return {
                    message: err.message,
                    path: err.path
                  };
                }

                if (result) {
                  return false;
                } // XXX this error is terrible


                return {
                  message: 'Failed Match.Where validation',
                  path: ''
                };
              }

              if (pattern instanceof Maybe) {
                pattern = Match.OneOf(undefined, null, pattern.pattern);
              } else if (pattern instanceof Optional) {
                pattern = Match.OneOf(undefined, pattern.pattern);
              }

              if (pattern instanceof OneOf) {
                for (let i = 0; i < pattern.choices.length; ++i) {
                  const result = testSubtree(value, pattern.choices[i]);

                  if (!result) {
                    // No error? Yay, return.
                    return false;
                  } // Match errors just mean try another choice.
                } // XXX this error is terrible


                return {
                  message: 'Failed Match.OneOf, Match.Maybe or Match.Optional validation',
                  path: ''
                };
              } // A function that isn't something we special-case is assumed to be a
              // constructor.


              if (pattern instanceof Function) {
                if (value instanceof pattern) {
                  return false;
                }

                return {
                  message: "Expected ".concat(pattern.name || 'particular constructor'),
                  path: ''
                };
              }

              let unknownKeysAllowed = false;
              let unknownKeyPattern;

              if (pattern instanceof ObjectIncluding) {
                unknownKeysAllowed = true;
                pattern = pattern.pattern;
              }

              if (pattern instanceof ObjectWithValues) {
                unknownKeysAllowed = true;
                unknownKeyPattern = [pattern.pattern];
                pattern = {}; // no required keys
              }

              if (typeof pattern !== 'object') {
                return {
                  message: 'Bad pattern: unknown pattern type',
                  path: ''
                };
              } // An object, with required and optional keys. Note that this does NOT do
              // structural matches against objects of special types that happen to match
              // the pattern: this really needs to be a plain old {Object}!


              if (typeof value !== 'object') {
                return {
                  message: "Expected object, got ".concat(typeof value),
                  path: ''
                };
              }

              if (value === null) {
                return {
                  message: "Expected object, got null",
                  path: ''
                };
              }

              if (!isPlainObject(value)) {
                return {
                  message: "Expected plain object",
                  path: ''
                };
              }

              const requiredPatterns = Object.create(null);
              const optionalPatterns = Object.create(null);
              Object.keys(pattern).forEach(key => {
                const subPattern = pattern[key];

                if (subPattern instanceof Optional || subPattern instanceof Maybe) {
                  optionalPatterns[key] = subPattern.pattern;
                } else {
                  requiredPatterns[key] = subPattern;
                }
              });

              for (let key in Object(value)) {
                const subValue = value[key];

                if (hasOwn.call(requiredPatterns, key)) {
                  const result = testSubtree(subValue, requiredPatterns[key]);

                  if (result) {
                    result.path = _prependPath(key, result.path);
                    return result;
                  }

                  delete requiredPatterns[key];
                } else if (hasOwn.call(optionalPatterns, key)) {
                  const result = testSubtree(subValue, optionalPatterns[key]);

                  if (result) {
                    result.path = _prependPath(key, result.path);
                    return result;
                  }
                } else {
                  if (!unknownKeysAllowed) {
                    return {
                      message: 'Unknown key',
                      path: key
                    };
                  }

                  if (unknownKeyPattern) {
                    const result = testSubtree(subValue, unknownKeyPattern[0]);

                    if (result) {
                      result.path = _prependPath(key, result.path);
                      return result;
                    }
                  }
                }
              }

              const keys = Object.keys(requiredPatterns);

              if (keys.length) {
                return {
                  message: "Missing key '".concat(keys[0], "'"),
                  path: ''
                };
              }
            };

            class ArgumentChecker {
              constructor(args, description) {
                // Make a SHALLOW copy of the arguments. (We'll be doing identity checks
                // against its contents.)
                this.args = [...args]; // Since the common case will be to check arguments in order, and we splice
                // out arguments when we check them, make it so we splice out from the end
                // rather than the beginning.

                this.args.reverse();
                this.description = description;
              }

              checking(value) {
                if (this._checkingOneValue(value)) {
                  return;
                } // Allow check(arguments, [String]) or check(arguments.slice(1), [String])
                // or check([foo, bar], [String]) to count... but only if value wasn't
                // itself an argument.


                if (Array.isArray(value) || isArguments(value)) {
                  Array.prototype.forEach.call(value, this._checkingOneValue.bind(this));
                }
              }

              _checkingOneValue(value) {
                for (let i = 0; i < this.args.length; ++i) {
                  // Is this value one of the arguments? (This can have a false positive if
                  // the argument is an interned primitive, but it's still a good enough
                  // check.)
                  // (NaN is not === to itself, so we have to check specially.)
                  if (value === this.args[i] || Number.isNaN(value) && Number.isNaN(this.args[i])) {
                    this.args.splice(i, 1);
                    return true;
                  }
                }

                return false;
              }

              throwUnlessAllArgumentsHaveBeenChecked() {
                if (this.args.length > 0) throw new Error("Did not check() all arguments during ".concat(this.description));
              }

            }

            const _jsKeywords = ['do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'false', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof']; // Assumes the base of path is already escaped properly
            // returns key + base

            const _prependPath = (key, base) => {
              if (typeof key === 'number' || key.match(/^[0-9]+$/)) {
                key = "[".concat(key, "]");
              } else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _jsKeywords.indexOf(key) >= 0) {
                key = JSON.stringify([key]);
              }

              if (base && base[0] !== '[') {
                return "".concat(key, ".").concat(base);
              }

              return key + base;
            };

            const isObject = value => typeof value === 'object' && value !== null;

            const baseIsArguments = item => isObject(item) && Object.prototype.toString.call(item) === '[object Arguments]';

            const isArguments = baseIsArguments(function () {
              return arguments;
            }()) ? baseIsArguments : value => isObject(value) && typeof value.callee === 'function';
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "isPlainObject.js": function module(_require3, _exports3, _module2) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/check/isPlainObject.js                                                                               //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module2.export({
              isPlainObject: () => isPlainObject
            });
            // Copy of jQuery.isPlainObject for the server side from jQuery v3.1.1.
            const class2type = {};
            const toString = class2type.toString;
            const hasOwn = Object.prototype.hasOwnProperty;
            const fnToString = hasOwn.toString;
            const ObjectFunctionString = fnToString.call(Object);
            const getProto = Object.getPrototypeOf;

            const isPlainObject = obj => {
              let proto;
              let Ctor; // Detect obvious negatives
              // Use toString instead of jQuery.type to catch host objects

              if (!obj || toString.call(obj) !== '[object Object]') {
                return false;
              }

              proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

              if (!proto) {
                return true;
              } // Objects with prototype are plain iff they were constructed by a global Object function


              Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
              return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString;
            };
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/check/match.js");

  /* Exports */
  Package._define("check", _exports2, {
    check: check,
    Match: Match
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Random = Package.random.Random;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Retry;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "retry": { "retry.js": function module(_require, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////////////
            //                                                                              //
            // packages/retry/retry.js                                                      //
            //                                                                              //
            //////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Retry: () => Retry
            });

            class Retry {
              constructor() {
                let {
                  baseTimeout = 1000,
                  exponent = 2.2,
                  // The default is high-ish to ensure a server can recover from a
                  // failure caused by load.
                  maxTimeout = 5 * 60 * 1000,
                  minTimeout = 10,
                  minCount = 2,
                  fuzz = 0.5
                } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                this.baseTimeout = baseTimeout;
                this.exponent = exponent;
                this.maxTimeout = maxTimeout;
                this.minTimeout = minTimeout;
                this.minCount = minCount;
                this.fuzz = fuzz;
                this.retryTimer = null;
              } // Reset a pending retry, if any.


              clear() {
                if (this.retryTimer) {
                  clearTimeout(this.retryTimer);
                }

                this.retryTimer = null;
              } // Calculate how long to wait in milliseconds to retry, based on the
              // `count` of which retry this is.


              _timeout(count) {
                if (count < this.minCount) {
                  return this.minTimeout;
                } // fuzz the timeout randomly, to avoid reconnect storms when a
                // server goes down.


                var timeout = Math.min(this.maxTimeout, this.baseTimeout * Math.pow(this.exponent, count)) * (Random.fraction() * this.fuzz + (1 - this.fuzz / 2));
                return timeout;
              } // Call `fn` after a delay, based on the `count` of which retry this is.


              retryLater(count, fn) {
                var timeout = this._timeout(count);

                if (this.retryTimer) clearTimeout(this.retryTimer);
                this.retryTimer = Meteor.setTimeout(fn, timeout);
                return timeout;
              }

            }
            //////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/retry/retry.js");

  /* Exports */
  Package._define("retry", _exports2, {
    Retry: Retry
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var options, Hook;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "callback-hook": { "hook.js": function module(_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                 //
            // packages/callback-hook/hook.js                                                                  //
            //                                                                                                 //
            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Hook: () => Hook
            });
            // XXX This pattern is under development. Do not add more callsites
            // using this package for now. See:
            // https://meteor.hackpad.com/Design-proposal-Hooks-YxvgEW06q6f
            //
            // Encapsulates the pattern of registering callbacks on a hook.
            //
            // The `each` method of the hook calls its iterator function argument
            // with each registered callback.  This allows the hook to
            // conditionally decide not to call the callback (if, for example, the
            // observed object has been closed or terminated).
            //
            // By default, callbacks are bound with `Meteor.bindEnvironment`, so they will be
            // called with the Meteor environment of the calling code that
            // registered the callback. Override by passing { bindEnvironment: false }
            // to the constructor.
            //
            // Registering a callback returns an object with a single `stop`
            // method which unregisters the callback.
            //
            // The code is careful to allow a callback to be safely unregistered
            // while the callbacks are being iterated over.
            //
            // If the hook is configured with the `exceptionHandler` option, the
            // handler will be called if a called callback throws an exception.
            // By default (if the exception handler doesn't itself throw an
            // exception, or if the iterator function doesn't return a falsy value
            // to terminate the calling of callbacks), the remaining callbacks
            // will still be called.
            //
            // Alternatively, the `debugPrintExceptions` option can be specified
            // as string describing the callback.  On an exception the string and
            // the exception will be printed to the console log with
            // `Meteor._debug`, and the exception otherwise ignored.
            //
            // If an exception handler isn't specified, exceptions thrown in the
            // callback will propagate up to the iterator function, and will
            // terminate calling the remaining callbacks if not caught.
            const hasOwn = Object.prototype.hasOwnProperty;

            class Hook {
              constructor(options) {
                options = options || {};
                this.nextCallbackId = 0;
                this.callbacks = Object.create(null); // Whether to wrap callbacks with Meteor.bindEnvironment

                this.bindEnvironment = true;

                if (options.bindEnvironment === false) {
                  this.bindEnvironment = false;
                }

                if (options.exceptionHandler) {
                  this.exceptionHandler = options.exceptionHandler;
                } else if (options.debugPrintExceptions) {
                  if (typeof options.debugPrintExceptions !== "string") {
                    throw new Error("Hook option debugPrintExceptions should be a string");
                  }

                  this.exceptionHandler = options.debugPrintExceptions;
                }
              }

              register(callback) {
                var exceptionHandler = this.exceptionHandler || function (exception) {
                  // Note: this relies on the undocumented fact that if bindEnvironment's
                  // onException throws, and you are invoking the callback either in the
                  // browser or from within a Fiber in Node, the exception is propagated.
                  throw exception;
                };

                if (this.bindEnvironment) {
                  callback = Meteor.bindEnvironment(callback, exceptionHandler);
                } else {
                  callback = dontBindEnvironment(callback, exceptionHandler);
                }

                var id = this.nextCallbackId++;
                this.callbacks[id] = callback;
                return {
                  callback,
                  stop: () => {
                    delete this.callbacks[id];
                  }
                };
              } // For each registered callback, call the passed iterator function
              // with the callback.
              //
              // The iterator function can choose whether or not to call the
              // callback.  (For example, it might not call the callback if the
              // observed object has been closed or terminated).
              //
              // The iteration is stopped if the iterator function returns a falsy
              // value or throws an exception.
              //


              each(iterator) {
                // Invoking bindEnvironment'd callbacks outside of a Fiber in Node doesn't
                // run them to completion (and exceptions thrown from onException are not
                // propagated), so we need to be in a Fiber.
                Meteor._nodeCodeMustBeInFiber();

                var ids = Object.keys(this.callbacks);

                for (var i = 0; i < ids.length; ++i) {
                  var id = ids[i]; // check to see if the callback was removed during iteration

                  if (hasOwn.call(this.callbacks, id)) {
                    var callback = this.callbacks[id];

                    if (!iterator(callback)) {
                      break;
                    }
                  }
                }
              }

            }

            // Copied from Meteor.bindEnvironment and removed all the env stuff.
            function dontBindEnvironment(func, onException, _this) {
              if (!onException || typeof onException === 'string') {
                var description = onException || "callback of async function";

                onException = function (error) {
                  Meteor._debug("Exception in " + description, error);
                };
              }

              return function () {
                try {
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  var ret = func.apply(_this, args);
                } catch (e) {
                  onException(e);
                }

                return ret;
              };
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/callback-hook/hook.js");

  /* Exports */
  Package._define("callback-hook", _exports2, {
    Hook: Hook
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var DDPCommon;

  var _require = meteorInstall({ "node_modules": { "meteor": { "ddp-common": { "namespace.js": function _module() {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/namespace.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            /**
             * @namespace DDPCommon
             * @summary Namespace for DDPCommon-related methods/classes. Shared between 
             * `ddp-client` and `ddp-server`, where the ddp-client is the implementation
             * of a ddp client for both client AND server; and the ddp server is the
             * implementation of the livedata server and stream server. Common 
             * functionality shared between both can be shared under this namespace
             */
            DDPCommon = {};
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "heartbeat.js": function _module2() {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/heartbeat.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Heartbeat options:
            //   heartbeatInterval: interval to send pings, in milliseconds.
            //   heartbeatTimeout: timeout to close the connection if a reply isn't
            //     received, in milliseconds.
            //   sendPing: function to call to send a ping on the connection.
            //   onTimeout: function to call to close the connection.
            DDPCommon.Heartbeat = class Heartbeat {
              constructor(options) {
                this.heartbeatInterval = options.heartbeatInterval;
                this.heartbeatTimeout = options.heartbeatTimeout;
                this._sendPing = options.sendPing;
                this._onTimeout = options.onTimeout;
                this._seenPacket = false;
                this._heartbeatIntervalHandle = null;
                this._heartbeatTimeoutHandle = null;
              }

              stop() {
                this._clearHeartbeatIntervalTimer();

                this._clearHeartbeatTimeoutTimer();
              }

              start() {
                this.stop();

                this._startHeartbeatIntervalTimer();
              }

              _startHeartbeatIntervalTimer() {
                this._heartbeatIntervalHandle = Meteor.setInterval(() => this._heartbeatIntervalFired(), this.heartbeatInterval);
              }

              _startHeartbeatTimeoutTimer() {
                this._heartbeatTimeoutHandle = Meteor.setTimeout(() => this._heartbeatTimeoutFired(), this.heartbeatTimeout);
              }

              _clearHeartbeatIntervalTimer() {
                if (this._heartbeatIntervalHandle) {
                  Meteor.clearInterval(this._heartbeatIntervalHandle);
                  this._heartbeatIntervalHandle = null;
                }
              }

              _clearHeartbeatTimeoutTimer() {
                if (this._heartbeatTimeoutHandle) {
                  Meteor.clearTimeout(this._heartbeatTimeoutHandle);
                  this._heartbeatTimeoutHandle = null;
                }
              } // The heartbeat interval timer is fired when we should send a ping.


              _heartbeatIntervalFired() {
                // don't send ping if we've seen a packet since we last checked,
                // *or* if we have already sent a ping and are awaiting a timeout.
                // That shouldn't happen, but it's possible if
                // `this.heartbeatInterval` is smaller than
                // `this.heartbeatTimeout`.
                if (!this._seenPacket && !this._heartbeatTimeoutHandle) {
                  this._sendPing(); // Set up timeout, in case a pong doesn't arrive in time.


                  this._startHeartbeatTimeoutTimer();
                }

                this._seenPacket = false;
              } // The heartbeat timeout timer is fired when we sent a ping, but we
              // timed out waiting for the pong.


              _heartbeatTimeoutFired() {
                this._heartbeatTimeoutHandle = null;

                this._onTimeout();
              }

              messageReceived() {
                // Tell periodic checkin that we have seen a packet, and thus it
                // does not need to send a ping this cycle.
                this._seenPacket = true; // If we were waiting for a pong, we got it.

                if (this._heartbeatTimeoutHandle) {
                  this._clearHeartbeatTimeoutTimer();
                }
              }

            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "utils.js": function module(_require2, _exports, _module3) {

            _module3.export({
              hasOwn: () => hasOwn,
              slice: () => slice,
              keys: () => keys,
              isEmpty: () => isEmpty,
              last: () => last
            });
            const hasOwn = Object.prototype.hasOwnProperty;
            const slice = Array.prototype.slice;

            function keys(obj) {
              return Object.keys(Object(obj));
            }

            function isEmpty(obj) {
              if (obj == null) {
                return true;
              }

              if (Array.isArray(obj) || typeof obj === "string") {
                return obj.length === 0;
              }

              for (const key in obj) {
                if (hasOwn.call(obj, key)) {
                  return false;
                }
              }

              return true;
            }

            function last(array, n, guard) {
              if (array == null) {
                return;
              }

              if (n == null || guard) {
                return array[array.length - 1];
              }

              return slice.call(array, Math.max(array.length - n, 0));
            }

            DDPCommon.SUPPORTED_DDP_VERSIONS = ['1', 'pre2', 'pre1'];

            DDPCommon.parseDDP = function (stringMessage) {
              try {
                var msg = JSON.parse(stringMessage);
              } catch (e) {
                Meteor._debug("Discarding message with invalid JSON", stringMessage);

                return null;
              } // DDP messages must be objects.


              if (msg === null || typeof msg !== 'object') {
                Meteor._debug("Discarding non-object DDP message", stringMessage);

                return null;
              } // massage msg to get it into "abstract ddp" rather than "wire ddp" format.
              // switch between "cleared" rep of unsetting fields and "undefined"
              // rep of same


              if (hasOwn.call(msg, 'cleared')) {
                if (!hasOwn.call(msg, 'fields')) {
                  msg.fields = {};
                }

                msg.cleared.forEach(clearKey => {
                  msg.fields[clearKey] = undefined;
                });
                delete msg.cleared;
              }

              ['fields', 'params', 'result'].forEach(field => {
                if (hasOwn.call(msg, field)) {
                  msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);
                }
              });
              return msg;
            };

            DDPCommon.stringifyDDP = function (msg) {
              const copy = EJSON.clone(msg); // swizzle 'changed' messages from 'fields undefined' rep to 'fields
              // and cleared' rep

              if (hasOwn.call(msg, 'fields')) {
                const cleared = [];
                Object.keys(msg.fields).forEach(key => {
                  const value = msg.fields[key];

                  if (typeof value === "undefined") {
                    cleared.push(key);
                    delete copy.fields[key];
                  }
                });

                if (!isEmpty(cleared)) {
                  copy.cleared = cleared;
                }

                if (isEmpty(copy.fields)) {
                  delete copy.fields;
                }
              } // adjust types to basic


              ['fields', 'params', 'result'].forEach(field => {
                if (hasOwn.call(copy, field)) {
                  copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);
                }
              });

              if (msg.id && typeof msg.id !== 'string') {
                throw new Error("Message id is not a string");
              }

              return JSON.stringify(copy);
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "method_invocation.js": function _module4() {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/method_invocation.js                                                                           //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Instance name is this because it is usually referred to as this inside a
            // method definition

            /**
             * @summary The state for a single invocation of a method, referenced by this
             * inside a method definition.
             * @param {Object} options
             * @instanceName this
             * @showInstanceName true
             */
            DDPCommon.MethodInvocation = class MethodInvocation {
              constructor(options) {
                // true if we're running not the actual method, but a stub (that is,
                // if we're on a client (which may be a browser, or in the future a
                // server connecting to another server) and presently running a
                // simulation of a server-side method for latency compensation
                // purposes). not currently true except in a client such as a browser,
                // since there's usually no point in running stubs unless you have a
                // zero-latency connection to the user.

                /**
                 * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.
                 * @locus Anywhere
                 * @name  isSimulation
                 * @memberOf DDPCommon.MethodInvocation
                 * @instance
                 * @type {Boolean}
                 */
                this.isSimulation = options.isSimulation; // call this function to allow other method invocations (from the
                // same client) to continue running without waiting for this one to
                // complete.

                this._unblock = options.unblock || function () {};

                this._calledUnblock = false; // current user id

                /**
                 * @summary The id of the user that made this method call, or `null` if no user was logged in.
                 * @locus Anywhere
                 * @name  userId
                 * @memberOf DDPCommon.MethodInvocation
                 * @instance
                 */

                this.userId = options.userId; // sets current user id in all appropriate server contexts and
                // reruns subscriptions

                this._setUserId = options.setUserId || function () {}; // On the server, the connection this method call came in on.

                /**
                 * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`.
                 * @locus Server
                 * @name  connection
                 * @memberOf DDPCommon.MethodInvocation
                 * @instance
                 */

                this.connection = options.connection; // The seed for randomStream value generation

                this.randomSeed = options.randomSeed; // This is set by RandomStream.get; and holds the random stream state

                this.randomStream = null;
              }
              /**
               * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.
               * @locus Server
               * @memberOf DDPCommon.MethodInvocation
               * @instance
               */

              unblock() {
                this._calledUnblock = true;

                this._unblock();
              }
              /**
               * @summary Set the logged in user.
               * @locus Server
               * @memberOf DDPCommon.MethodInvocation
               * @instance
               * @param {String | null} userId The value that should be returned by `userId` on this connection.
               */

              setUserId(userId) {
                if (this._calledUnblock) {
                  throw new Error("Can't call setUserId in a method after calling unblock");
                }

                this.userId = userId;

                this._setUserId(userId);
              }

            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "random_stream.js": function _module5() {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/random_stream.js                                                                               //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // RandomStream allows for generation of pseudo-random values, from a seed.
            //
            // We use this for consistent 'random' numbers across the client and server.
            // We want to generate probably-unique IDs on the client, and we ideally want
            // the server to generate the same IDs when it executes the method.
            //
            // For generated values to be the same, we must seed ourselves the same way,
            // and we must keep track of the current state of our pseudo-random generators.
            // We call this state the scope. By default, we use the current DDP method
            // invocation as our scope.  DDP now allows the client to specify a randomSeed.
            // If a randomSeed is provided it will be used to seed our random sequences.
            // In this way, client and server method calls will generate the same values.
            //
            // We expose multiple named streams; each stream is independent
            // and is seeded differently (but predictably from the name).
            // By using multiple streams, we support reordering of requests,
            // as long as they occur on different streams.
            //
            // @param options {Optional Object}
            //   seed: Array or value - Seed value(s) for the generator.
            //                          If an array, will be used as-is
            //                          If a value, will be converted to a single-value array
            //                          If omitted, a random array will be used as the seed.
            DDPCommon.RandomStream = class RandomStream {
              constructor(options) {
                this.seed = [].concat(options.seed || randomToken());
                this.sequences = Object.create(null);
              } // Get a random sequence with the specified name, creating it if does not exist.
              // New sequences are seeded with the seed concatenated with the name.
              // By passing a seed into Random.create, we use the Alea generator.


              _sequence(name) {
                var self = this;
                var sequence = self.sequences[name] || null;

                if (sequence === null) {
                  var sequenceSeed = self.seed.concat(name);

                  for (var i = 0; i < sequenceSeed.length; i++) {
                    if (typeof sequenceSeed[i] === "function") {
                      sequenceSeed[i] = sequenceSeed[i]();
                    }
                  }

                  self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);
                }

                return sequence;
              }

            }; // Returns a random string of sufficient length for a random seed.
            // This is a placeholder function; a similar function is planned
            // for Random itself; when that is added we should remove this function,
            // and call Random's randomToken instead.

            function randomToken() {
              return Random.hexString(20);
            }

            ; // Returns the random stream with the specified name, in the specified
            // scope. If a scope is passed, then we use that to seed a (not
            // cryptographically secure) PRNG using the fast Alea algorithm.  If
            // scope is null (or otherwise falsey) then we use a generated seed.
            //
            // However, scope will normally be the current DDP method invocation,
            // so we'll use the stream with the specified name, and we should get
            // consistent values on the client and server sides of a method call.

            DDPCommon.RandomStream.get = function (scope, name) {
              if (!name) {
                name = "default";
              }

              if (!scope) {
                // There was no scope passed in; the sequence won't actually be
                // reproducible. but make it fast (and not cryptographically
                // secure) anyways, so that the behavior is similar to what you'd
                // get by passing in a scope.
                return Random.insecure;
              }

              var randomStream = scope.randomStream;

              if (!randomStream) {
                scope.randomStream = randomStream = new DDPCommon.RandomStream({
                  seed: scope.randomSeed
                });
              }

              return randomStream._sequence(name);
            }; // Creates a randomSeed for passing to a method call.
            // Note that we take enclosing as an argument,
            // though we expect it to be DDP._CurrentMethodInvocation.get()
            // However, we often evaluate makeRpcSeed lazily, and thus the relevant
            // invocation may not be the one currently in scope.
            // If enclosing is null, we'll use Random and values won't be repeatable.


            DDPCommon.makeRpcSeed = function (enclosing, methodName) {
              var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);
              return stream.hexString(20);
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/ddp-common/namespace.js");
  _require("/node_modules/meteor/ddp-common/heartbeat.js");
  _require("/node_modules/meteor/ddp-common/utils.js");
  _require("/node_modules/meteor/ddp-common/method_invocation.js");
  _require("/node_modules/meteor/ddp-common/random_stream.js");

  /* Exports */
  Package._define("ddp-common", {
    DDPCommon: DDPCommon
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Reload;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "reload": { "reload.js": function module(_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                           //
            // packages/reload/reload.js                                                                 //
            //                                                                                           //
            ///////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Reload: () => Reload
            });
            const Reload = {};
            var KEY_NAME = 'Meteor_Reload';
            var old_data = {}; // read in old data at startup.

            var old_json; // This logic for sessionStorage detection is based on browserstate/history.js

            var safeSessionStorage = null;

            try {
              // This throws a SecurityError on Chrome if cookies & localStorage are
              // explicitly disabled
              //
              // On Firefox with dom.storage.enabled set to false, sessionStorage is null
              //
              // We can't even do (typeof sessionStorage) on Chrome, it throws.  So we rely
              // on the throw if sessionStorage == null; the alternative is browser
              // detection, but this seems better.
              safeSessionStorage = window.sessionStorage; // Check we can actually use it

              if (safeSessionStorage) {
                safeSessionStorage.setItem('__dummy__', '1');
                safeSessionStorage.removeItem('__dummy__');
              } else {
                // Be consistently null, for safety
                safeSessionStorage = null;
              }
            } catch (e) {
              // Expected on chrome with strict security, or if sessionStorage not supported
              safeSessionStorage = null;
            } // Exported for test.


            Reload._getData = function () {
              return safeSessionStorage && safeSessionStorage.getItem(KEY_NAME);
            };

            if (safeSessionStorage) {
              old_json = Reload._getData();
              safeSessionStorage.removeItem(KEY_NAME);
            } else {// Unsupported browser (IE 6,7) or locked down security settings.
              // No session resumption.
              // Meteor._debug("XXX UNSUPPORTED BROWSER/SETTINGS");
            }

            if (!old_json) old_json = '{}';
            var old_parsed = {};

            try {
              old_parsed = JSON.parse(old_json);

              if (typeof old_parsed !== "object") {
                Meteor._debug("Got bad data on reload. Ignoring.");

                old_parsed = {};
              }
            } catch (err) {
              Meteor._debug("Got invalid JSON on reload. Ignoring.");
            }

            if (old_parsed.reload && typeof old_parsed.data === "object") {
              // Meteor._debug("Restoring reload data.");
              old_data = old_parsed.data;
            }

            var providers = []; ////////// External API //////////
            // Packages that support migration should register themselves by calling
            // this function. When it's time to migrate, callback will be called
            // with one argument, the "retry function," and an optional 'option'
            // argument (containing a key 'immediateMigration'). If the package
            // is ready to migrate, it should return [true, data], where data is
            // its migration data, an arbitrary JSON value (or [true] if it has
            // no migration data this time). If the package needs more time
            // before it is ready to migrate, it should return false. Then, once
            // it is ready to migrating again, it should call the retry
            // function. The retry function will return immediately, but will
            // schedule the migration to be retried, meaning that every package
            // will be polled once again for its migration data. If they are all
            // ready this time, then the migration will happen. name must be set if there
            // is migration data. If 'immediateMigration' is set in the options
            // argument, then it doesn't matter whether the package is ready to
            // migrate or not; the reload will happen immediately without waiting
            // (used for OAuth redirect login).
            //

            Reload._onMigrate = function (name, callback) {
              if (!callback) {
                // name not provided, so first arg is callback.
                callback = name;
                name = undefined;
              }

              providers.push({
                name: name,
                callback: callback
              });
            }; // Called by packages when they start up.
            // Returns the object that was saved, or undefined if none saved.
            //


            Reload._migrationData = function (name) {
              return old_data[name];
            }; // Options are the same as for `Reload._migrate`.


            var pollProviders = function (tryReload, options) {
              tryReload = tryReload || function () {};

              options = options || {};
              var migrationData = {};
              var remaining = providers.slice(0);
              var allReady = true;

              while (remaining.length) {
                var p = remaining.shift();
                var status = p.callback(tryReload, options);
                if (!status[0]) allReady = false;
                if (status.length > 1 && p.name) migrationData[p.name] = status[1];
              }

              ;
              if (allReady || options.immediateMigration) return migrationData;else return null;
            }; // Options are:
            //  - immediateMigration: true if the page will be reloaded immediately
            //    regardless of whether packages report that they are ready or not.


            Reload._migrate = function (tryReload, options) {
              // Make sure each package is ready to go, and collect their
              // migration data
              var migrationData = pollProviders(tryReload, options);
              if (migrationData === null) return false; // not ready yet..

              try {
                // Persist the migration data
                var json = JSON.stringify({
                  data: migrationData,
                  reload: true
                });
              } catch (err) {
                Meteor._debug("Couldn't serialize data for migration", migrationData);

                throw err;
              }

              if (safeSessionStorage) {
                try {
                  safeSessionStorage.setItem(KEY_NAME, json);
                } catch (err) {
                  // We should have already checked this, but just log - don't throw
                  Meteor._debug("Couldn't save data for migration to sessionStorage", err);
                }
              } else {
                Meteor._debug("Browser does not support sessionStorage. Not saving migration state.");
              }

              return true;
            }; // Allows tests to isolate the list of providers.


            Reload._withFreshProvidersForTest = function (f) {
              var originalProviders = providers.slice(0);
              providers = [];

              try {
                f();
              } finally {
                providers = originalProviders;
              }
            }; // Migrating reload: reload this page (presumably to pick up a new
            // version of the code or assets), but save the program state and
            // migrate it over. This function returns immediately. The reload
            // will happen at some point in the future once all of the packages
            // are ready to migrate.
            //


            var reloading = false;

            Reload._reload = function (options) {
              options = options || {};
              if (reloading) return;
              reloading = true;

              function tryReload() {
                setTimeout(reload, 1);
              }

              function forceBrowserReload() {
                // We'd like to make the browser reload the page using location.replace()
                // instead of location.reload(), because this avoids validating assets
                // with the server if we still have a valid cached copy. This doesn't work
                // when the location contains a hash however, because that wouldn't reload
                // the page and just scroll to the hash location instead.
                if (window.location.hash || window.location.href.endsWith("#")) {
                  window.location.reload();
                } else {
                  window.location.replace(window.location.href);
                }
              }

              function reload() {
                if (Reload._migrate(tryReload, options)) {
                  if (Meteor.isCordova) {
                    WebAppLocalServer.switchToPendingVersion(() => {
                      forceBrowserReload();
                    });
                  } else {
                    forceBrowserReload();
                  }
                }
              }

              tryReload();
            };
            ///////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/reload/reload.js");

  /* Exports */
  Package._define("reload", _exports2, {
    Reload: Reload
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Retry = Package.retry.Retry;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var options, SockJS;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "socket-stream-client": { "browser.js": function module(_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/browser.js                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            _module.export({
              ClientStream: () => ClientStream
            });
            let toSockjsUrl, toWebsocketUrl;
            _module.link("./urls.js", {
              toSockjsUrl(v) {
                toSockjsUrl = v;
              },

              toWebsocketUrl(v) {
                toWebsocketUrl = v;
              }

            }, 0);
            let StreamClientCommon;
            _module.link("./common.js", {
              StreamClientCommon(v) {
                StreamClientCommon = v;
              }

            }, 1);
            _module.link("./sockjs-0.3.4.js");

            class ClientStream extends StreamClientCommon {
              // @param url {String} URL to Meteor app
              //   "http://subdomain.meteor.com/" or "/" or
              //   "ddp+sockjs://foo-**.meteor.com/sockjs"
              constructor(url, options) {
                super(options);

                this._initCommon(this.options); //// Constants
                // how long between hearing heartbeat from the server until we declare
                // the connection dead. heartbeats come every 45s (stream_server.js)
                //
                // NOTE: this is a older timeout mechanism. We now send heartbeats at
                // the DDP level (https://github.com/meteor/meteor/pull/1865), and
                // expect those timeouts to kill a non-responsive connection before
                // this timeout fires. This is kept around for compatibility (when
                // talking to a server that doesn't support DDP heartbeats) and can be
                // removed later.


                this.HEARTBEAT_TIMEOUT = 100 * 1000;
                this.rawUrl = url;
                this.socket = null;
                this.lastError = null;
                this.heartbeatTimer = null; // Listen to global 'online' event if we are running in a browser.
                // (IE8 does not support addEventListener)

                if (typeof window !== 'undefined' && window.addEventListener) window.addEventListener('online', this._online.bind(this), false
                /* useCapture. make FF3.6 happy. */
                ); //// Kickoff!

                this._launchConnection();
              } // data is a utf8 string. Data sent while not connected is dropped on
              // the floor, and it is up the user of this API to retransmit lost
              // messages on 'reset'


              send(data) {
                if (this.currentStatus.connected) {
                  this.socket.send(data);
                }
              } // Changes where this connection points


              _changeUrl(url) {
                this.rawUrl = url;
              }

              _connected() {
                if (this.connectionTimer) {
                  clearTimeout(this.connectionTimer);
                  this.connectionTimer = null;
                }

                if (this.currentStatus.connected) {
                  // already connected. do nothing. this probably shouldn't happen.
                  return;
                } // update status


                this.currentStatus.status = 'connected';
                this.currentStatus.connected = true;
                this.currentStatus.retryCount = 0;
                this.statusChanged(); // fire resets. This must come after status change so that clients
                // can call send from within a reset callback.

                this.forEachCallback('reset', callback => {
                  callback();
                });
              }

              _cleanup(maybeError) {
                this._clearConnectionAndHeartbeatTimers();

                if (this.socket) {
                  this.socket.onmessage = this.socket.onclose = this.socket.onerror = this.socket.onheartbeat = () => {};

                  this.socket.close();
                  this.socket = null;
                }

                this.forEachCallback('disconnect', callback => {
                  callback(maybeError);
                });
              }

              _clearConnectionAndHeartbeatTimers() {
                if (this.connectionTimer) {
                  clearTimeout(this.connectionTimer);
                  this.connectionTimer = null;
                }

                if (this.heartbeatTimer) {
                  clearTimeout(this.heartbeatTimer);
                  this.heartbeatTimer = null;
                }
              }

              _heartbeat_timeout() {
                console.log('Connection timeout. No sockjs heartbeat received.');

                this._lostConnection(new this.ConnectionError("Heartbeat timed out"));
              }

              _heartbeat_received() {
                // If we've already permanently shut down this stream, the timeout is
                // already cleared, and we don't need to set it again.
                if (this._forcedToDisconnect) return;
                if (this.heartbeatTimer) clearTimeout(this.heartbeatTimer);
                this.heartbeatTimer = setTimeout(this._heartbeat_timeout.bind(this), this.HEARTBEAT_TIMEOUT);
              }

              _sockjsProtocolsWhitelist() {
                // only allow polling protocols. no streaming.  streaming
                // makes safari spin.
                var protocolsWhitelist = ['xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling']; // iOS 4 and 5 and below crash when using websockets over certain
                // proxies. this seems to be resolved with iOS 6. eg
                // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.
                //
                // iOS <4 doesn't support websockets at all so sockjs will just
                // immediately fall back to http

                var noWebsockets = navigator && /iPhone|iPad|iPod/.test(navigator.userAgent) && /OS 4_|OS 5_/.test(navigator.userAgent);
                if (!noWebsockets) protocolsWhitelist = ['websocket'].concat(protocolsWhitelist);
                return protocolsWhitelist;
              }

              _launchConnection() {
                this._cleanup(); // cleanup the old socket, if there was one.


                var options = _objectSpread({
                  protocols_whitelist: this._sockjsProtocolsWhitelist()
                }, this.options._sockjsOptions);

                const hasSockJS = typeof SockJS === "function";
                this.socket = hasSockJS // Convert raw URL to SockJS URL each time we open a connection, so
                // that we can connect to random hostnames and get around browser
                // per-host connection limits.
                ? new SockJS(toSockjsUrl(this.rawUrl), undefined, options) : new WebSocket(toWebsocketUrl(this.rawUrl));

                this.socket.onopen = data => {
                  this.lastError = null;

                  this._connected();
                };

                this.socket.onmessage = data => {
                  this.lastError = null;

                  this._heartbeat_received();

                  if (this.currentStatus.connected) {
                    this.forEachCallback('message', callback => {
                      callback(data.data);
                    });
                  }
                };

                this.socket.onclose = () => {
                  this._lostConnection();
                };

                this.socket.onerror = error => {
                  const {
                    lastError
                  } = this;
                  this.lastError = error;
                  if (lastError) return;
                  console.log('stream error', error, new Date().toDateString());
                };

                this.socket.onheartbeat = () => {
                  this.lastError = null;

                  this._heartbeat_received();
                };

                if (this.connectionTimer) clearTimeout(this.connectionTimer);
                this.connectionTimer = setTimeout(() => {
                  this._lostConnection(new this.ConnectionError("DDP connection timed out"));
                }, this.CONNECT_TIMEOUT);
              }

            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function module(_require3, _exports2, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/common.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module2.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            _module2.export({
              StreamClientCommon: () => StreamClientCommon
            });
            let Retry;
            _module2.link("meteor/retry", {
              Retry(v) {
                Retry = v;
              }

            }, 0);
            const forcedReconnectError = new Error("forced reconnect");

            class StreamClientCommon {
              constructor(options) {
                this.options = _objectSpread({
                  retry: true
                }, options || null);
                this.ConnectionError = options && options.ConnectionError || Error;
              } // Register for callbacks.


              on(name, callback) {
                if (name !== 'message' && name !== 'reset' && name !== 'disconnect') throw new Error('unknown event type: ' + name);
                if (!this.eventCallbacks[name]) this.eventCallbacks[name] = [];
                this.eventCallbacks[name].push(callback);
              }

              forEachCallback(name, cb) {
                if (!this.eventCallbacks[name] || !this.eventCallbacks[name].length) {
                  return;
                }

                this.eventCallbacks[name].forEach(cb);
              }

              _initCommon(options) {
                options = options || Object.create(null); //// Constants
                // how long to wait until we declare the connection attempt
                // failed.

                this.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;
                this.eventCallbacks = Object.create(null); // name -> [callback]

                this._forcedToDisconnect = false; //// Reactive status

                this.currentStatus = {
                  status: 'connecting',
                  connected: false,
                  retryCount: 0
                };

                if (Package.tracker) {
                  this.statusListeners = new Package.tracker.Tracker.Dependency();
                }

                this.statusChanged = () => {
                  if (this.statusListeners) {
                    this.statusListeners.changed();
                  }
                }; //// Retry logic


                this._retry = new Retry();
                this.connectionTimer = null;
              } // Trigger a reconnect.


              reconnect(options) {
                options = options || Object.create(null);

                if (options.url) {
                  this._changeUrl(options.url);
                }

                if (options._sockjsOptions) {
                  this.options._sockjsOptions = options._sockjsOptions;
                }

                if (this.currentStatus.connected) {
                  if (options._force || options.url) {
                    this._lostConnection(forcedReconnectError);
                  }

                  return;
                } // if we're mid-connection, stop it.


                if (this.currentStatus.status === 'connecting') {
                  // Pretend it's a clean close.
                  this._lostConnection();
                }

                this._retry.clear();

                this.currentStatus.retryCount -= 1; // don't count manual retries

                this._retryNow();
              }

              disconnect(options) {
                options = options || Object.create(null); // Failed is permanent. If we're failed, don't let people go back
                // online by calling 'disconnect' then 'reconnect'.

                if (this._forcedToDisconnect) return; // If _permanent is set, permanently disconnect a stream. Once a stream
                // is forced to disconnect, it can never reconnect. This is for
                // error cases such as ddp version mismatch, where trying again
                // won't fix the problem.

                if (options._permanent) {
                  this._forcedToDisconnect = true;
                }

                this._cleanup();

                this._retry.clear();

                this.currentStatus = {
                  status: options._permanent ? 'failed' : 'offline',
                  connected: false,
                  retryCount: 0
                };
                if (options._permanent && options._error) this.currentStatus.reason = options._error;
                this.statusChanged();
              } // maybeError is set unless it's a clean protocol-level close.


              _lostConnection(maybeError) {
                this._cleanup(maybeError);

                this._retryLater(maybeError); // sets status. no need to do it here.
              } // fired when we detect that we've gone online. try to reconnect
              // immediately.


              _online() {
                // if we've requested to be offline by disconnecting, don't reconnect.
                if (this.currentStatus.status != 'offline') this.reconnect();
              }

              _retryLater(maybeError) {
                var timeout = 0;

                if (this.options.retry || maybeError === forcedReconnectError) {
                  timeout = this._retry.retryLater(this.currentStatus.retryCount, this._retryNow.bind(this));
                  this.currentStatus.status = 'waiting';
                  this.currentStatus.retryTime = new Date().getTime() + timeout;
                } else {
                  this.currentStatus.status = 'failed';
                  delete this.currentStatus.retryTime;
                }

                this.currentStatus.connected = false;
                this.statusChanged();
              }

              _retryNow() {
                if (this._forcedToDisconnect) return;
                this.currentStatus.retryCount += 1;
                this.currentStatus.status = 'connecting';
                this.currentStatus.connected = false;
                delete this.currentStatus.retryTime;
                this.statusChanged();

                this._launchConnection();
              } // Get current status. Reactive.


              status() {
                if (this.statusListeners) {
                  this.statusListeners.depend();
                }

                return this.currentStatus;
              }

            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "sockjs-0.3.4.js": function _module3(_require4) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/sockjs-0.3.4.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // XXX METEOR changes in <METEOR>

            /* SockJS client, version 0.3.4, http://sockjs.org, MIT License
            
            Copyright (c) 2011-2012 VMware, Inc.
            
            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:
            
            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.
            
            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */
            // <METEOR> Commented out JSO implementation (use json package instead).
            // JSON2 by Douglas Crockford (minified).
            // var JSON;JSON||(JSON={}),function(){function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i=="object"&&typeof i.toJSON=="function"&&(i=i.toJSON(a)),typeof rep=="function"&&(i=rep.call(b,a,i));switch(typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";gap+=indent,h=[];if(Object.prototype.toString.apply(i)==="[object Array]"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||"null";e=h.length===0?"[]":gap?"[\n"+gap+h.join(",\n"+gap)+"\n"+g+"]":"["+h.join(",")+"]",gap=g;return e}if(rep&&typeof rep=="object"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]=="string"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e));e=h.length===0?"{}":gap?"{\n"+gap+h.join(",\n"+gap)+"\n"+g+"}":"{"+h.join(",")+"}",gap=g;return e}}function quote(a){escapable.lastIndex=0;return escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return typeof b=="string"?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function f(a){return a<10?"0"+a:a}"use strict",typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(a,b,c){var d;gap="",indent="";if(typeof c=="number")for(d=0;d<c;d+=1)indent+=" ";else typeof c=="string"&&(indent=c);rep=b;if(!b||typeof b=="function"||typeof b=="object"&&typeof b.length=="number")return str("",{"":a});throw new Error("JSON.stringify")}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e=="object")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver=="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")})}()
            // </METEOR>
            //     [*] Including lib/index.js
            // Public object
            SockJS = function () {
              var _document = document;
              var _window = window;
              var utils = {}; //         [*] Including lib/reventtarget.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              /* Simplified implementation of DOM2 EventTarget.
               *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
               */

              var REventTarget = function () {};

              REventTarget.prototype.addEventListener = function (eventType, listener) {
                if (!this._listeners) {
                  this._listeners = {};
                }

                if (!(eventType in this._listeners)) {
                  this._listeners[eventType] = [];
                }

                var arr = this._listeners[eventType];

                if (utils.arrIndexOf(arr, listener) === -1) {
                  arr.push(listener);
                }

                return;
              };

              REventTarget.prototype.removeEventListener = function (eventType, listener) {
                if (!(this._listeners && eventType in this._listeners)) {
                  return;
                }

                var arr = this._listeners[eventType];
                var idx = utils.arrIndexOf(arr, listener);

                if (idx !== -1) {
                  if (arr.length > 1) {
                    this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
                  } else {
                    delete this._listeners[eventType];
                  }

                  return;
                }

                return;
              };

              REventTarget.prototype.dispatchEvent = function (event) {
                var t = event.type;
                var args = Array.prototype.slice.call(arguments, 0);

                if (this['on' + t]) {
                  this['on' + t].apply(this, args);
                }

                if (this._listeners && t in this._listeners) {
                  for (var i = 0; i < this._listeners[t].length; i++) {
                    this._listeners[t][i].apply(this, args);
                  }
                }
              }; //         [*] End of lib/reventtarget.js
              //         [*] Including lib/simpleevent.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var SimpleEvent = function (type, obj) {
                this.type = type;

                if (typeof obj !== 'undefined') {
                  for (var k in obj) {
                    if (!obj.hasOwnProperty(k)) continue;
                    this[k] = obj[k];
                  }
                }
              };

              SimpleEvent.prototype.toString = function () {
                var r = [];

                for (var k in this) {
                  if (!this.hasOwnProperty(k)) continue;
                  var v = this[k];
                  if (typeof v === 'function') v = '[function]';
                  r.push(k + '=' + v);
                }

                return 'SimpleEvent(' + r.join(', ') + ')';
              }; //         [*] End of lib/simpleevent.js
              //         [*] Including lib/eventemitter.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var EventEmitter = function (events) {
                var that = this;
                that._events = events || [];
                that._listeners = {};
              };

              EventEmitter.prototype.emit = function (type) {
                var that = this;

                that._verifyType(type);

                if (that._nuked) return;
                var args = Array.prototype.slice.call(arguments, 1);

                if (that['on' + type]) {
                  that['on' + type].apply(that, args);
                }

                if (type in that._listeners) {
                  for (var i = 0; i < that._listeners[type].length; i++) {
                    that._listeners[type][i].apply(that, args);
                  }
                }
              };

              EventEmitter.prototype.on = function (type, callback) {
                var that = this;

                that._verifyType(type);

                if (that._nuked) return;

                if (!(type in that._listeners)) {
                  that._listeners[type] = [];
                }

                that._listeners[type].push(callback);
              };

              EventEmitter.prototype._verifyType = function (type) {
                var that = this;

                if (utils.arrIndexOf(that._events, type) === -1) {
                  utils.log('Event ' + JSON.stringify(type) + ' not listed ' + JSON.stringify(that._events) + ' in ' + that);
                }
              };

              EventEmitter.prototype.nuke = function () {
                var that = this;
                that._nuked = true;

                for (var i = 0; i < that._events.length; i++) {
                  delete that[that._events[i]];
                }

                that._listeners = {};
              }; //         [*] End of lib/eventemitter.js
              //         [*] Including lib/utils.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var random_string_chars = 'abcdefghijklmnopqrstuvwxyz0123456789_';

              utils.random_string = function (length, max) {
                max = max || random_string_chars.length;
                var i,
                    ret = [];

                for (i = 0; i < length; i++) {
                  ret.push(random_string_chars.substr(Math.floor(Math.random() * max), 1));
                }

                return ret.join('');
              };

              utils.random_number = function (max) {
                return Math.floor(Math.random() * max);
              };

              utils.random_number_string = function (max) {
                var t = ('' + (max - 1)).length;
                var p = Array(t + 1).join('0');
                return (p + utils.random_number(max)).slice(-t);
              }; // Assuming that url looks like: http://asdasd:111/asd


              utils.getOrigin = function (url) {
                url += '/';
                var parts = url.split('/').slice(0, 3);
                return parts.join('/');
              };

              utils.isSameOriginUrl = function (url_a, url_b) {
                // location.origin would do, but it's not always available.
                if (!url_b) url_b = _window.location.href;
                return url_a.split('/').slice(0, 3).join('/') === url_b.split('/').slice(0, 3).join('/');
              }; // <METEOR>
              // https://github.com/sockjs/sockjs-client/issues/79


              utils.isSameOriginScheme = function (url_a, url_b) {
                if (!url_b) url_b = _window.location.href;
                return url_a.split(':')[0] === url_b.split(':')[0];
              }; // </METEOR>


              utils.getParentDomain = function (url) {
                // ipv4 ip address
                if (/^[0-9.]*$/.test(url)) return url; // ipv6 ip address

                if (/^\[/.test(url)) return url; // no dots

                if (!/[.]/.test(url)) return url;
                var parts = url.split('.').slice(1);
                return parts.join('.');
              };

              utils.objectExtend = function (dst, src) {
                for (var k in src) {
                  if (src.hasOwnProperty(k)) {
                    dst[k] = src[k];
                  }
                }

                return dst;
              };

              var WPrefix = '_jp';

              utils.polluteGlobalNamespace = function () {
                if (!(WPrefix in _window)) {
                  _window[WPrefix] = {};
                }
              };

              utils.closeFrame = function (code, reason) {
                return 'c' + JSON.stringify([code, reason]);
              };

              utils.userSetCode = function (code) {
                return code === 1000 || code >= 3000 && code <= 4999;
              }; // See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
              // and RFC 2988.


              utils.countRTO = function (rtt) {
                var rto;

                if (rtt > 100) {
                  rto = 3 * rtt; // rto > 300msec
                } else {
                  rto = rtt + 200; // 200msec < rto <= 300msec
                }

                return rto;
              };

              utils.log = function () {
                if (_window.console && console.log && console.log.apply) {
                  console.log.apply(console, arguments);
                }
              };

              utils.bind = function (fun, that) {
                if (fun.bind) {
                  return fun.bind(that);
                } else {
                  return function () {
                    return fun.apply(that, arguments);
                  };
                }
              };

              utils.flatUrl = function (url) {
                return url.indexOf('?') === -1 && url.indexOf('#') === -1;
              }; // `relativeTo` is an optional absolute URL. If provided, `url` will be
              // interpreted relative to `relativeTo`. Defaults to `document.location`.
              // <METEOR>


              utils.amendUrl = function (url, relativeTo) {
                var baseUrl;

                if (relativeTo === undefined) {
                  baseUrl = _document.location;
                } else {
                  var protocolMatch = /^([a-z0-9.+-]+:)/i.exec(relativeTo);

                  if (protocolMatch) {
                    var protocol = protocolMatch[0].toLowerCase();
                    var rest = relativeTo.substring(protocol.length);
                    var hostMatch = /[a-z0-9\.-]+(:[0-9]+)?/.exec(rest);
                    if (hostMatch) var host = hostMatch[0];
                  }

                  if (!protocol || !host) throw new Error("relativeTo must be an absolute url");
                  baseUrl = {
                    protocol: protocol,
                    host: host
                  };
                }

                if (!url) {
                  throw new Error('Wrong url for SockJS');
                }

                if (!utils.flatUrl(url)) {
                  throw new Error('Only basic urls are supported in SockJS');
                } //  '//abc' --> 'http://abc'


                if (url.indexOf('//') === 0) {
                  url = baseUrl.protocol + url;
                } // '/abc' --> 'http://localhost:1234/abc'


                if (url.indexOf('/') === 0) {
                  url = baseUrl.protocol + '//' + baseUrl.host + url;
                } // </METEOR>
                // strip trailing slashes


                url = url.replace(/[/]+$/, ''); // We have a full url here, with proto and host. For some browsers
                // http://localhost:80/ is not in the same origin as http://localhost/
                // Remove explicit :80 or :443 in such cases. See #74

                var parts = url.split("/");

                if (parts[0] === "http:" && /:80$/.test(parts[2]) || parts[0] === "https:" && /:443$/.test(parts[2])) {
                  parts[2] = parts[2].replace(/:(80|443)$/, "");
                }

                url = parts.join("/");
                return url;
              }; // IE doesn't support [].indexOf.


              utils.arrIndexOf = function (arr, obj) {
                for (var i = 0; i < arr.length; i++) {
                  if (arr[i] === obj) {
                    return i;
                  }
                }

                return -1;
              };

              utils.arrSkip = function (arr, obj) {
                var idx = utils.arrIndexOf(arr, obj);

                if (idx === -1) {
                  return arr.slice();
                } else {
                  var dst = arr.slice(0, idx);
                  return dst.concat(arr.slice(idx + 1));
                }
              }; // Via: https://gist.github.com/1133122/2121c601c5549155483f50be3da5305e83b8c5df


              utils.isArray = Array.isArray || function (value) {
                return {}.toString.call(value).indexOf('Array') >= 0;
              };

              utils.delay = function (t, fun) {
                if (typeof t === 'function') {
                  fun = t;
                  t = 0;
                }

                return setTimeout(fun, t);
              }; // Chars worth escaping, as defined by Douglas Crockford:
              //   https://github.com/douglascrockford/JSON-js/blob/47a9882cddeb1e8529e07af9736218075372b8ac/json2.js#L196


              var json_escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
                  json_lookup = {
                "\0": "\\u0000",
                "\x01": "\\u0001",
                "\x02": "\\u0002",
                "\x03": "\\u0003",
                "\x04": "\\u0004",
                "\x05": "\\u0005",
                "\x06": "\\u0006",
                "\x07": "\\u0007",
                "\b": "\\b",
                "\t": "\\t",
                "\n": "\\n",
                "\x0B": "\\u000b",
                "\f": "\\f",
                "\r": "\\r",
                "\x0E": "\\u000e",
                "\x0F": "\\u000f",
                "\x10": "\\u0010",
                "\x11": "\\u0011",
                "\x12": "\\u0012",
                "\x13": "\\u0013",
                "\x14": "\\u0014",
                "\x15": "\\u0015",
                "\x16": "\\u0016",
                "\x17": "\\u0017",
                "\x18": "\\u0018",
                "\x19": "\\u0019",
                "\x1A": "\\u001a",
                "\x1B": "\\u001b",
                "\x1C": "\\u001c",
                "\x1D": "\\u001d",
                "\x1E": "\\u001e",
                "\x1F": "\\u001f",
                "\"": "\\\"",
                "\\": "\\\\",
                "\x7F": "\\u007f",
                "\x80": "\\u0080",
                "\x81": "\\u0081",
                "\x82": "\\u0082",
                "\x83": "\\u0083",
                "\x84": "\\u0084",
                "\x85": "\\u0085",
                "\x86": "\\u0086",
                "\x87": "\\u0087",
                "\x88": "\\u0088",
                "\x89": "\\u0089",
                "\x8A": "\\u008a",
                "\x8B": "\\u008b",
                "\x8C": "\\u008c",
                "\x8D": "\\u008d",
                "\x8E": "\\u008e",
                "\x8F": "\\u008f",
                "\x90": "\\u0090",
                "\x91": "\\u0091",
                "\x92": "\\u0092",
                "\x93": "\\u0093",
                "\x94": "\\u0094",
                "\x95": "\\u0095",
                "\x96": "\\u0096",
                "\x97": "\\u0097",
                "\x98": "\\u0098",
                "\x99": "\\u0099",
                "\x9A": "\\u009a",
                "\x9B": "\\u009b",
                "\x9C": "\\u009c",
                "\x9D": "\\u009d",
                "\x9E": "\\u009e",
                "\x9F": "\\u009f",
                "\xAD": "\\u00ad",
                "\u0600": "\\u0600",
                "\u0601": "\\u0601",
                "\u0602": "\\u0602",
                "\u0603": "\\u0603",
                "\u0604": "\\u0604",
                "\u070F": "\\u070f",
                "\u17B4": "\\u17b4",
                "\u17B5": "\\u17b5",
                "\u200C": "\\u200c",
                "\u200D": "\\u200d",
                "\u200E": "\\u200e",
                "\u200F": "\\u200f",
                "\u2028": "\\u2028",
                "\u2029": "\\u2029",
                "\u202A": "\\u202a",
                "\u202B": "\\u202b",
                "\u202C": "\\u202c",
                "\u202D": "\\u202d",
                "\u202E": "\\u202e",
                "\u202F": "\\u202f",
                "\u2060": "\\u2060",
                "\u2061": "\\u2061",
                "\u2062": "\\u2062",
                "\u2063": "\\u2063",
                "\u2064": "\\u2064",
                "\u2065": "\\u2065",
                "\u2066": "\\u2066",
                "\u2067": "\\u2067",
                "\u2068": "\\u2068",
                "\u2069": "\\u2069",
                "\u206A": "\\u206a",
                "\u206B": "\\u206b",
                "\u206C": "\\u206c",
                "\u206D": "\\u206d",
                "\u206E": "\\u206e",
                "\u206F": "\\u206f",
                "\uFEFF": "\\ufeff",
                "\uFFF0": "\\ufff0",
                "\uFFF1": "\\ufff1",
                "\uFFF2": "\\ufff2",
                "\uFFF3": "\\ufff3",
                "\uFFF4": "\\ufff4",
                "\uFFF5": "\\ufff5",
                "\uFFF6": "\\ufff6",
                "\uFFF7": "\\ufff7",
                "\uFFF8": "\\ufff8",
                "\uFFF9": "\\ufff9",
                "\uFFFA": "\\ufffa",
                "\uFFFB": "\\ufffb",
                "\uFFFC": "\\ufffc",
                "\uFFFD": "\\ufffd",
                "\uFFFE": "\\ufffe",
                "\uFFFF": "\\uffff"
              }; // Some extra characters that Chrome gets wrong, and substitutes with
              // something else on the wire.

              var extra_escapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,
                  extra_lookup; // JSON Quote string. Use native implementation when possible.

              var JSONQuote = JSON && JSON.stringify || function (string) {
                json_escapable.lastIndex = 0;

                if (json_escapable.test(string)) {
                  string = string.replace(json_escapable, function (a) {
                    return json_lookup[a];
                  });
                }

                return '"' + string + '"';
              }; // This may be quite slow, so let's delay until user actually uses bad
              // characters.


              var unroll_lookup = function (escapable) {
                var i;
                var unrolled = {};
                var c = [];

                for (i = 0; i < 65536; i++) {
                  c.push(String.fromCharCode(i));
                }

                escapable.lastIndex = 0;
                c.join('').replace(escapable, function (a) {
                  unrolled[a] = "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                  return '';
                });
                escapable.lastIndex = 0;
                return unrolled;
              }; // Quote string, also taking care of unicode characters that browsers
              // often break. Especially, take care of unicode surrogates:
              //    http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates


              utils.quote = function (string) {
                var quoted = JSONQuote(string); // In most cases this should be very fast and good enough.

                extra_escapable.lastIndex = 0;

                if (!extra_escapable.test(quoted)) {
                  return quoted;
                }

                if (!extra_lookup) extra_lookup = unroll_lookup(extra_escapable);
                return quoted.replace(extra_escapable, function (a) {
                  return extra_lookup[a];
                });
              };

              var _all_protocols = ['websocket', 'xdr-streaming', 'xhr-streaming', 'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'];

              utils.probeProtocols = function () {
                var probed = {};

                for (var i = 0; i < _all_protocols.length; i++) {
                  var protocol = _all_protocols[i]; // User can have a typo in protocol name.

                  probed[protocol] = SockJS[protocol] && SockJS[protocol].enabled();
                }

                return probed;
              };

              utils.detectProtocols = function (probed, protocols_whitelist, info) {
                var pe = {},
                    protocols = [];
                if (!protocols_whitelist) protocols_whitelist = _all_protocols;

                for (var i = 0; i < protocols_whitelist.length; i++) {
                  var protocol = protocols_whitelist[i];
                  pe[protocol] = probed[protocol];
                }

                var maybe_push = function (protos) {
                  var proto = protos.shift();

                  if (pe[proto]) {
                    protocols.push(proto);
                  } else {
                    if (protos.length > 0) {
                      maybe_push(protos);
                    }
                  }
                }; // 1. Websocket


                if (info.websocket !== false) {
                  maybe_push(['websocket']);
                } // 2. Streaming


                if (pe['xhr-streaming'] && !info.null_origin) {
                  protocols.push('xhr-streaming');
                } else {
                  if (pe['xdr-streaming'] && !info.cookie_needed && !info.null_origin) {
                    protocols.push('xdr-streaming');
                  } else {
                    maybe_push(['iframe-eventsource', 'iframe-htmlfile']);
                  }
                } // 3. Polling


                if (pe['xhr-polling'] && !info.null_origin) {
                  protocols.push('xhr-polling');
                } else {
                  if (pe['xdr-polling'] && !info.cookie_needed && !info.null_origin) {
                    protocols.push('xdr-polling');
                  } else {
                    maybe_push(['iframe-xhr-polling', 'jsonp-polling']);
                  }
                }

                return protocols;
              }; //         [*] End of lib/utils.js
              //         [*] Including lib/dom.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // May be used by htmlfile jsonp and transports.


              var MPrefix = '_sockjs_global';

              utils.createHook = function () {
                var window_id = 'a' + utils.random_string(8);

                if (!(MPrefix in _window)) {
                  var map = {};

                  _window[MPrefix] = function (window_id) {
                    if (!(window_id in map)) {
                      map[window_id] = {
                        id: window_id,
                        del: function () {
                          delete map[window_id];
                        }
                      };
                    }

                    return map[window_id];
                  };
                }

                return _window[MPrefix](window_id);
              };

              utils.attachMessage = function (listener) {
                utils.attachEvent('message', listener);
              };

              utils.attachEvent = function (event, listener) {
                if (typeof _window.addEventListener !== 'undefined') {
                  _window.addEventListener(event, listener, false);
                } else {
                  // IE quirks.
                  // According to: http://stevesouders.com/misc/test-postmessage.php
                  // the message gets delivered only to 'document', not 'window'.
                  _document.attachEvent("on" + event, listener); // I get 'window' for ie8.


                  _window.attachEvent("on" + event, listener);
                }
              };

              utils.detachMessage = function (listener) {
                utils.detachEvent('message', listener);
              };

              utils.detachEvent = function (event, listener) {
                if (typeof _window.addEventListener !== 'undefined') {
                  _window.removeEventListener(event, listener, false);
                } else {
                  _document.detachEvent("on" + event, listener);

                  _window.detachEvent("on" + event, listener);
                }
              };

              var on_unload = {}; // Things registered after beforeunload are to be called immediately.

              var after_unload = false;

              var trigger_unload_callbacks = function () {
                for (var ref in on_unload) {
                  on_unload[ref]();
                  delete on_unload[ref];
                }

                ;
              };

              var unload_triggered = function () {
                if (after_unload) return;
                after_unload = true;
                trigger_unload_callbacks();
              }; // 'unload' alone is not reliable in opera within an iframe, but we
              // can't use `beforeunload` as IE fires it on javascript: links.


              utils.attachEvent('unload', unload_triggered);

              utils.unload_add = function (listener) {
                var ref = utils.random_string(8);
                on_unload[ref] = listener;

                if (after_unload) {
                  utils.delay(trigger_unload_callbacks);
                }

                return ref;
              };

              utils.unload_del = function (ref) {
                if (ref in on_unload) delete on_unload[ref];
              };

              utils.createIframe = function (iframe_url, error_callback) {
                var iframe = _document.createElement('iframe');

                var tref, unload_ref;

                var unattach = function () {
                  clearTimeout(tref); // Explorer had problems with that.

                  try {
                    iframe.onload = null;
                  } catch (x) {}

                  iframe.onerror = null;
                };

                var cleanup = function () {
                  if (iframe) {
                    unattach(); // This timeout makes chrome fire onbeforeunload event
                    // within iframe. Without the timeout it goes straight to
                    // onunload.

                    setTimeout(function () {
                      if (iframe) {
                        iframe.parentNode.removeChild(iframe);
                      }

                      iframe = null;
                    }, 0);
                    utils.unload_del(unload_ref);
                  }
                };

                var onerror = function (r) {
                  if (iframe) {
                    cleanup();
                    error_callback(r);
                  }
                };

                var post = function (msg, origin) {
                  try {
                    // When the iframe is not loaded, IE raises an exception
                    // on 'contentWindow'.
                    if (iframe && iframe.contentWindow) {
                      iframe.contentWindow.postMessage(msg, origin);
                    }
                  } catch (x) {}

                  ;
                };

                iframe.src = iframe_url;
                iframe.style.display = 'none';
                iframe.style.position = 'absolute';

                iframe.onerror = function () {
                  onerror('onerror');
                };

                iframe.onload = function () {
                  // `onload` is triggered before scripts on the iframe are
                  // executed. Give it few seconds to actually load stuff.
                  clearTimeout(tref);
                  tref = setTimeout(function () {
                    onerror('onload timeout');
                  }, 2000);
                };

                _document.body.appendChild(iframe);

                tref = setTimeout(function () {
                  onerror('timeout');
                }, 15000);
                unload_ref = utils.unload_add(cleanup);
                return {
                  post: post,
                  cleanup: cleanup,
                  loaded: unattach
                };
              };

              utils.createHtmlfile = function (iframe_url, error_callback) {
                var doc = new ActiveXObject('htmlfile');
                var tref, unload_ref;
                var iframe;

                var unattach = function () {
                  clearTimeout(tref);
                };

                var cleanup = function () {
                  if (doc) {
                    unattach();
                    utils.unload_del(unload_ref);
                    iframe.parentNode.removeChild(iframe);
                    iframe = doc = null;
                    CollectGarbage();
                  }
                };

                var onerror = function (r) {
                  if (doc) {
                    cleanup();
                    error_callback(r);
                  }
                };

                var post = function (msg, origin) {
                  try {
                    // When the iframe is not loaded, IE raises an exception
                    // on 'contentWindow'.
                    if (iframe && iframe.contentWindow) {
                      iframe.contentWindow.postMessage(msg, origin);
                    }
                  } catch (x) {}

                  ;
                };

                doc.open();
                doc.write('<html><s' + 'cript>' + 'document.domain="' + document.domain + '";' + '</s' + 'cript></html>');
                doc.close();
                doc.parentWindow[WPrefix] = _window[WPrefix];
                var c = doc.createElement('div');
                doc.body.appendChild(c);
                iframe = doc.createElement('iframe');
                c.appendChild(iframe);
                iframe.src = iframe_url;
                tref = setTimeout(function () {
                  onerror('timeout');
                }, 15000);
                unload_ref = utils.unload_add(cleanup);
                return {
                  post: post,
                  cleanup: cleanup,
                  loaded: unattach
                };
              }; //         [*] End of lib/dom.js
              //         [*] Including lib/dom2.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var AbstractXHRObject = function () {};

              AbstractXHRObject.prototype = new EventEmitter(['chunk', 'finish']);

              AbstractXHRObject.prototype._start = function (method, url, payload, opts) {
                var that = this;

                try {
                  that.xhr = new XMLHttpRequest();
                } catch (x) {}

                ;

                if (!that.xhr) {
                  try {
                    that.xhr = new _window.ActiveXObject('Microsoft.XMLHTTP');
                  } catch (x) {}

                  ;
                }

                if (_window.ActiveXObject || _window.XDomainRequest) {
                  // IE8 caches even POSTs
                  url += (url.indexOf('?') === -1 ? '?' : '&') + 't=' + +new Date();
                } // Explorer tends to keep connection open, even after the
                // tab gets closed: http://bugs.jquery.com/ticket/5280


                that.unload_ref = utils.unload_add(function () {
                  that._cleanup(true);
                });

                try {
                  that.xhr.open(method, url, true);
                } catch (e) {
                  // IE raises an exception on wrong port.
                  that.emit('finish', 0, '');

                  that._cleanup();

                  return;
                }

                ;

                if (!opts || !opts.no_credentials) {
                  // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
                  // "This never affects same-site requests."
                  that.xhr.withCredentials = 'true';
                }

                if (opts && opts.headers) {
                  for (var key in opts.headers) {
                    that.xhr.setRequestHeader(key, opts.headers[key]);
                  }
                }

                that.xhr.onreadystatechange = function () {
                  if (that.xhr) {
                    var x = that.xhr;

                    switch (x.readyState) {
                      case 3:
                        // IE doesn't like peeking into responseText or status
                        // on Microsoft.XMLHTTP and readystate=3
                        try {
                          var status = x.status;
                          var text = x.responseText;
                        } catch (x) {}

                        ; // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450

                        if (status === 1223) status = 204; // IE does return readystate == 3 for 404 answers.

                        if (text && text.length > 0) {
                          that.emit('chunk', status, text);
                        }

                        break;

                      case 4:
                        var status = x.status; // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450

                        if (status === 1223) status = 204;
                        that.emit('finish', status, x.responseText);

                        that._cleanup(false);

                        break;
                    }
                  }
                };

                that.xhr.send(payload);
              };

              AbstractXHRObject.prototype._cleanup = function (abort) {
                var that = this;
                if (!that.xhr) return;
                utils.unload_del(that.unload_ref); // IE needs this field to be a function

                that.xhr.onreadystatechange = function () {};

                if (abort) {
                  try {
                    that.xhr.abort();
                  } catch (x) {}

                  ;
                }

                that.unload_ref = that.xhr = null;
              };

              AbstractXHRObject.prototype.close = function () {
                var that = this;
                that.nuke();

                that._cleanup(true);
              };

              var XHRCorsObject = utils.XHRCorsObject = function () {
                var that = this,
                    args = arguments;
                utils.delay(function () {
                  that._start.apply(that, args);
                });
              };

              XHRCorsObject.prototype = new AbstractXHRObject();

              var XHRLocalObject = utils.XHRLocalObject = function (method, url, payload) {
                var that = this;
                utils.delay(function () {
                  that._start(method, url, payload, {
                    no_credentials: true
                  });
                });
              };

              XHRLocalObject.prototype = new AbstractXHRObject(); // References:
              //   http://ajaxian.com/archives/100-line-ajax-wrapper
              //   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx

              var XDRObject = utils.XDRObject = function (method, url, payload) {
                var that = this;
                utils.delay(function () {
                  that._start(method, url, payload);
                });
              };

              XDRObject.prototype = new EventEmitter(['chunk', 'finish']);

              XDRObject.prototype._start = function (method, url, payload) {
                var that = this;
                var xdr = new XDomainRequest(); // IE caches even POSTs

                url += (url.indexOf('?') === -1 ? '?' : '&') + 't=' + +new Date();

                var onerror = xdr.ontimeout = xdr.onerror = function () {
                  that.emit('finish', 0, '');

                  that._cleanup(false);
                };

                xdr.onprogress = function () {
                  that.emit('chunk', 200, xdr.responseText);
                };

                xdr.onload = function () {
                  that.emit('finish', 200, xdr.responseText);

                  that._cleanup(false);
                };

                that.xdr = xdr;
                that.unload_ref = utils.unload_add(function () {
                  that._cleanup(true);
                });

                try {
                  // Fails with AccessDenied if port number is bogus
                  that.xdr.open(method, url);
                  that.xdr.send(payload);
                } catch (x) {
                  onerror();
                }
              };

              XDRObject.prototype._cleanup = function (abort) {
                var that = this;
                if (!that.xdr) return;
                utils.unload_del(that.unload_ref);
                that.xdr.ontimeout = that.xdr.onerror = that.xdr.onprogress = that.xdr.onload = null;

                if (abort) {
                  try {
                    that.xdr.abort();
                  } catch (x) {}

                  ;
                }

                that.unload_ref = that.xdr = null;
              };

              XDRObject.prototype.close = function () {
                var that = this;
                that.nuke();

                that._cleanup(true);
              }; // 1. Is natively via XHR
              // 2. Is natively via XDR
              // 3. Nope, but postMessage is there so it should work via the Iframe.
              // 4. Nope, sorry.


              utils.isXHRCorsCapable = function () {
                if (_window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest()) {
                  return 1;
                } // XDomainRequest doesn't work if page is served from file://


                if (_window.XDomainRequest && _document.domain) {
                  return 2;
                }

                if (IframeTransport.enabled()) {
                  return 3;
                }

                return 4;
              }; //         [*] End of lib/dom2.js
              //         [*] Including lib/sockjs.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var SockJS = function (url, dep_protocols_whitelist, options) {
                if (!(this instanceof SockJS)) {
                  // makes `new` optional
                  return new SockJS(url, dep_protocols_whitelist, options);
                }

                var that = this,
                    protocols_whitelist;
                that._options = {
                  devel: false,
                  debug: false,
                  protocols_whitelist: [],
                  info: undefined,
                  rtt: undefined
                };

                if (options) {
                  utils.objectExtend(that._options, options);
                }

                that._base_url = utils.amendUrl(url);
                that._server = that._options.server || utils.random_number_string(1000);

                if (that._options.protocols_whitelist && that._options.protocols_whitelist.length) {
                  protocols_whitelist = that._options.protocols_whitelist;
                } else {
                  // Deprecated API
                  if (typeof dep_protocols_whitelist === 'string' && dep_protocols_whitelist.length > 0) {
                    protocols_whitelist = [dep_protocols_whitelist];
                  } else if (utils.isArray(dep_protocols_whitelist)) {
                    protocols_whitelist = dep_protocols_whitelist;
                  } else {
                    protocols_whitelist = null;
                  }

                  if (protocols_whitelist) {
                    that._debug('Deprecated API: Use "protocols_whitelist" option ' + 'instead of supplying protocol list as a second ' + 'parameter to SockJS constructor.');
                  }
                }

                that._protocols = [];
                that.protocol = null;
                that.readyState = SockJS.CONNECTING;
                that._ir = createInfoReceiver(that._base_url);

                that._ir.onfinish = function (info, rtt) {
                  that._ir = null;

                  if (info) {
                    if (that._options.info) {
                      // Override if user supplies the option
                      info = utils.objectExtend(info, that._options.info);
                    }

                    if (that._options.rtt) {
                      rtt = that._options.rtt;
                    }

                    that._applyInfo(info, rtt, protocols_whitelist);

                    that._didClose();
                  } else {
                    that._didClose(1002, 'Can\'t connect to server', true);
                  }
                };
              }; // Inheritance


              SockJS.prototype = new REventTarget();
              SockJS.version = "0.3.4";
              SockJS.CONNECTING = 0;
              SockJS.OPEN = 1;
              SockJS.CLOSING = 2;
              SockJS.CLOSED = 3;

              SockJS.prototype._debug = function () {
                if (this._options.debug) utils.log.apply(utils, arguments);
              };

              SockJS.prototype._dispatchOpen = function () {
                var that = this;

                if (that.readyState === SockJS.CONNECTING) {
                  if (that._transport_tref) {
                    clearTimeout(that._transport_tref);
                    that._transport_tref = null;
                  }

                  that.readyState = SockJS.OPEN;
                  that.dispatchEvent(new SimpleEvent("open"));
                } else {
                  // The server might have been restarted, and lost track of our
                  // connection.
                  that._didClose(1006, "Server lost session");
                }
              };

              SockJS.prototype._dispatchMessage = function (data) {
                var that = this;
                if (that.readyState !== SockJS.OPEN) return;
                that.dispatchEvent(new SimpleEvent("message", {
                  data: data
                }));
              };

              SockJS.prototype._dispatchHeartbeat = function (data) {
                var that = this;
                if (that.readyState !== SockJS.OPEN) return;
                that.dispatchEvent(new SimpleEvent('heartbeat', {}));
              };

              SockJS.prototype._didClose = function (code, reason, force) {
                var that = this;
                if (that.readyState !== SockJS.CONNECTING && that.readyState !== SockJS.OPEN && that.readyState !== SockJS.CLOSING) throw new Error('INVALID_STATE_ERR');

                if (that._ir) {
                  that._ir.nuke();

                  that._ir = null;
                }

                if (that._transport) {
                  that._transport.doCleanup();

                  that._transport = null;
                }

                var close_event = new SimpleEvent("close", {
                  code: code,
                  reason: reason,
                  wasClean: utils.userSetCode(code)
                });

                if (!utils.userSetCode(code) && that.readyState === SockJS.CONNECTING && !force) {
                  if (that._try_next_protocol(close_event)) {
                    return;
                  }

                  close_event = new SimpleEvent("close", {
                    code: 2000,
                    reason: "All transports failed",
                    wasClean: false,
                    last_event: close_event
                  });
                }

                that.readyState = SockJS.CLOSED;
                utils.delay(function () {
                  that.dispatchEvent(close_event);
                });
              };

              SockJS.prototype._didMessage = function (data) {
                var that = this;
                var type = data.slice(0, 1);

                switch (type) {
                  case 'o':
                    that._dispatchOpen();

                    break;

                  case 'a':
                    var payload = JSON.parse(data.slice(1) || '[]');

                    for (var i = 0; i < payload.length; i++) {
                      that._dispatchMessage(payload[i]);
                    }

                    break;

                  case 'm':
                    var payload = JSON.parse(data.slice(1) || 'null');

                    that._dispatchMessage(payload);

                    break;

                  case 'c':
                    var payload = JSON.parse(data.slice(1) || '[]');

                    that._didClose(payload[0], payload[1]);

                    break;

                  case 'h':
                    that._dispatchHeartbeat();

                    break;
                }
              };

              SockJS.prototype._try_next_protocol = function (close_event) {
                var that = this;

                if (that.protocol) {
                  that._debug('Closed transport:', that.protocol, '' + close_event);

                  that.protocol = null;
                }

                if (that._transport_tref) {
                  clearTimeout(that._transport_tref);
                  that._transport_tref = null;
                }

                while (1) {
                  var protocol = that.protocol = that._protocols.shift();

                  if (!protocol) {
                    return false;
                  } // Some protocols require access to `body`, what if were in
                  // the `head`?


                  if (SockJS[protocol] && SockJS[protocol].need_body === true && (!_document.body || typeof _document.readyState !== 'undefined' && _document.readyState !== 'complete')) {
                    that._protocols.unshift(protocol);

                    that.protocol = 'waiting-for-load';
                    utils.attachEvent('load', function () {
                      that._try_next_protocol();
                    });
                    return true;
                  }

                  if (!SockJS[protocol] || !SockJS[protocol].enabled(that._options)) {
                    that._debug('Skipping transport:', protocol);
                  } else {
                    var roundTrips = SockJS[protocol].roundTrips || 1;
                    var to = (that._options.rto || 0) * roundTrips || 5000;
                    that._transport_tref = utils.delay(to, function () {
                      if (that.readyState === SockJS.CONNECTING) {
                        // I can't understand how it is possible to run
                        // this timer, when the state is CLOSED, but
                        // apparently in IE everythin is possible.
                        that._didClose(2007, "Transport timeouted");
                      }
                    });
                    var connid = utils.random_string(8);
                    var trans_url = that._base_url + '/' + that._server + '/' + connid;

                    that._debug('Opening transport:', protocol, ' url:' + trans_url, ' RTO:' + that._options.rto);

                    that._transport = new SockJS[protocol](that, trans_url, that._base_url);
                    return true;
                  }
                }
              };

              SockJS.prototype.close = function (code, reason) {
                var that = this;
                if (code && !utils.userSetCode(code)) throw new Error("INVALID_ACCESS_ERR");

                if (that.readyState !== SockJS.CONNECTING && that.readyState !== SockJS.OPEN) {
                  return false;
                }

                that.readyState = SockJS.CLOSING;

                that._didClose(code || 1000, reason || "Normal closure");

                return true;
              };

              SockJS.prototype.send = function (data) {
                var that = this;
                if (that.readyState === SockJS.CONNECTING) throw new Error('INVALID_STATE_ERR');

                if (that.readyState === SockJS.OPEN) {
                  that._transport.doSend(utils.quote('' + data));
                }

                return true;
              };

              SockJS.prototype._applyInfo = function (info, rtt, protocols_whitelist) {
                var that = this;
                that._options.info = info;
                that._options.rtt = rtt;
                that._options.rto = utils.countRTO(rtt);
                that._options.info.null_origin = !_document.domain; // Servers can override base_url, eg to provide a randomized domain name and
                // avoid browser per-domain connection limits.

                if (info.base_url) // <METEOR>
                  that._base_url = utils.amendUrl(info.base_url, that._base_url); // </METEOR>

                var probed = utils.probeProtocols();
                that._protocols = utils.detectProtocols(probed, protocols_whitelist, info); // <METEOR>
                // https://github.com/sockjs/sockjs-client/issues/79
                // Hack to avoid XDR when using different protocols
                // We're on IE trying to do cross-protocol. jsonp only.

                if (!utils.isSameOriginScheme(that._base_url) && 2 === utils.isXHRCorsCapable()) {
                  that._protocols = ['jsonp-polling'];
                } // </METEOR>
              }; //         [*] End of lib/sockjs.js
              //         [*] Including lib/trans-websocket.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var WebSocketTransport = SockJS.websocket = function (ri, trans_url) {
                var that = this;
                var url = trans_url + '/websocket';

                if (url.slice(0, 5) === 'https') {
                  url = 'wss' + url.slice(5);
                } else {
                  url = 'ws' + url.slice(4);
                }

                that.ri = ri;
                that.url = url;
                var Constructor = _window.WebSocket || _window.MozWebSocket;
                that.ws = new Constructor(that.url);

                that.ws.onmessage = function (e) {
                  that.ri._didMessage(e.data);
                }; // Firefox has an interesting bug. If a websocket connection is
                // created after onunload, it stays alive even when user
                // navigates away from the page. In such situation let's lie -
                // let's not open the ws connection at all. See:
                // https://github.com/sockjs/sockjs-client/issues/28
                // https://bugzilla.mozilla.org/show_bug.cgi?id=696085


                that.unload_ref = utils.unload_add(function () {
                  that.ws.close();
                });

                that.ws.onclose = function () {
                  that.ri._didMessage(utils.closeFrame(1006, "WebSocket connection broken"));
                };
              };

              WebSocketTransport.prototype.doSend = function (data) {
                this.ws.send('[' + data + ']');
              };

              WebSocketTransport.prototype.doCleanup = function () {
                var that = this;
                var ws = that.ws;

                if (ws) {
                  ws.onmessage = ws.onclose = null;
                  ws.close();
                  utils.unload_del(that.unload_ref);
                  that.unload_ref = that.ri = that.ws = null;
                }
              };

              WebSocketTransport.enabled = function () {
                return !!(_window.WebSocket || _window.MozWebSocket);
              }; // In theory, ws should require 1 round trip. But in chrome, this is
              // not very stable over SSL. Most likely a ws connection requires a
              // separate SSL connection, in which case 2 round trips are an
              // absolute minumum.


              WebSocketTransport.roundTrips = 2; //         [*] End of lib/trans-websocket.js
              //         [*] Including lib/trans-sender.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var BufferedSender = function () {};

              BufferedSender.prototype.send_constructor = function (sender) {
                var that = this;
                that.send_buffer = [];
                that.sender = sender;
              };

              BufferedSender.prototype.doSend = function (message) {
                var that = this;
                that.send_buffer.push(message);

                if (!that.send_stop) {
                  that.send_schedule();
                }
              }; // For polling transports in a situation when in the message callback,
              // new message is being send. If the sending connection was started
              // before receiving one, it is possible to saturate the network and
              // timeout due to the lack of receiving socket. To avoid that we delay
              // sending messages by some small time, in order to let receiving
              // connection be started beforehand. This is only a halfmeasure and
              // does not fix the big problem, but it does make the tests go more
              // stable on slow networks.


              BufferedSender.prototype.send_schedule_wait = function () {
                var that = this;
                var tref;

                that.send_stop = function () {
                  that.send_stop = null;
                  clearTimeout(tref);
                };

                tref = utils.delay(25, function () {
                  that.send_stop = null;
                  that.send_schedule();
                });
              };

              BufferedSender.prototype.send_schedule = function () {
                var that = this;

                if (that.send_buffer.length > 0) {
                  var payload = '[' + that.send_buffer.join(',') + ']';
                  that.send_stop = that.sender(that.trans_url, payload, function (success, abort_reason) {
                    that.send_stop = null;

                    if (success === false) {
                      that.ri._didClose(1006, 'Sending error ' + abort_reason);
                    } else {
                      that.send_schedule_wait();
                    }
                  });
                  that.send_buffer = [];
                }
              };

              BufferedSender.prototype.send_destructor = function () {
                var that = this;

                if (that._send_stop) {
                  that._send_stop();
                }

                that._send_stop = null;
              };

              var jsonPGenericSender = function (url, payload, callback) {
                var that = this;

                if (!('_send_form' in that)) {
                  var form = that._send_form = _document.createElement('form');

                  var area = that._send_area = _document.createElement('textarea');

                  area.name = 'd';
                  form.style.display = 'none';
                  form.style.position = 'absolute';
                  form.method = 'POST';
                  form.enctype = 'application/x-www-form-urlencoded';
                  form.acceptCharset = "UTF-8";
                  form.appendChild(area);

                  _document.body.appendChild(form);
                }

                var form = that._send_form;
                var area = that._send_area;
                var id = 'a' + utils.random_string(8);
                form.target = id;
                form.action = url + '/jsonp_send?i=' + id;
                var iframe;

                try {
                  // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
                  iframe = _document.createElement('<iframe name="' + id + '">');
                } catch (x) {
                  iframe = _document.createElement('iframe');
                  iframe.name = id;
                }

                iframe.id = id;
                form.appendChild(iframe);
                iframe.style.display = 'none';

                try {
                  area.value = payload;
                } catch (e) {
                  utils.log('Your browser is seriously broken. Go home! ' + e.message);
                }

                form.submit();

                var completed = function (e) {
                  if (!iframe.onerror) return;
                  iframe.onreadystatechange = iframe.onerror = iframe.onload = null; // Opera mini doesn't like if we GC iframe
                  // immediately, thus this timeout.

                  utils.delay(500, function () {
                    iframe.parentNode.removeChild(iframe);
                    iframe = null;
                  });
                  area.value = ''; // It is not possible to detect if the iframe succeeded or
                  // failed to submit our form.

                  callback(true);
                };

                iframe.onerror = iframe.onload = completed;

                iframe.onreadystatechange = function (e) {
                  if (iframe.readyState == 'complete') completed();
                };

                return completed;
              };

              var createAjaxSender = function (AjaxObject) {
                return function (url, payload, callback) {
                  var xo = new AjaxObject('POST', url + '/xhr_send', payload);

                  xo.onfinish = function (status, text) {
                    callback(status === 200 || status === 204, 'http status ' + status);
                  };

                  return function (abort_reason) {
                    callback(false, abort_reason);
                  };
                };
              }; //         [*] End of lib/trans-sender.js
              //         [*] Including lib/trans-jsonp-receiver.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // Parts derived from Socket.io:
              //    https://github.com/LearnBoost/socket.io/blob/0.6.17/lib/socket.io/transports/jsonp-polling.js
              // and jQuery-JSONP:
              //    https://code.google.com/p/jquery-jsonp/source/browse/trunk/core/jquery.jsonp.js


              var jsonPGenericReceiver = function (url, callback) {
                var tref;

                var script = _document.createElement('script');

                var script2; // Opera synchronous load trick.

                var close_script = function (frame) {
                  if (script2) {
                    script2.parentNode.removeChild(script2);
                    script2 = null;
                  }

                  if (script) {
                    clearTimeout(tref); // Unfortunately, you can't really abort script loading of
                    // the script.

                    script.parentNode.removeChild(script);
                    script.onreadystatechange = script.onerror = script.onload = script.onclick = null;
                    script = null;
                    callback(frame);
                    callback = null;
                  }
                }; // IE9 fires 'error' event after orsc or before, in random order.


                var loaded_okay = false;
                var error_timer = null;
                script.id = 'a' + utils.random_string(8);
                script.src = url;
                script.type = 'text/javascript';
                script.charset = 'UTF-8';

                script.onerror = function (e) {
                  if (!error_timer) {
                    // Delay firing close_script.
                    error_timer = setTimeout(function () {
                      if (!loaded_okay) {
                        close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onerror)"));
                      }
                    }, 1000);
                  }
                };

                script.onload = function (e) {
                  close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onload)"));
                };

                script.onreadystatechange = function (e) {
                  if (/loaded|closed/.test(script.readyState)) {
                    if (script && script.htmlFor && script.onclick) {
                      loaded_okay = true;

                      try {
                        // In IE, actually execute the script.
                        script.onclick();
                      } catch (x) {}
                    }

                    if (script) {
                      close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onreadystatechange)"));
                    }
                  }
                }; // IE: event/htmlFor/onclick trick.
                // One can't rely on proper order for onreadystatechange. In order to
                // make sure, set a 'htmlFor' and 'event' properties, so that
                // script code will be installed as 'onclick' handler for the
                // script object. Later, onreadystatechange, manually execute this
                // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
                // set. For reference see:
                //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
                // Also, read on that about script ordering:
                //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order


                if (typeof script.async === 'undefined' && _document.attachEvent) {
                  // According to mozilla docs, in recent browsers script.async defaults
                  // to 'true', so we may use it to detect a good browser:
                  // https://developer.mozilla.org/en/HTML/Element/script
                  if (!/opera/i.test(navigator.userAgent)) {
                    // Naively assume we're in IE
                    try {
                      script.htmlFor = script.id;
                      script.event = "onclick";
                    } catch (x) {}

                    script.async = true;
                  } else {
                    // Opera, second sync script hack
                    script2 = _document.createElement('script');
                    script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
                    script.async = script2.async = false;
                  }
                }

                if (typeof script.async !== 'undefined') {
                  script.async = true;
                } // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.


                tref = setTimeout(function () {
                  close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (timeout)"));
                }, 35000);

                var head = _document.getElementsByTagName('head')[0];

                head.insertBefore(script, head.firstChild);

                if (script2) {
                  head.insertBefore(script2, head.firstChild);
                }

                return close_script;
              }; //         [*] End of lib/trans-jsonp-receiver.js
              //         [*] Including lib/trans-jsonp-polling.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // The simplest and most robust transport, using the well-know cross
              // domain hack - JSONP. This transport is quite inefficient - one
              // mssage could use up to one http request. But at least it works almost
              // everywhere.
              // Known limitations:
              //   o you will get a spinning cursor
              //   o for Konqueror a dumb timer is needed to detect errors


              var JsonPTransport = SockJS['jsonp-polling'] = function (ri, trans_url) {
                utils.polluteGlobalNamespace();
                var that = this;
                that.ri = ri;
                that.trans_url = trans_url;
                that.send_constructor(jsonPGenericSender);

                that._schedule_recv();
              }; // Inheritnace


              JsonPTransport.prototype = new BufferedSender();

              JsonPTransport.prototype._schedule_recv = function () {
                var that = this;

                var callback = function (data) {
                  that._recv_stop = null;

                  if (data) {
                    // no data - heartbeat;
                    if (!that._is_closing) {
                      that.ri._didMessage(data);
                    }
                  } // The message can be a close message, and change is_closing state.


                  if (!that._is_closing) {
                    that._schedule_recv();
                  }
                };

                that._recv_stop = jsonPReceiverWrapper(that.trans_url + '/jsonp', jsonPGenericReceiver, callback);
              };

              JsonPTransport.enabled = function () {
                return true;
              };

              JsonPTransport.need_body = true;

              JsonPTransport.prototype.doCleanup = function () {
                var that = this;
                that._is_closing = true;

                if (that._recv_stop) {
                  that._recv_stop();
                }

                that.ri = that._recv_stop = null;
                that.send_destructor();
              }; // Abstract away code that handles global namespace pollution.


              var jsonPReceiverWrapper = function (url, constructReceiver, user_callback) {
                var id = 'a' + utils.random_string(6);
                var url_id = url + '?c=' + escape(WPrefix + '.' + id); // Unfortunately it is not possible to abort loading of the
                // script. We need to keep track of frake close frames.

                var aborting = 0; // Callback will be called exactly once.

                var callback = function (frame) {
                  switch (aborting) {
                    case 0:
                      // Normal behaviour - delete hook _and_ emit message.
                      delete _window[WPrefix][id];
                      user_callback(frame);
                      break;

                    case 1:
                      // Fake close frame - emit but don't delete hook.
                      user_callback(frame);
                      aborting = 2;
                      break;

                    case 2:
                      // Got frame after connection was closed, delete hook, don't emit.
                      delete _window[WPrefix][id];
                      break;
                  }
                };

                var close_script = constructReceiver(url_id, callback);
                _window[WPrefix][id] = close_script;

                var stop = function () {
                  if (_window[WPrefix][id]) {
                    aborting = 1;

                    _window[WPrefix][id](utils.closeFrame(1000, "JSONP user aborted read"));
                  }
                };

                return stop;
              }; //         [*] End of lib/trans-jsonp-polling.js
              //         [*] Including lib/trans-xhr.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var AjaxBasedTransport = function () {};

              AjaxBasedTransport.prototype = new BufferedSender();

              AjaxBasedTransport.prototype.run = function (ri, trans_url, url_suffix, Receiver, AjaxObject) {
                var that = this;
                that.ri = ri;
                that.trans_url = trans_url;
                that.send_constructor(createAjaxSender(AjaxObject));
                that.poll = new Polling(ri, Receiver, trans_url + url_suffix, AjaxObject);
              };

              AjaxBasedTransport.prototype.doCleanup = function () {
                var that = this;

                if (that.poll) {
                  that.poll.abort();
                  that.poll = null;
                }
              }; // xhr-streaming


              var XhrStreamingTransport = SockJS['xhr-streaming'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XHRCorsObject);
              };

              XhrStreamingTransport.prototype = new AjaxBasedTransport();

              XhrStreamingTransport.enabled = function () {
                // Support for CORS Ajax aka Ajax2? Opera 12 claims CORS but
                // doesn't do streaming.
                return _window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest() && !/opera/i.test(navigator.userAgent);
              };

              XhrStreamingTransport.roundTrips = 2; // preflight, ajax
              // Safari gets confused when a streaming ajax request is started
              // before onload. This causes the load indicator to spin indefinetely.

              XhrStreamingTransport.need_body = true; // According to:
              //   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
              //   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/
              // xdr-streaming

              var XdrStreamingTransport = SockJS['xdr-streaming'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XDRObject);
              };

              XdrStreamingTransport.prototype = new AjaxBasedTransport();

              XdrStreamingTransport.enabled = function () {
                return !!_window.XDomainRequest;
              };

              XdrStreamingTransport.roundTrips = 2; // preflight, ajax
              // xhr-polling

              var XhrPollingTransport = SockJS['xhr-polling'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRCorsObject);
              };

              XhrPollingTransport.prototype = new AjaxBasedTransport();
              XhrPollingTransport.enabled = XhrStreamingTransport.enabled;
              XhrPollingTransport.roundTrips = 2; // preflight, ajax
              // xdr-polling

              var XdrPollingTransport = SockJS['xdr-polling'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XDRObject);
              };

              XdrPollingTransport.prototype = new AjaxBasedTransport();
              XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
              XdrPollingTransport.roundTrips = 2; // preflight, ajax
              //         [*] End of lib/trans-xhr.js
              //         [*] Including lib/trans-iframe.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // Few cool transports do work only for same-origin. In order to make
              // them working cross-domain we shall use iframe, served form the
              // remote domain. New browsers, have capabilities to communicate with
              // cross domain iframe, using postMessage(). In IE it was implemented
              // from IE 8+, but of course, IE got some details wrong:
              //    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
              //    http://stevesouders.com/misc/test-postmessage.php

              var IframeTransport = function () {};

              IframeTransport.prototype.i_constructor = function (ri, trans_url, base_url) {
                var that = this;
                that.ri = ri;
                that.origin = utils.getOrigin(base_url);
                that.base_url = base_url;
                that.trans_url = trans_url;
                var iframe_url = base_url + '/iframe.html';

                if (that.ri._options.devel) {
                  iframe_url += '?t=' + +new Date();
                }

                that.window_id = utils.random_string(8);
                iframe_url += '#' + that.window_id;
                that.iframeObj = utils.createIframe(iframe_url, function (r) {
                  that.ri._didClose(1006, "Unable to load an iframe (" + r + ")");
                });
                that.onmessage_cb = utils.bind(that.onmessage, that);
                utils.attachMessage(that.onmessage_cb);
              };

              IframeTransport.prototype.doCleanup = function () {
                var that = this;

                if (that.iframeObj) {
                  utils.detachMessage(that.onmessage_cb);

                  try {
                    // When the iframe is not loaded, IE raises an exception
                    // on 'contentWindow'.
                    if (that.iframeObj.iframe.contentWindow) {
                      that.postMessage('c');
                    }
                  } catch (x) {}

                  that.iframeObj.cleanup();
                  that.iframeObj = null;
                  that.onmessage_cb = that.iframeObj = null;
                }
              };

              IframeTransport.prototype.onmessage = function (e) {
                var that = this;
                if (e.origin !== that.origin) return;
                var window_id = e.data.slice(0, 8);
                var type = e.data.slice(8, 9);
                var data = e.data.slice(9);
                if (window_id !== that.window_id) return;

                switch (type) {
                  case 's':
                    that.iframeObj.loaded();
                    that.postMessage('s', JSON.stringify([SockJS.version, that.protocol, that.trans_url, that.base_url]));
                    break;

                  case 't':
                    that.ri._didMessage(data);

                    break;
                }
              };

              IframeTransport.prototype.postMessage = function (type, data) {
                var that = this;
                that.iframeObj.post(that.window_id + type + (data || ''), that.origin);
              };

              IframeTransport.prototype.doSend = function (message) {
                this.postMessage('m', message);
              };

              IframeTransport.enabled = function () {
                // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
                // huge delay, or not at all.
                var konqueror = navigator && navigator.userAgent && navigator.userAgent.indexOf('Konqueror') !== -1;
                return (typeof _window.postMessage === 'function' || typeof _window.postMessage === 'object') && !konqueror;
              }; //         [*] End of lib/trans-iframe.js
              //         [*] Including lib/trans-iframe-within.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var curr_window_id;

              var postMessage = function (type, data) {
                if (parent !== _window) {
                  parent.postMessage(curr_window_id + type + (data || ''), '*');
                } else {
                  utils.log("Can't postMessage, no parent window.", type, data);
                }
              };

              var FacadeJS = function () {};

              FacadeJS.prototype._didClose = function (code, reason) {
                postMessage('t', utils.closeFrame(code, reason));
              };

              FacadeJS.prototype._didMessage = function (frame) {
                postMessage('t', frame);
              };

              FacadeJS.prototype._doSend = function (data) {
                this._transport.doSend(data);
              };

              FacadeJS.prototype._doCleanup = function () {
                this._transport.doCleanup();
              };

              utils.parent_origin = undefined;

              SockJS.bootstrap_iframe = function () {
                var facade;
                curr_window_id = _document.location.hash.slice(1);

                var onMessage = function (e) {
                  if (e.source !== parent) return;
                  if (typeof utils.parent_origin === 'undefined') utils.parent_origin = e.origin;
                  if (e.origin !== utils.parent_origin) return;
                  var window_id = e.data.slice(0, 8);
                  var type = e.data.slice(8, 9);
                  var data = e.data.slice(9);
                  if (window_id !== curr_window_id) return;

                  switch (type) {
                    case 's':
                      var p = JSON.parse(data);
                      var version = p[0];
                      var protocol = p[1];
                      var trans_url = p[2];
                      var base_url = p[3];

                      if (version !== SockJS.version) {
                        utils.log("Incompatibile SockJS! Main site uses:" + " \"" + version + "\", the iframe:" + " \"" + SockJS.version + "\".");
                      }

                      if (!utils.flatUrl(trans_url) || !utils.flatUrl(base_url)) {
                        utils.log("Only basic urls are supported in SockJS");
                        return;
                      }

                      if (!utils.isSameOriginUrl(trans_url) || !utils.isSameOriginUrl(base_url)) {
                        utils.log("Can't connect to different domain from within an " + "iframe. (" + JSON.stringify([_window.location.href, trans_url, base_url]) + ")");
                        return;
                      }

                      facade = new FacadeJS();
                      facade._transport = new FacadeJS[protocol](facade, trans_url, base_url);
                      break;

                    case 'm':
                      facade._doSend(data);

                      break;

                    case 'c':
                      if (facade) facade._doCleanup();
                      facade = null;
                      break;
                  }
                }; // alert('test ticker');
                // facade = new FacadeJS();
                // facade._transport = new FacadeJS['w-iframe-xhr-polling'](facade, 'http://host.com:9999/ticker/12/basd');


                utils.attachMessage(onMessage); // Start

                postMessage('s');
              }; //         [*] End of lib/trans-iframe-within.js
              //         [*] Including lib/info.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var InfoReceiver = function (base_url, AjaxObject) {
                var that = this;
                utils.delay(function () {
                  that.doXhr(base_url, AjaxObject);
                });
              };

              InfoReceiver.prototype = new EventEmitter(['finish']);

              InfoReceiver.prototype.doXhr = function (base_url, AjaxObject) {
                var that = this;
                var t0 = new Date().getTime(); // <METEOR>
                // https://github.com/sockjs/sockjs-client/pull/129
                // var xo = new AjaxObject('GET', base_url + '/info');

                var xo = new AjaxObject( // add cachebusting parameter to url to work around a chrome bug:
                // https://code.google.com/p/chromium/issues/detail?id=263981
                // or misbehaving proxies.
                'GET', base_url + '/info?cb=' + utils.random_string(10)); // </METEOR>

                var tref = utils.delay(8000, function () {
                  xo.ontimeout();
                });

                xo.onfinish = function (status, text) {
                  clearTimeout(tref);
                  tref = null;

                  if (status === 200) {
                    var rtt = new Date().getTime() - t0;
                    var info = JSON.parse(text);
                    if (typeof info !== 'object') info = {};
                    that.emit('finish', info, rtt);
                  } else {
                    that.emit('finish');
                  }
                };

                xo.ontimeout = function () {
                  xo.close();
                  that.emit('finish');
                };
              };

              var InfoReceiverIframe = function (base_url) {
                var that = this;

                var go = function () {
                  var ifr = new IframeTransport();
                  ifr.protocol = 'w-iframe-info-receiver';

                  var fun = function (r) {
                    if (typeof r === 'string' && r.substr(0, 1) === 'm') {
                      var d = JSON.parse(r.substr(1));
                      var info = d[0],
                          rtt = d[1];
                      that.emit('finish', info, rtt);
                    } else {
                      that.emit('finish');
                    }

                    ifr.doCleanup();
                    ifr = null;
                  };

                  var mock_ri = {
                    _options: {},
                    _didClose: fun,
                    _didMessage: fun
                  };
                  ifr.i_constructor(mock_ri, base_url, base_url);
                };

                if (!_document.body) {
                  utils.attachEvent('load', go);
                } else {
                  go();
                }
              };

              InfoReceiverIframe.prototype = new EventEmitter(['finish']);

              var InfoReceiverFake = function () {
                // It may not be possible to do cross domain AJAX to get the info
                // data, for example for IE7. But we want to run JSONP, so let's
                // fake the response, with rtt=2s (rto=6s).
                var that = this;
                utils.delay(function () {
                  that.emit('finish', {}, 2000);
                });
              };

              InfoReceiverFake.prototype = new EventEmitter(['finish']);

              var createInfoReceiver = function (base_url) {
                if (utils.isSameOriginUrl(base_url)) {
                  // If, for some reason, we have SockJS locally - there's no
                  // need to start up the complex machinery. Just use ajax.
                  return new InfoReceiver(base_url, utils.XHRLocalObject);
                }

                switch (utils.isXHRCorsCapable()) {
                  case 1:
                    // XHRLocalObject -> no_credentials=true
                    return new InfoReceiver(base_url, utils.XHRLocalObject);

                  case 2:
                    // <METEOR>
                    // https://github.com/sockjs/sockjs-client/issues/79
                    // XDR doesn't work across different schemes
                    // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
                    if (utils.isSameOriginScheme(base_url)) return new InfoReceiver(base_url, utils.XDRObject);else return new InfoReceiverFake();
                  // </METEOR>

                  case 3:
                    // Opera
                    return new InfoReceiverIframe(base_url);

                  default:
                    // IE 7
                    return new InfoReceiverFake();
                }

                ;
              };

              var WInfoReceiverIframe = FacadeJS['w-iframe-info-receiver'] = function (ri, _trans_url, base_url) {
                var ir = new InfoReceiver(base_url, utils.XHRLocalObject);

                ir.onfinish = function (info, rtt) {
                  ri._didMessage('m' + JSON.stringify([info, rtt]));

                  ri._didClose();
                };
              };

              WInfoReceiverIframe.prototype.doCleanup = function () {}; //         [*] End of lib/info.js
              //         [*] Including lib/trans-iframe-eventsource.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var EventSourceIframeTransport = SockJS['iframe-eventsource'] = function () {
                var that = this;
                that.protocol = 'w-iframe-eventsource';
                that.i_constructor.apply(that, arguments);
              };

              EventSourceIframeTransport.prototype = new IframeTransport();

              EventSourceIframeTransport.enabled = function () {
                return 'EventSource' in _window && IframeTransport.enabled();
              };

              EventSourceIframeTransport.need_body = true;
              EventSourceIframeTransport.roundTrips = 3; // html, javascript, eventsource
              // w-iframe-eventsource

              var EventSourceTransport = FacadeJS['w-iframe-eventsource'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/eventsource', EventSourceReceiver, utils.XHRLocalObject);
              };

              EventSourceTransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-eventsource.js
              //         [*] Including lib/trans-iframe-xhr-polling.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var XhrPollingIframeTransport = SockJS['iframe-xhr-polling'] = function () {
                var that = this;
                that.protocol = 'w-iframe-xhr-polling';
                that.i_constructor.apply(that, arguments);
              };

              XhrPollingIframeTransport.prototype = new IframeTransport();

              XhrPollingIframeTransport.enabled = function () {
                return _window.XMLHttpRequest && IframeTransport.enabled();
              };

              XhrPollingIframeTransport.need_body = true;
              XhrPollingIframeTransport.roundTrips = 3; // html, javascript, xhr
              // w-iframe-xhr-polling

              var XhrPollingITransport = FacadeJS['w-iframe-xhr-polling'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRLocalObject);
              };

              XhrPollingITransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-xhr-polling.js
              //         [*] Including lib/trans-iframe-htmlfile.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // This transport generally works in any browser, but will cause a
              // spinning cursor to appear in any browser other than IE.
              // We may test this transport in all browsers - why not, but in
              // production it should be only run in IE.

              var HtmlFileIframeTransport = SockJS['iframe-htmlfile'] = function () {
                var that = this;
                that.protocol = 'w-iframe-htmlfile';
                that.i_constructor.apply(that, arguments);
              }; // Inheritance.


              HtmlFileIframeTransport.prototype = new IframeTransport();

              HtmlFileIframeTransport.enabled = function () {
                return IframeTransport.enabled();
              };

              HtmlFileIframeTransport.need_body = true;
              HtmlFileIframeTransport.roundTrips = 3; // html, javascript, htmlfile
              // w-iframe-htmlfile

              var HtmlFileTransport = FacadeJS['w-iframe-htmlfile'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/htmlfile', HtmlfileReceiver, utils.XHRLocalObject);
              };

              HtmlFileTransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-htmlfile.js
              //         [*] Including lib/trans-polling.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var Polling = function (ri, Receiver, recv_url, AjaxObject) {
                var that = this;
                that.ri = ri;
                that.Receiver = Receiver;
                that.recv_url = recv_url;
                that.AjaxObject = AjaxObject;

                that._scheduleRecv();
              };

              Polling.prototype._scheduleRecv = function () {
                var that = this;
                var poll = that.poll = new that.Receiver(that.recv_url, that.AjaxObject);
                var msg_counter = 0;

                poll.onmessage = function (e) {
                  msg_counter += 1;

                  that.ri._didMessage(e.data);
                };

                poll.onclose = function (e) {
                  that.poll = poll = poll.onmessage = poll.onclose = null;

                  if (!that.poll_is_closing) {
                    if (e.reason === 'permanent') {
                      that.ri._didClose(1006, 'Polling error (' + e.reason + ')');
                    } else {
                      that._scheduleRecv();
                    }
                  }
                };
              };

              Polling.prototype.abort = function () {
                var that = this;
                that.poll_is_closing = true;

                if (that.poll) {
                  that.poll.abort();
                }
              }; //         [*] End of lib/trans-polling.js
              //         [*] Including lib/trans-receiver-eventsource.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var EventSourceReceiver = function (url) {
                var that = this;
                var es = new EventSource(url);

                es.onmessage = function (e) {
                  that.dispatchEvent(new SimpleEvent('message', {
                    'data': unescape(e.data)
                  }));
                };

                that.es_close = es.onerror = function (e, abort_reason) {
                  // ES on reconnection has readyState = 0 or 1.
                  // on network error it's CLOSED = 2
                  var reason = abort_reason ? 'user' : es.readyState !== 2 ? 'network' : 'permanent';
                  that.es_close = es.onmessage = es.onerror = null; // EventSource reconnects automatically.

                  es.close();
                  es = null; // Safari and chrome < 15 crash if we close window before
                  // waiting for ES cleanup. See:
                  //   https://code.google.com/p/chromium/issues/detail?id=89155

                  utils.delay(200, function () {
                    that.dispatchEvent(new SimpleEvent('close', {
                      reason: reason
                    }));
                  });
                };
              };

              EventSourceReceiver.prototype = new REventTarget();

              EventSourceReceiver.prototype.abort = function () {
                var that = this;

                if (that.es_close) {
                  that.es_close({}, true);
                }
              }; //         [*] End of lib/trans-receiver-eventsource.js
              //         [*] Including lib/trans-receiver-htmlfile.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var _is_ie_htmlfile_capable;

              var isIeHtmlfileCapable = function () {
                if (_is_ie_htmlfile_capable === undefined) {
                  if ('ActiveXObject' in _window) {
                    try {
                      _is_ie_htmlfile_capable = !!new ActiveXObject('htmlfile');
                    } catch (x) {}
                  } else {
                    _is_ie_htmlfile_capable = false;
                  }
                }

                return _is_ie_htmlfile_capable;
              };

              var HtmlfileReceiver = function (url) {
                var that = this;
                utils.polluteGlobalNamespace();
                that.id = 'a' + utils.random_string(6, 26);
                url += (url.indexOf('?') === -1 ? '?' : '&') + 'c=' + escape(WPrefix + '.' + that.id);
                var constructor = isIeHtmlfileCapable() ? utils.createHtmlfile : utils.createIframe;
                var iframeObj;
                _window[WPrefix][that.id] = {
                  start: function () {
                    iframeObj.loaded();
                  },
                  message: function (data) {
                    that.dispatchEvent(new SimpleEvent('message', {
                      'data': data
                    }));
                  },
                  stop: function () {
                    that.iframe_close({}, 'network');
                  }
                };

                that.iframe_close = function (e, abort_reason) {
                  iframeObj.cleanup();
                  that.iframe_close = iframeObj = null;
                  delete _window[WPrefix][that.id];
                  that.dispatchEvent(new SimpleEvent('close', {
                    reason: abort_reason
                  }));
                };

                iframeObj = constructor(url, function (e) {
                  that.iframe_close({}, 'permanent');
                });
              };

              HtmlfileReceiver.prototype = new REventTarget();

              HtmlfileReceiver.prototype.abort = function () {
                var that = this;

                if (that.iframe_close) {
                  that.iframe_close({}, 'user');
                }
              }; //         [*] End of lib/trans-receiver-htmlfile.js
              //         [*] Including lib/trans-receiver-xhr.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var XhrReceiver = function (url, AjaxObject) {
                var that = this;
                var buf_pos = 0;
                that.xo = new AjaxObject('POST', url, null);

                that.xo.onchunk = function (status, text) {
                  if (status !== 200) return;

                  while (1) {
                    var buf = text.slice(buf_pos);
                    var p = buf.indexOf('\n');
                    if (p === -1) break;
                    buf_pos += p + 1;
                    var msg = buf.slice(0, p);
                    that.dispatchEvent(new SimpleEvent('message', {
                      data: msg
                    }));
                  }
                };

                that.xo.onfinish = function (status, text) {
                  that.xo.onchunk(status, text);
                  that.xo = null;
                  var reason = status === 200 ? 'network' : 'permanent';
                  that.dispatchEvent(new SimpleEvent('close', {
                    reason: reason
                  }));
                };
              };

              XhrReceiver.prototype = new REventTarget();

              XhrReceiver.prototype.abort = function () {
                var that = this;

                if (that.xo) {
                  that.xo.close();
                  that.dispatchEvent(new SimpleEvent('close', {
                    reason: 'user'
                  }));
                  that.xo = null;
                }
              }; //         [*] End of lib/trans-receiver-xhr.js
              //         [*] Including lib/test-hooks.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // For testing


              SockJS.getUtils = function () {
                return utils;
              };

              SockJS.getIframeTransport = function () {
                return IframeTransport;
              }; //         [*] End of lib/test-hooks.js


              return SockJS;
            }();

            if ('_sockjs_onload' in window) setTimeout(_sockjs_onload, 1); // AMD compliance

            if (typeof define === 'function' && define.amd) {
              define('sockjs', [], function () {
                return SockJS;
              });
            } //     [*] End of lib/index.js
            // [*] End of lib/all.js
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "urls.js": function module(_require5, _exports3, _module4) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/urls.js                                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module4.export({
              toSockjsUrl: () => toSockjsUrl,
              toWebsocketUrl: () => toWebsocketUrl
            });

            // @param url {String} URL to Meteor app, eg:
            //   "/" or "madewith.meteor.com" or "https://foo.meteor.com"
            //   or "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"
            // @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.
            // for scheme "http" and subPath "sockjs"
            //   "http://subdomain.meteor.com/sockjs" or "/sockjs"
            //   or "https://ddp--1234-foo.meteor.com/sockjs"
            function translateUrl(url, newSchemeBase, subPath) {
              if (!newSchemeBase) {
                newSchemeBase = 'http';
              }

              if (subPath !== "sockjs" && url.startsWith("/")) {
                url = Meteor.absoluteUrl(url.substr(1));
              }

              var ddpUrlMatch = url.match(/^ddp(i?)\+sockjs:\/\//);
              var httpUrlMatch = url.match(/^http(s?):\/\//);
              var newScheme;

              if (ddpUrlMatch) {
                // Remove scheme and split off the host.
                var urlAfterDDP = url.substr(ddpUrlMatch[0].length);
                newScheme = ddpUrlMatch[1] === 'i' ? newSchemeBase : newSchemeBase + 's';
                var slashPos = urlAfterDDP.indexOf('/');
                var host = slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);
                var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos); // In the host (ONLY!), change '*' characters into random digits. This
                // allows different stream connections to connect to different hostnames
                // and avoid browser per-hostname connection limits.

                host = host.replace(/\*/g, () => Math.floor(Math.random() * 10));
                return newScheme + '://' + host + rest;
              } else if (httpUrlMatch) {
                newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + 's';
                var urlAfterHttp = url.substr(httpUrlMatch[0].length);
                url = newScheme + '://' + urlAfterHttp;
              } // Prefix FQDNs but not relative URLs


              if (url.indexOf('://') === -1 && !url.startsWith('/')) {
                url = newSchemeBase + '://' + url;
              } // XXX This is not what we should be doing: if I have a site
              // deployed at "/foo", then DDP.connect("/") should actually connect
              // to "/", not to "/foo". "/" is an absolute path. (Contrast: if
              // deployed at "/foo", it would be reasonable for DDP.connect("bar")
              // to connect to "/foo/bar").
              //
              // We should make this properly honor absolute paths rather than
              // forcing the path to be relative to the site root. Simultaneously,
              // we should set DDP_DEFAULT_CONNECTION_URL to include the site
              // root. See also client_convenience.js #RationalizingRelativeDDPURLs


              url = Meteor._relativeToSiteRootUrl(url);
              if (url.endsWith('/')) return url + subPath;else return url + '/' + subPath;
            }

            function toSockjsUrl(url) {
              return translateUrl(url, 'http', 'sockjs');
            }

            function toWebsocketUrl(url) {
              return translateUrl(url, 'ws', 'websocket');
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  /* Exports */
  Package._define("socket-stream-client");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;
  var IdMap = Package['id-map'].IdMap;
  var Hook = Package['callback-hook'].Hook;
  var DDPCommon = Package['ddp-common'].DDPCommon;
  var Reload = Package.reload.Reload;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var MongoID = Package['mongo-id'].MongoID;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var options, DDP;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ddp-client": { "client": { "client.js": function module(_require, _exports, _module) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/client/client.js                                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module.link("../common/namespace.js", {
                DDP: "DDP"
              }, 0);
              _module.link("../common/livedata_connection");
              _module.link("./client_convenience");
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "client_convenience.js": function module(_require3, _exports3, _module2) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/client/client_convenience.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              let DDP;
              _module2.link("../common/namespace.js", {
                DDP(v) {
                  DDP = v;
                }

              }, 0);
              let Meteor;
              _module2.link("meteor/meteor", {
                Meteor(v) {
                  Meteor = v;
                }

              }, 1);

              // Meteor.refresh can be called on the client (if you're in common code) but it
              // only has an effect on the server.
              Meteor.refresh = () => {}; // By default, try to connect back to the same endpoint as the page
              // was served from.
              //
              // XXX We should be doing this a different way. Right now we don't
              // include ROOT_URL_PATH_PREFIX when computing ddpUrl. (We don't
              // include it on the server when computing
              // DDP_DEFAULT_CONNECTION_URL, and we don't include it in our
              // default, '/'.) We get by with this because DDP.connect then
              // forces the URL passed to it to be interpreted relative to the
              // app's deploy path, even if it is absolute. Instead, we should
              // make DDP_DEFAULT_CONNECTION_URL, if set, include the path prefix;
              // make the default ddpUrl be '' rather that '/'; and make
              // _translateUrl in stream_client_common.js not force absolute paths
              // to be treated like relative paths. See also
              // stream_client_common.js #RationalizingRelativeDDPURLs


              var ddpUrl = '/';

              if (typeof __meteor_runtime_config__ !== 'undefined') {
                if (__meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL) ddpUrl = __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL;
              }

              var retry = new Retry();

              function onDDPVersionNegotiationFailure(description) {
                Meteor._debug(description);

                if (Package.reload) {
                  var migrationData = Package.reload.Reload._migrationData('livedata') || Object.create(null);
                  var failures = migrationData.DDPVersionNegotiationFailures || 0;
                  ++failures;

                  Package.reload.Reload._onMigrate('livedata', () => {
                    return [true, {
                      DDPVersionNegotiationFailures: failures
                    }];
                  });

                  retry.retryLater(failures, () => {
                    Package.reload.Reload._reload();
                  });
                }
              }

              Meteor.connection = DDP.connect(ddpUrl, {
                onDDPVersionNegotiationFailure: onDDPVersionNegotiationFailure
              }); // Proxy the public methods of Meteor.connection so they can
              // be called directly on Meteor.

              ['subscribe', 'methods', 'call', 'apply', 'status', 'reconnect', 'disconnect'].forEach(name => {
                Meteor[name] = Meteor.connection[name].bind(Meteor.connection);
              }); // Meteor.connection used to be called
              // Meteor.default_connection. Provide backcompat as a courtesy even
              // though it was never documented.
              // XXX COMPAT WITH 0.6.4

              Meteor.default_connection = Meteor.connection; // We should transition from Meteor.connect to DDP.connect.
              // XXX COMPAT WITH 0.6.4

              Meteor.connect = DDP.connect;
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } }, "common": { "MethodInvoker.js": function module(_require4, _exports4, _module3) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/common/MethodInvoker.js                                                                         //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module3.export({
                default: () => MethodInvoker
              });

              class MethodInvoker {
                constructor(options) {
                  // Public (within this file) fields.
                  this.methodId = options.methodId;
                  this.sentMessage = false;
                  this._callback = options.callback;
                  this._connection = options.connection;
                  this._message = options.message;

                  this._onResultReceived = options.onResultReceived || (() => {});

                  this._wait = options.wait;
                  this.noRetry = options.noRetry;
                  this._methodResult = null;
                  this._dataVisible = false; // Register with the connection.

                  this._connection._methodInvokers[this.methodId] = this;
                } // Sends the method message to the server. May be called additional times if
                // we lose the connection and reconnect before receiving a result.


                sendMessage() {
                  // This function is called before sending a method (including resending on
                  // reconnect). We should only (re)send methods where we don't already have a
                  // result!
                  if (this.gotResult()) throw new Error('sendingMethod is called on method with result'); // If we're re-sending it, it doesn't matter if data was written the first
                  // time.

                  this._dataVisible = false;
                  this.sentMessage = true; // If this is a wait method, make all data messages be buffered until it is
                  // done.

                  if (this._wait) this._connection._methodsBlockingQuiescence[this.methodId] = true; // Actually send the message.

                  this._connection._send(this._message);
                } // Invoke the callback, if we have both a result and know that all data has
                // been written to the local cache.


                _maybeInvokeCallback() {
                  if (this._methodResult && this._dataVisible) {
                    // Call the callback. (This won't throw: the callback was wrapped with
                    // bindEnvironment.)
                    this._callback(this._methodResult[0], this._methodResult[1]); // Forget about this method.


                    delete this._connection._methodInvokers[this.methodId]; // Let the connection know that this method is finished, so it can try to
                    // move on to the next block of methods.

                    this._connection._outstandingMethodFinished();
                  }
                } // Call with the result of the method from the server. Only may be called
                // once; once it is called, you should not call sendMessage again.
                // If the user provided an onResultReceived callback, call it immediately.
                // Then invoke the main callback if data is also visible.


                receiveResult(err, result) {
                  if (this.gotResult()) throw new Error('Methods should only receive results once');
                  this._methodResult = [err, result];

                  this._onResultReceived(err, result);

                  this._maybeInvokeCallback();
                } // Call this when all data written by the method is visible. This means that
                // the method has returns its "data is done" message *AND* all server
                // documents that are buffered at that time have been written to the local
                // cache. Invokes the main callback if the result has been received.


                dataVisible() {
                  this._dataVisible = true;

                  this._maybeInvokeCallback();
                } // True if receiveResult has been called.


                gotResult() {
                  return !!this._methodResult;
                }

              }
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "livedata_connection.js": function module(_require5, _exports5, _module4) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/common/livedata_connection.js                                                                   //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              let _objectSpread;

              _module4.link("@babel/runtime/helpers/objectSpread2", {
                default(v) {
                  _objectSpread = v;
                }

              }, 0);
              _module4.export({
                Connection: () => Connection
              });
              let Meteor;
              _module4.link("meteor/meteor", {
                Meteor(v) {
                  Meteor = v;
                }

              }, 0);
              let DDPCommon;
              _module4.link("meteor/ddp-common", {
                DDPCommon(v) {
                  DDPCommon = v;
                }

              }, 1);
              let Tracker;
              _module4.link("meteor/tracker", {
                Tracker(v) {
                  Tracker = v;
                }

              }, 2);
              let EJSON;
              _module4.link("meteor/ejson", {
                EJSON(v) {
                  EJSON = v;
                }

              }, 3);
              let Random;
              _module4.link("meteor/random", {
                Random(v) {
                  Random = v;
                }

              }, 4);
              let Hook;
              _module4.link("meteor/callback-hook", {
                Hook(v) {
                  Hook = v;
                }

              }, 5);
              let MongoID;
              _module4.link("meteor/mongo-id", {
                MongoID(v) {
                  MongoID = v;
                }

              }, 6);
              let DDP;
              _module4.link("./namespace.js", {
                DDP(v) {
                  DDP = v;
                }

              }, 7);
              let MethodInvoker;
              _module4.link("./MethodInvoker.js", {
                default(v) {
                  MethodInvoker = v;
                }

              }, 8);
              let hasOwn, slice, keys, isEmpty, last;
              _module4.link("meteor/ddp-common/utils.js", {
                hasOwn(v) {
                  hasOwn = v;
                },

                slice(v) {
                  slice = v;
                },

                keys(v) {
                  keys = v;
                },

                isEmpty(v) {
                  isEmpty = v;
                },

                last(v) {
                  last = v;
                }

              }, 9);

              if (Meteor.isServer) {
                var Fiber = Npm.require('fibers');

                var Future = Npm.require('fibers/future');
              }

              class MongoIDMap extends IdMap {
                constructor() {
                  super(MongoID.idStringify, MongoID.idParse);
                }

              } // @param url {String|Object} URL to Meteor app,
              //   or an object as a test hook (see code)
              // Options:
              //   reloadWithOutstanding: is it OK to reload if there are outstanding methods?
              //   headers: extra headers to send on the websockets connection, for
              //     server-to-server DDP only
              //   _sockjsOptions: Specifies options to pass through to the sockjs client
              //   onDDPNegotiationVersionFailure: callback when version negotiation fails.
              //
              // XXX There should be a way to destroy a DDP connection, causing all
              // outstanding method calls to fail.
              //
              // XXX Our current way of handling failure and reconnection is great
              // for an app (where we want to tolerate being disconnected as an
              // expect state, and keep trying forever to reconnect) but cumbersome
              // for something like a command line tool that wants to make a
              // connection, call a method, and print an error if connection
              // fails. We should have better usability in the latter case (while
              // still transparently reconnecting if it's just a transient failure
              // or the server migrating us).


              class Connection {
                constructor(url, options) {
                  var self = this;
                  this.options = options = _objectSpread({
                    onConnected() {},

                    onDDPVersionNegotiationFailure(description) {
                      Meteor._debug(description);
                    },

                    heartbeatInterval: 17500,
                    heartbeatTimeout: 15000,
                    npmFayeOptions: Object.create(null),
                    // These options are only for testing.
                    reloadWithOutstanding: false,
                    supportedDDPVersions: DDPCommon.SUPPORTED_DDP_VERSIONS,
                    retry: true,
                    respondToPings: true,
                    // When updates are coming within this ms interval, batch them together.
                    bufferedWritesInterval: 5,
                    // Flush buffers immediately if writes are happening continuously for more than this many ms.
                    bufferedWritesMaxAge: 500
                  }, options); // If set, called when we reconnect, queuing method calls _before_ the
                  // existing outstanding ones.
                  // NOTE: This feature has been preserved for backwards compatibility. The
                  // preferred method of setting a callback on reconnect is to use
                  // DDP.onReconnect.

                  self.onReconnect = null; // as a test hook, allow passing a stream instead of a url.

                  if (typeof url === 'object') {
                    self._stream = url;
                  } else {
                    const {
                      ClientStream
                    } = _require5("meteor/socket-stream-client");

                    self._stream = new ClientStream(url, {
                      retry: options.retry,
                      ConnectionError: DDP.ConnectionError,
                      headers: options.headers,
                      _sockjsOptions: options._sockjsOptions,
                      // Used to keep some tests quiet, or for other cases in which
                      // the right thing to do with connection errors is to silently
                      // fail (e.g. sending package usage stats). At some point we
                      // should have a real API for handling client-stream-level
                      // errors.
                      _dontPrintErrors: options._dontPrintErrors,
                      connectTimeoutMs: options.connectTimeoutMs,
                      npmFayeOptions: options.npmFayeOptions
                    });
                  }

                  self._lastSessionId = null;
                  self._versionSuggestion = null; // The last proposed DDP version.

                  self._version = null; // The DDP version agreed on by client and server.

                  self._stores = Object.create(null); // name -> object with methods

                  self._methodHandlers = Object.create(null); // name -> func

                  self._nextMethodId = 1;
                  self._supportedDDPVersions = options.supportedDDPVersions;
                  self._heartbeatInterval = options.heartbeatInterval;
                  self._heartbeatTimeout = options.heartbeatTimeout; // Tracks methods which the user has tried to call but which have not yet
                  // called their user callback (ie, they are waiting on their result or for all
                  // of their writes to be written to the local cache). Map from method ID to
                  // MethodInvoker object.

                  self._methodInvokers = Object.create(null); // Tracks methods which the user has called but whose result messages have not
                  // arrived yet.
                  //
                  // _outstandingMethodBlocks is an array of blocks of methods. Each block
                  // represents a set of methods that can run at the same time. The first block
                  // represents the methods which are currently in flight; subsequent blocks
                  // must wait for previous blocks to be fully finished before they can be sent
                  // to the server.
                  //
                  // Each block is an object with the following fields:
                  // - methods: a list of MethodInvoker objects
                  // - wait: a boolean; if true, this block had a single method invoked with
                  //         the "wait" option
                  //
                  // There will never be adjacent blocks with wait=false, because the only thing
                  // that makes methods need to be serialized is a wait method.
                  //
                  // Methods are removed from the first block when their "result" is
                  // received. The entire first block is only removed when all of the in-flight
                  // methods have received their results (so the "methods" list is empty) *AND*
                  // all of the data written by those methods are visible in the local cache. So
                  // it is possible for the first block's methods list to be empty, if we are
                  // still waiting for some objects to quiesce.
                  //
                  // Example:
                  //  _outstandingMethodBlocks = [
                  //    {wait: false, methods: []},
                  //    {wait: true, methods: [<MethodInvoker for 'login'>]},
                  //    {wait: false, methods: [<MethodInvoker for 'foo'>,
                  //                            <MethodInvoker for 'bar'>]}]
                  // This means that there were some methods which were sent to the server and
                  // which have returned their results, but some of the data written by
                  // the methods may not be visible in the local cache. Once all that data is
                  // visible, we will send a 'login' method. Once the login method has returned
                  // and all the data is visible (including re-running subs if userId changes),
                  // we will send the 'foo' and 'bar' methods in parallel.

                  self._outstandingMethodBlocks = []; // method ID -> array of objects with keys 'collection' and 'id', listing
                  // documents written by a given method's stub. keys are associated with
                  // methods whose stub wrote at least one document, and whose data-done message
                  // has not yet been received.

                  self._documentsWrittenByStub = Object.create(null); // collection -> IdMap of "server document" object. A "server document" has:
                  // - "document": the version of the document according the
                  //   server (ie, the snapshot before a stub wrote it, amended by any changes
                  //   received from the server)
                  //   It is undefined if we think the document does not exist
                  // - "writtenByStubs": a set of method IDs whose stubs wrote to the document
                  //   whose "data done" messages have not yet been processed

                  self._serverDocuments = Object.create(null); // Array of callbacks to be called after the next update of the local
                  // cache. Used for:
                  //  - Calling methodInvoker.dataVisible and sub ready callbacks after
                  //    the relevant data is flushed.
                  //  - Invoking the callbacks of "half-finished" methods after reconnect
                  //    quiescence. Specifically, methods whose result was received over the old
                  //    connection (so we don't re-send it) but whose data had not been made
                  //    visible.

                  self._afterUpdateCallbacks = []; // In two contexts, we buffer all incoming data messages and then process them
                  // all at once in a single update:
                  //   - During reconnect, we buffer all data messages until all subs that had
                  //     been ready before reconnect are ready again, and all methods that are
                  //     active have returned their "data done message"; then
                  //   - During the execution of a "wait" method, we buffer all data messages
                  //     until the wait method gets its "data done" message. (If the wait method
                  //     occurs during reconnect, it doesn't get any special handling.)
                  // all data messages are processed in one update.
                  //
                  // The following fields are used for this "quiescence" process.
                  // This buffers the messages that aren't being processed yet.

                  self._messagesBufferedUntilQuiescence = []; // Map from method ID -> true. Methods are removed from this when their
                  // "data done" message is received, and we will not quiesce until it is
                  // empty.

                  self._methodsBlockingQuiescence = Object.create(null); // map from sub ID -> true for subs that were ready (ie, called the sub
                  // ready callback) before reconnect but haven't become ready again yet

                  self._subsBeingRevived = Object.create(null); // map from sub._id -> true
                  // if true, the next data update should reset all stores. (set during
                  // reconnect.)

                  self._resetStores = false; // name -> array of updates for (yet to be created) collections

                  self._updatesForUnknownStores = Object.create(null); // if we're blocking a migration, the retry func

                  self._retryMigrate = null;
                  self.__flushBufferedWrites = Meteor.bindEnvironment(self._flushBufferedWrites, 'flushing DDP buffered writes', self); // Collection name -> array of messages.

                  self._bufferedWrites = Object.create(null); // When current buffer of updates must be flushed at, in ms timestamp.

                  self._bufferedWritesFlushAt = null; // Timeout handle for the next processing of all pending writes

                  self._bufferedWritesFlushHandle = null;
                  self._bufferedWritesInterval = options.bufferedWritesInterval;
                  self._bufferedWritesMaxAge = options.bufferedWritesMaxAge; // metadata for subscriptions.  Map from sub ID to object with keys:
                  //   - id
                  //   - name
                  //   - params
                  //   - inactive (if true, will be cleaned up if not reused in re-run)
                  //   - ready (has the 'ready' message been received?)
                  //   - readyCallback (an optional callback to call when ready)
                  //   - errorCallback (an optional callback to call if the sub terminates with
                  //                    an error, XXX COMPAT WITH 1.0.3.1)
                  //   - stopCallback (an optional callback to call when the sub terminates
                  //     for any reason, with an error argument if an error triggered the stop)

                  self._subscriptions = Object.create(null); // Reactive userId.

                  self._userId = null;
                  self._userIdDeps = new Tracker.Dependency(); // Block auto-reload while we're waiting for method responses.

                  if (Meteor.isClient && Package.reload && !options.reloadWithOutstanding) {
                    Package.reload.Reload._onMigrate(retry => {
                      if (!self._readyToMigrate()) {
                        if (self._retryMigrate) throw new Error('Two migrations in progress?');
                        self._retryMigrate = retry;
                        return false;
                      } else {
                        return [true];
                      }
                    });
                  }

                  var onDisconnect = () => {
                    if (self._heartbeat) {
                      self._heartbeat.stop();

                      self._heartbeat = null;
                    }
                  };

                  if (Meteor.isServer) {
                    self._stream.on('message', Meteor.bindEnvironment(this.onMessage.bind(this), 'handling DDP message'));

                    self._stream.on('reset', Meteor.bindEnvironment(this.onReset.bind(this), 'handling DDP reset'));

                    self._stream.on('disconnect', Meteor.bindEnvironment(onDisconnect, 'handling DDP disconnect'));
                  } else {
                    self._stream.on('message', this.onMessage.bind(this));

                    self._stream.on('reset', this.onReset.bind(this));

                    self._stream.on('disconnect', onDisconnect);
                  }
                } // 'name' is the name of the data on the wire that should go in the
                // store. 'wrappedStore' should be an object with methods beginUpdate, update,
                // endUpdate, saveOriginals, retrieveOriginals. see Collection for an example.


                registerStore(name, wrappedStore) {
                  var self = this;
                  if (name in self._stores) return false; // Wrap the input object in an object which makes any store method not
                  // implemented by 'store' into a no-op.

                  var store = Object.create(null);
                  ['update', 'beginUpdate', 'endUpdate', 'saveOriginals', 'retrieveOriginals', 'getDoc', '_getCollection'].forEach(method => {
                    store[method] = function () {
                      if (wrappedStore[method]) {
                        return wrappedStore[method](...arguments);
                      }
                    };
                  });
                  self._stores[name] = store;
                  var queued = self._updatesForUnknownStores[name];

                  if (queued) {
                    store.beginUpdate(queued.length, false);
                    queued.forEach(msg => {
                      store.update(msg);
                    });
                    store.endUpdate();
                    delete self._updatesForUnknownStores[name];
                  }

                  return true;
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.subscribe
                 * @summary Subscribe to a record set.  Returns a handle that provides
                 * `stop()` and `ready()` methods.
                 * @locus Client
                 * @param {String} name Name of the subscription.  Matches the name of the
                 * server's `publish()` call.
                 * @param {EJSONable} [arg1,arg2...] Optional arguments passed to publisher
                 * function on server.
                 * @param {Function|Object} [callbacks] Optional. May include `onStop`
                 * and `onReady` callbacks. If there is an error, it is passed as an
                 * argument to `onStop`. If a function is passed instead of an object, it
                 * is interpreted as an `onReady` callback.
                 */

                subscribe(name
                /* .. [arguments] .. (callback|callbacks) */
                ) {
                  var self = this;
                  var params = slice.call(arguments, 1);
                  var callbacks = Object.create(null);

                  if (params.length) {
                    var lastParam = params[params.length - 1];

                    if (typeof lastParam === 'function') {
                      callbacks.onReady = params.pop();
                    } else if (lastParam && [lastParam.onReady, // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use
                    // onStop with an error callback instead.
                    lastParam.onError, lastParam.onStop].some(f => typeof f === "function")) {
                      callbacks = params.pop();
                    }
                  } // Is there an existing sub with the same name and param, run in an
                  // invalidated Computation? This will happen if we are rerunning an
                  // existing computation.
                  //
                  // For example, consider a rerun of:
                  //
                  //     Tracker.autorun(function () {
                  //       Meteor.subscribe("foo", Session.get("foo"));
                  //       Meteor.subscribe("bar", Session.get("bar"));
                  //     });
                  //
                  // If "foo" has changed but "bar" has not, we will match the "bar"
                  // subcribe to an existing inactive subscription in order to not
                  // unsub and resub the subscription unnecessarily.
                  //
                  // We only look for one such sub; if there are N apparently-identical subs
                  // being invalidated, we will require N matching subscribe calls to keep
                  // them all active.


                  var existing;
                  keys(self._subscriptions).some(id => {
                    const sub = self._subscriptions[id];

                    if (sub.inactive && sub.name === name && EJSON.equals(sub.params, params)) {
                      return existing = sub;
                    }
                  });
                  var id;

                  if (existing) {
                    id = existing.id;
                    existing.inactive = false; // reactivate

                    if (callbacks.onReady) {
                      // If the sub is not already ready, replace any ready callback with the
                      // one provided now. (It's not really clear what users would expect for
                      // an onReady callback inside an autorun; the semantics we provide is
                      // that at the time the sub first becomes ready, we call the last
                      // onReady callback provided, if any.)
                      // If the sub is already ready, run the ready callback right away.
                      // It seems that users would expect an onReady callback inside an
                      // autorun to trigger once the the sub first becomes ready and also
                      // when re-subs happens.
                      if (existing.ready) {
                        callbacks.onReady();
                      } else {
                        existing.readyCallback = callbacks.onReady;
                      }
                    } // XXX COMPAT WITH 1.0.3.1 we used to have onError but now we call
                    // onStop with an optional error argument


                    if (callbacks.onError) {
                      // Replace existing callback if any, so that errors aren't
                      // double-reported.
                      existing.errorCallback = callbacks.onError;
                    }

                    if (callbacks.onStop) {
                      existing.stopCallback = callbacks.onStop;
                    }
                  } else {
                    // New sub! Generate an id, save it locally, and send message.
                    id = Random.id();
                    self._subscriptions[id] = {
                      id: id,
                      name: name,
                      params: EJSON.clone(params),
                      inactive: false,
                      ready: false,
                      readyDeps: new Tracker.Dependency(),
                      readyCallback: callbacks.onReady,
                      // XXX COMPAT WITH 1.0.3.1 #errorCallback
                      errorCallback: callbacks.onError,
                      stopCallback: callbacks.onStop,
                      connection: self,

                      remove() {
                        delete this.connection._subscriptions[this.id];
                        this.ready && this.readyDeps.changed();
                      },

                      stop() {
                        this.connection._send({
                          msg: 'unsub',
                          id: id
                        });

                        this.remove();

                        if (callbacks.onStop) {
                          callbacks.onStop();
                        }
                      }

                    };

                    self._send({
                      msg: 'sub',
                      id: id,
                      name: name,
                      params: params
                    });
                  } // return a handle to the application.


                  var handle = {
                    stop() {
                      if (!hasOwn.call(self._subscriptions, id)) {
                        return;
                      }

                      self._subscriptions[id].stop();
                    },

                    ready() {
                      // return false if we've unsubscribed.
                      if (!hasOwn.call(self._subscriptions, id)) {
                        return false;
                      }

                      var record = self._subscriptions[id];
                      record.readyDeps.depend();
                      return record.ready;
                    },

                    subscriptionId: id
                  };

                  if (Tracker.active) {
                    // We're in a reactive computation, so we'd like to unsubscribe when the
                    // computation is invalidated... but not if the rerun just re-subscribes
                    // to the same subscription!  When a rerun happens, we use onInvalidate
                    // as a change to mark the subscription "inactive" so that it can
                    // be reused from the rerun.  If it isn't reused, it's killed from
                    // an afterFlush.
                    Tracker.onInvalidate(c => {
                      if (hasOwn.call(self._subscriptions, id)) {
                        self._subscriptions[id].inactive = true;
                      }

                      Tracker.afterFlush(() => {
                        if (hasOwn.call(self._subscriptions, id) && self._subscriptions[id].inactive) {
                          handle.stop();
                        }
                      });
                    });
                  }

                  return handle;
                } // options:
                // - onLateError {Function(error)} called if an error was received after the ready event.
                //     (errors received before ready cause an error to be thrown)


                _subscribeAndWait(name, args, options) {
                  var self = this;
                  var f = new Future();
                  var ready = false;
                  var handle;
                  args = args || [];
                  args.push({
                    onReady() {
                      ready = true;
                      f['return']();
                    },

                    onError(e) {
                      if (!ready) f['throw'](e);else options && options.onLateError && options.onLateError(e);
                    }

                  });
                  handle = self.subscribe.apply(self, [name].concat(args));
                  f.wait();
                  return handle;
                }

                methods(methods) {
                  keys(methods).forEach(name => {
                    const func = methods[name];

                    if (typeof func !== 'function') {
                      throw new Error("Method '" + name + "' must be a function");
                    }

                    if (this._methodHandlers[name]) {
                      throw new Error("A method named '" + name + "' is already defined");
                    }

                    this._methodHandlers[name] = func;
                  });
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.call
                 * @summary Invokes a method passing any number of arguments.
                 * @locus Anywhere
                 * @param {String} name Name of method to invoke
                 * @param {EJSONable} [arg1,arg2...] Optional method arguments
                 * @param {Function} [asyncCallback] Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).
                 */

                call(name
                /* .. [arguments] .. callback */
                ) {
                  // if it's a function, the last argument is the result callback,
                  // not a parameter to the remote method.
                  var args = slice.call(arguments, 1);
                  if (args.length && typeof args[args.length - 1] === 'function') var callback = args.pop();
                  return this.apply(name, args, callback);
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.apply
                 * @summary Invoke a method passing an array of arguments.
                 * @locus Anywhere
                 * @param {String} name Name of method to invoke
                 * @param {EJSONable[]} args Method arguments
                 * @param {Object} [options]
                 * @param {Boolean} options.wait (Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.
                 * @param {Function} options.onResultReceived (Client only) This callback is invoked with the error or result of the method (just like `asyncCallback`) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.
                 * @param {Boolean} options.noRetry (Client only) if true, don't send this method again on reload, simply call the callback an error with the error code 'invocation-failed'.
                 * @param {Boolean} options.throwStubExceptions (Client only) If true, exceptions thrown by method stubs will be thrown instead of logged, and the method will not be invoked on the server.
                 * @param {Boolean} options.returnStubValue (Client only) If true then in cases where we would have otherwise discarded the stub's return value and returned undefined, instead we go ahead and return it. Specifically, this is any time other than when (a) we are already inside a stub or (b) we are in Node and no callback was provided. Currently we require this flag to be explicitly passed to reduce the likelihood that stub return values will be confused with server return values; we may improve this in future.
                 * @param {Function} [asyncCallback] Optional callback; same semantics as in [`Meteor.call`](#meteor_call).
                 */

                apply(name, args, options, callback) {
                  var self = this; // We were passed 3 arguments. They may be either (name, args, options)
                  // or (name, args, callback)

                  if (!callback && typeof options === 'function') {
                    callback = options;
                    options = Object.create(null);
                  }

                  options = options || Object.create(null);

                  if (callback) {
                    // XXX would it be better form to do the binding in stream.on,
                    // or caller, instead of here?
                    // XXX improve error message (and how we report it)
                    callback = Meteor.bindEnvironment(callback, "delivering result of invoking '" + name + "'");
                  } // Keep our args safe from mutation (eg if we don't send the message for a
                  // while because of a wait method).


                  args = EJSON.clone(args);

                  var enclosing = DDP._CurrentMethodInvocation.get();

                  var alreadyInSimulation = enclosing && enclosing.isSimulation; // Lazily generate a randomSeed, only if it is requested by the stub.
                  // The random streams only have utility if they're used on both the client
                  // and the server; if the client doesn't generate any 'random' values
                  // then we don't expect the server to generate any either.
                  // Less commonly, the server may perform different actions from the client,
                  // and may in fact generate values where the client did not, but we don't
                  // have any client-side values to match, so even here we may as well just
                  // use a random seed on the server.  In that case, we don't pass the
                  // randomSeed to save bandwidth, and we don't even generate it to save a
                  // bit of CPU and to avoid consuming entropy.

                  var randomSeed = null;

                  var randomSeedGenerator = () => {
                    if (randomSeed === null) {
                      randomSeed = DDPCommon.makeRpcSeed(enclosing, name);
                    }

                    return randomSeed;
                  }; // Run the stub, if we have one. The stub is supposed to make some
                  // temporary writes to the database to give the user a smooth experience
                  // until the actual result of executing the method comes back from the
                  // server (whereupon the temporary writes to the database will be reversed
                  // during the beginUpdate/endUpdate process.)
                  //
                  // Normally, we ignore the return value of the stub (even if it is an
                  // exception), in favor of the real return value from the server. The
                  // exception is if the *caller* is a stub. In that case, we're not going
                  // to do a RPC, so we use the return value of the stub as our return
                  // value.


                  var stub = self._methodHandlers[name];

                  if (stub) {
                    var setUserId = userId => {
                      self.setUserId(userId);
                    };

                    var invocation = new DDPCommon.MethodInvocation({
                      isSimulation: true,
                      userId: self.userId(),
                      setUserId: setUserId,

                      randomSeed() {
                        return randomSeedGenerator();
                      }

                    });
                    if (!alreadyInSimulation) self._saveOriginals();

                    try {
                      // Note that unlike in the corresponding server code, we never audit
                      // that stubs check() their arguments.
                      var stubReturnValue = DDP._CurrentMethodInvocation.withValue(invocation, () => {
                        if (Meteor.isServer) {
                          // Because saveOriginals and retrieveOriginals aren't reentrant,
                          // don't allow stubs to yield.
                          return Meteor._noYieldsAllowed(() => {
                            // re-clone, so that the stub can't affect our caller's values
                            return stub.apply(invocation, EJSON.clone(args));
                          });
                        } else {
                          return stub.apply(invocation, EJSON.clone(args));
                        }
                      });
                    } catch (e) {
                      var exception = e;
                    }
                  } // If we're in a simulation, stop and return the result we have,
                  // rather than going on to do an RPC. If there was no stub,
                  // we'll end up returning undefined.


                  if (alreadyInSimulation) {
                    if (callback) {
                      callback(exception, stubReturnValue);
                      return undefined;
                    }

                    if (exception) throw exception;
                    return stubReturnValue;
                  } // We only create the methodId here because we don't actually need one if
                  // we're already in a simulation


                  const methodId = '' + self._nextMethodId++;

                  if (stub) {
                    self._retrieveAndStoreOriginals(methodId);
                  } // Generate the DDP message for the method call. Note that on the client,
                  // it is important that the stub have finished before we send the RPC, so
                  // that we know we have a complete list of which local documents the stub
                  // wrote.


                  var message = {
                    msg: 'method',
                    method: name,
                    params: args,
                    id: methodId
                  }; // If an exception occurred in a stub, and we're ignoring it
                  // because we're doing an RPC and want to use what the server
                  // returns instead, log it so the developer knows
                  // (unless they explicitly ask to see the error).
                  //
                  // Tests can set the '_expectedByTest' flag on an exception so it won't
                  // go to log.

                  if (exception) {
                    if (options.throwStubExceptions) {
                      throw exception;
                    } else if (!exception._expectedByTest) {
                      Meteor._debug("Exception while simulating the effect of invoking '" + name + "'", exception);
                    }
                  } // At this point we're definitely doing an RPC, and we're going to
                  // return the value of the RPC to the caller.
                  // If the caller didn't give a callback, decide what to do.


                  if (!callback) {
                    if (Meteor.isClient) {
                      // On the client, we don't have fibers, so we can't block. The
                      // only thing we can do is to return undefined and discard the
                      // result of the RPC. If an error occurred then print the error
                      // to the console.
                      callback = err => {
                        err && Meteor._debug("Error invoking Method '" + name + "'", err);
                      };
                    } else {
                      // On the server, make the function synchronous. Throw on
                      // errors, return on success.
                      var future = new Future();
                      callback = future.resolver();
                    }
                  } // Send the randomSeed only if we used it


                  if (randomSeed !== null) {
                    message.randomSeed = randomSeed;
                  }

                  var methodInvoker = new MethodInvoker({
                    methodId,
                    callback: callback,
                    connection: self,
                    onResultReceived: options.onResultReceived,
                    wait: !!options.wait,
                    message: message,
                    noRetry: !!options.noRetry
                  });

                  if (options.wait) {
                    // It's a wait method! Wait methods go in their own block.
                    self._outstandingMethodBlocks.push({
                      wait: true,
                      methods: [methodInvoker]
                    });
                  } else {
                    // Not a wait method. Start a new block if the previous block was a wait
                    // block, and add it to the last block of methods.
                    if (isEmpty(self._outstandingMethodBlocks) || last(self._outstandingMethodBlocks).wait) {
                      self._outstandingMethodBlocks.push({
                        wait: false,
                        methods: []
                      });
                    }

                    last(self._outstandingMethodBlocks).methods.push(methodInvoker);
                  } // If we added it to the first block, send it out now.


                  if (self._outstandingMethodBlocks.length === 1) methodInvoker.sendMessage(); // If we're using the default callback on the server,
                  // block waiting for the result.

                  if (future) {
                    return future.wait();
                  }

                  return options.returnStubValue ? stubReturnValue : undefined;
                } // Before calling a method stub, prepare all stores to track changes and allow
                // _retrieveAndStoreOriginals to get the original versions of changed
                // documents.


                _saveOriginals() {
                  if (!this._waitingForQuiescence()) {
                    this._flushBufferedWrites();
                  }

                  keys(this._stores).forEach(storeName => {
                    this._stores[storeName].saveOriginals();
                  });
                } // Retrieves the original versions of all documents modified by the stub for
                // method 'methodId' from all stores and saves them to _serverDocuments (keyed
                // by document) and _documentsWrittenByStub (keyed by method ID).


                _retrieveAndStoreOriginals(methodId) {
                  var self = this;
                  if (self._documentsWrittenByStub[methodId]) throw new Error('Duplicate methodId in _retrieveAndStoreOriginals');
                  var docsWritten = [];
                  keys(self._stores).forEach(collection => {
                    var originals = self._stores[collection].retrieveOriginals(); // not all stores define retrieveOriginals


                    if (!originals) return;
                    originals.forEach((doc, id) => {
                      docsWritten.push({
                        collection,
                        id
                      });

                      if (!hasOwn.call(self._serverDocuments, collection)) {
                        self._serverDocuments[collection] = new MongoIDMap();
                      }

                      var serverDoc = self._serverDocuments[collection].setDefault(id, Object.create(null));

                      if (serverDoc.writtenByStubs) {
                        // We're not the first stub to write this doc. Just add our method ID
                        // to the record.
                        serverDoc.writtenByStubs[methodId] = true;
                      } else {
                        // First stub! Save the original value and our method ID.
                        serverDoc.document = doc;
                        serverDoc.flushCallbacks = [];
                        serverDoc.writtenByStubs = Object.create(null);
                        serverDoc.writtenByStubs[methodId] = true;
                      }
                    });
                  });

                  if (!isEmpty(docsWritten)) {
                    self._documentsWrittenByStub[methodId] = docsWritten;
                  }
                } // This is very much a private function we use to make the tests
                // take up fewer server resources after they complete.


                _unsubscribeAll() {
                  keys(this._subscriptions).forEach(id => {
                    const sub = this._subscriptions[id]; // Avoid killing the autoupdate subscription so that developers
                    // still get hot code pushes when writing tests.
                    //
                    // XXX it's a hack to encode knowledge about autoupdate here,
                    // but it doesn't seem worth it yet to have a special API for
                    // subscriptions to preserve after unit tests.

                    if (sub.name !== 'meteor_autoupdate_clientVersions') {
                      sub.stop();
                    }
                  });
                } // Sends the DDP stringification of the given message object


                _send(obj) {
                  this._stream.send(DDPCommon.stringifyDDP(obj));
                } // We detected via DDP-level heartbeats that we've lost the
                // connection.  Unlike `disconnect` or `close`, a lost connection
                // will be automatically retried.


                _lostConnection(error) {
                  this._stream._lostConnection(error);
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.status
                 * @summary Get the current connection status. A reactive data source.
                 * @locus Client
                 */

                status() {
                  return this._stream.status(...arguments);
                }
                /**
                 * @summary Force an immediate reconnection attempt if the client is not connected to the server.
                 This method does nothing if the client is already connected.
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.reconnect
                 * @locus Client
                 */

                reconnect() {
                  return this._stream.reconnect(...arguments);
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.disconnect
                 * @summary Disconnect the client from the server.
                 * @locus Client
                 */

                disconnect() {
                  return this._stream.disconnect(...arguments);
                }

                close() {
                  return this._stream.disconnect({
                    _permanent: true
                  });
                } ///
                /// Reactive user system
                ///


                userId() {
                  if (this._userIdDeps) this._userIdDeps.depend();
                  return this._userId;
                }

                setUserId(userId) {
                  // Avoid invalidating dependents if setUserId is called with current value.
                  if (this._userId === userId) return;
                  this._userId = userId;
                  if (this._userIdDeps) this._userIdDeps.changed();
                } // Returns true if we are in a state after reconnect of waiting for subs to be
                // revived or early methods to finish their data, or we are waiting for a
                // "wait" method to finish.


                _waitingForQuiescence() {
                  return !isEmpty(this._subsBeingRevived) || !isEmpty(this._methodsBlockingQuiescence);
                } // Returns true if any method whose message has been sent to the server has
                // not yet invoked its user callback.


                _anyMethodsAreOutstanding() {
                  const invokers = this._methodInvokers;
                  return keys(invokers).some(id => {
                    return invokers[id].sentMessage;
                  });
                }

                _livedata_connected(msg) {
                  var self = this;

                  if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {
                    self._heartbeat = new DDPCommon.Heartbeat({
                      heartbeatInterval: self._heartbeatInterval,
                      heartbeatTimeout: self._heartbeatTimeout,

                      onTimeout() {
                        self._lostConnection(new DDP.ConnectionError('DDP heartbeat timed out'));
                      },

                      sendPing() {
                        self._send({
                          msg: 'ping'
                        });
                      }

                    });

                    self._heartbeat.start();
                  } // If this is a reconnect, we'll have to reset all stores.


                  if (self._lastSessionId) self._resetStores = true;

                  if (typeof msg.session === 'string') {
                    var reconnectedToPreviousSession = self._lastSessionId === msg.session;
                    self._lastSessionId = msg.session;
                  }

                  if (reconnectedToPreviousSession) {
                    // Successful reconnection -- pick up where we left off.  Note that right
                    // now, this never happens: the server never connects us to a previous
                    // session, because DDP doesn't provide enough data for the server to know
                    // what messages the client has processed. We need to improve DDP to make
                    // this possible, at which point we'll probably need more code here.
                    return;
                  } // Server doesn't have our data any more. Re-sync a new session.
                  // Forget about messages we were buffering for unknown collections. They'll
                  // be resent if still relevant.


                  self._updatesForUnknownStores = Object.create(null);

                  if (self._resetStores) {
                    // Forget about the effects of stubs. We'll be resetting all collections
                    // anyway.
                    self._documentsWrittenByStub = Object.create(null);
                    self._serverDocuments = Object.create(null);
                  } // Clear _afterUpdateCallbacks.


                  self._afterUpdateCallbacks = []; // Mark all named subscriptions which are ready (ie, we already called the
                  // ready callback) as needing to be revived.
                  // XXX We should also block reconnect quiescence until unnamed subscriptions
                  //     (eg, autopublish) are done re-publishing to avoid flicker!

                  self._subsBeingRevived = Object.create(null);
                  keys(self._subscriptions).forEach(id => {
                    if (self._subscriptions[id].ready) {
                      self._subsBeingRevived[id] = true;
                    }
                  }); // Arrange for "half-finished" methods to have their callbacks run, and
                  // track methods that were sent on this connection so that we don't
                  // quiesce until they are all done.
                  //
                  // Start by clearing _methodsBlockingQuiescence: methods sent before
                  // reconnect don't matter, and any "wait" methods sent on the new connection
                  // that we drop here will be restored by the loop below.

                  self._methodsBlockingQuiescence = Object.create(null);

                  if (self._resetStores) {
                    const invokers = self._methodInvokers;
                    keys(invokers).forEach(id => {
                      const invoker = invokers[id];

                      if (invoker.gotResult()) {
                        // This method already got its result, but it didn't call its callback
                        // because its data didn't become visible. We did not resend the
                        // method RPC. We'll call its callback when we get a full quiesce,
                        // since that's as close as we'll get to "data must be visible".
                        self._afterUpdateCallbacks.push(function () {
                          return invoker.dataVisible(...arguments);
                        });
                      } else if (invoker.sentMessage) {
                        // This method has been sent on this connection (maybe as a resend
                        // from the last connection, maybe from onReconnect, maybe just very
                        // quickly before processing the connected message).
                        //
                        // We don't need to do anything special to ensure its callbacks get
                        // called, but we'll count it as a method which is preventing
                        // reconnect quiescence. (eg, it might be a login method that was run
                        // from onReconnect, and we don't want to see flicker by seeing a
                        // logged-out state.)
                        self._methodsBlockingQuiescence[invoker.methodId] = true;
                      }
                    });
                  }

                  self._messagesBufferedUntilQuiescence = []; // If we're not waiting on any methods or subs, we can reset the stores and
                  // call the callbacks immediately.

                  if (!self._waitingForQuiescence()) {
                    if (self._resetStores) {
                      keys(self._stores).forEach(storeName => {
                        const s = self._stores[storeName];
                        s.beginUpdate(0, true);
                        s.endUpdate();
                      });
                      self._resetStores = false;
                    }

                    self._runAfterUpdateCallbacks();
                  }
                }

                _processOneDataMessage(msg, updates) {
                  const messageType = msg.msg; // msg is one of ['added', 'changed', 'removed', 'ready', 'updated']

                  if (messageType === 'added') {
                    this._process_added(msg, updates);
                  } else if (messageType === 'changed') {
                    this._process_changed(msg, updates);
                  } else if (messageType === 'removed') {
                    this._process_removed(msg, updates);
                  } else if (messageType === 'ready') {
                    this._process_ready(msg, updates);
                  } else if (messageType === 'updated') {
                    this._process_updated(msg, updates);
                  } else if (messageType === 'nosub') {// ignore this
                  } else {
                    Meteor._debug('discarding unknown livedata data message type', msg);
                  }
                }

                _livedata_data(msg) {
                  var self = this;

                  if (self._waitingForQuiescence()) {
                    self._messagesBufferedUntilQuiescence.push(msg);

                    if (msg.msg === 'nosub') {
                      delete self._subsBeingRevived[msg.id];
                    }

                    if (msg.subs) {
                      msg.subs.forEach(subId => {
                        delete self._subsBeingRevived[subId];
                      });
                    }

                    if (msg.methods) {
                      msg.methods.forEach(methodId => {
                        delete self._methodsBlockingQuiescence[methodId];
                      });
                    }

                    if (self._waitingForQuiescence()) {
                      return;
                    } // No methods or subs are blocking quiescence!
                    // We'll now process and all of our buffered messages, reset all stores,
                    // and apply them all at once.


                    const bufferedMessages = self._messagesBufferedUntilQuiescence;
                    keys(bufferedMessages).forEach(id => {
                      self._processOneDataMessage(bufferedMessages[id], self._bufferedWrites);
                    });
                    self._messagesBufferedUntilQuiescence = [];
                  } else {
                    self._processOneDataMessage(msg, self._bufferedWrites);
                  } // Immediately flush writes when:
                  //  1. Buffering is disabled. Or;
                  //  2. any non-(added/changed/removed) message arrives.


                  var standardWrite = msg.msg === "added" || msg.msg === "changed" || msg.msg === "removed";

                  if (self._bufferedWritesInterval === 0 || !standardWrite) {
                    self._flushBufferedWrites();

                    return;
                  }

                  if (self._bufferedWritesFlushAt === null) {
                    self._bufferedWritesFlushAt = new Date().valueOf() + self._bufferedWritesMaxAge;
                  } else if (self._bufferedWritesFlushAt < new Date().valueOf()) {
                    self._flushBufferedWrites();

                    return;
                  }

                  if (self._bufferedWritesFlushHandle) {
                    clearTimeout(self._bufferedWritesFlushHandle);
                  }

                  self._bufferedWritesFlushHandle = setTimeout(self.__flushBufferedWrites, self._bufferedWritesInterval);
                }

                _flushBufferedWrites() {
                  var self = this;

                  if (self._bufferedWritesFlushHandle) {
                    clearTimeout(self._bufferedWritesFlushHandle);
                    self._bufferedWritesFlushHandle = null;
                  }

                  self._bufferedWritesFlushAt = null; // We need to clear the buffer before passing it to
                  //  performWrites. As there's no guarantee that it
                  //  will exit cleanly.

                  var writes = self._bufferedWrites;
                  self._bufferedWrites = Object.create(null);

                  self._performWrites(writes);
                }

                _performWrites(updates) {
                  var self = this;

                  if (self._resetStores || !isEmpty(updates)) {
                    // Begin a transactional update of each store.
                    keys(self._stores).forEach(storeName => {
                      self._stores[storeName].beginUpdate(hasOwn.call(updates, storeName) ? updates[storeName].length : 0, self._resetStores);
                    });
                    self._resetStores = false;
                    keys(updates).forEach(storeName => {
                      const updateMessages = updates[storeName];
                      var store = self._stores[storeName];

                      if (store) {
                        updateMessages.forEach(updateMessage => {
                          store.update(updateMessage);
                        });
                      } else {
                        // Nobody's listening for this data. Queue it up until
                        // someone wants it.
                        // XXX memory use will grow without bound if you forget to
                        // create a collection or just don't care about it... going
                        // to have to do something about that.
                        const updates = self._updatesForUnknownStores;

                        if (!hasOwn.call(updates, storeName)) {
                          updates[storeName] = [];
                        }

                        updates[storeName].push(...updateMessages);
                      }
                    }); // End update transaction.

                    keys(self._stores).forEach(storeName => {
                      self._stores[storeName].endUpdate();
                    });
                  }

                  self._runAfterUpdateCallbacks();
                } // Call any callbacks deferred with _runWhenAllServerDocsAreFlushed whose
                // relevant docs have been flushed, as well as dataVisible callbacks at
                // reconnect-quiescence time.


                _runAfterUpdateCallbacks() {
                  var self = this;
                  var callbacks = self._afterUpdateCallbacks;
                  self._afterUpdateCallbacks = [];
                  callbacks.forEach(c => {
                    c();
                  });
                }

                _pushUpdate(updates, collection, msg) {
                  if (!hasOwn.call(updates, collection)) {
                    updates[collection] = [];
                  }

                  updates[collection].push(msg);
                }

                _getServerDoc(collection, id) {
                  var self = this;

                  if (!hasOwn.call(self._serverDocuments, collection)) {
                    return null;
                  }

                  var serverDocsForCollection = self._serverDocuments[collection];
                  return serverDocsForCollection.get(id) || null;
                }

                _process_added(msg, updates) {
                  var self = this;
                  var id = MongoID.idParse(msg.id);

                  var serverDoc = self._getServerDoc(msg.collection, id);

                  if (serverDoc) {
                    // Some outstanding stub wrote here.
                    var isExisting = serverDoc.document !== undefined;
                    serverDoc.document = msg.fields || Object.create(null);
                    serverDoc.document._id = id;

                    if (self._resetStores) {
                      // During reconnect the server is sending adds for existing ids.
                      // Always push an update so that document stays in the store after
                      // reset. Use current version of the document for this update, so
                      // that stub-written values are preserved.
                      var currentDoc = self._stores[msg.collection].getDoc(msg.id);

                      if (currentDoc !== undefined) msg.fields = currentDoc;

                      self._pushUpdate(updates, msg.collection, msg);
                    } else if (isExisting) {
                      throw new Error('Server sent add for existing id: ' + msg.id);
                    }
                  } else {
                    self._pushUpdate(updates, msg.collection, msg);
                  }
                }

                _process_changed(msg, updates) {
                  var self = this;

                  var serverDoc = self._getServerDoc(msg.collection, MongoID.idParse(msg.id));

                  if (serverDoc) {
                    if (serverDoc.document === undefined) throw new Error('Server sent changed for nonexisting id: ' + msg.id);
                    DiffSequence.applyChanges(serverDoc.document, msg.fields);
                  } else {
                    self._pushUpdate(updates, msg.collection, msg);
                  }
                }

                _process_removed(msg, updates) {
                  var self = this;

                  var serverDoc = self._getServerDoc(msg.collection, MongoID.idParse(msg.id));

                  if (serverDoc) {
                    // Some outstanding stub wrote here.
                    if (serverDoc.document === undefined) throw new Error('Server sent removed for nonexisting id:' + msg.id);
                    serverDoc.document = undefined;
                  } else {
                    self._pushUpdate(updates, msg.collection, {
                      msg: 'removed',
                      collection: msg.collection,
                      id: msg.id
                    });
                  }
                }

                _process_updated(msg, updates) {
                  var self = this; // Process "method done" messages.

                  msg.methods.forEach(methodId => {
                    const docs = self._documentsWrittenByStub[methodId];
                    keys(docs).forEach(id => {
                      const written = docs[id];

                      const serverDoc = self._getServerDoc(written.collection, written.id);

                      if (!serverDoc) {
                        throw new Error('Lost serverDoc for ' + JSON.stringify(written));
                      }

                      if (!serverDoc.writtenByStubs[methodId]) {
                        throw new Error('Doc ' + JSON.stringify(written) + ' not written by  method ' + methodId);
                      }

                      delete serverDoc.writtenByStubs[methodId];

                      if (isEmpty(serverDoc.writtenByStubs)) {
                        // All methods whose stubs wrote this method have completed! We can
                        // now copy the saved document to the database (reverting the stub's
                        // change if the server did not write to this object, or applying the
                        // server's writes if it did).
                        // This is a fake ddp 'replace' message.  It's just for talking
                        // between livedata connections and minimongo.  (We have to stringify
                        // the ID because it's supposed to look like a wire message.)
                        self._pushUpdate(updates, written.collection, {
                          msg: 'replace',
                          id: MongoID.idStringify(written.id),
                          replace: serverDoc.document
                        }); // Call all flush callbacks.


                        serverDoc.flushCallbacks.forEach(c => {
                          c();
                        }); // Delete this completed serverDocument. Don't bother to GC empty
                        // IdMaps inside self._serverDocuments, since there probably aren't
                        // many collections and they'll be written repeatedly.

                        self._serverDocuments[written.collection].remove(written.id);
                      }
                    });
                    delete self._documentsWrittenByStub[methodId]; // We want to call the data-written callback, but we can't do so until all
                    // currently buffered messages are flushed.

                    const callbackInvoker = self._methodInvokers[methodId];

                    if (!callbackInvoker) {
                      throw new Error('No callback invoker for method ' + methodId);
                    }

                    self._runWhenAllServerDocsAreFlushed(function () {
                      return callbackInvoker.dataVisible(...arguments);
                    });
                  });
                }

                _process_ready(msg, updates) {
                  var self = this; // Process "sub ready" messages. "sub ready" messages don't take effect
                  // until all current server documents have been flushed to the local
                  // database. We can use a write fence to implement this.

                  msg.subs.forEach(subId => {
                    self._runWhenAllServerDocsAreFlushed(() => {
                      var subRecord = self._subscriptions[subId]; // Did we already unsubscribe?

                      if (!subRecord) return; // Did we already receive a ready message? (Oops!)

                      if (subRecord.ready) return;
                      subRecord.ready = true;
                      subRecord.readyCallback && subRecord.readyCallback();
                      subRecord.readyDeps.changed();
                    });
                  });
                } // Ensures that "f" will be called after all documents currently in
                // _serverDocuments have been written to the local cache. f will not be called
                // if the connection is lost before then!


                _runWhenAllServerDocsAreFlushed(f) {
                  var self = this;

                  var runFAfterUpdates = () => {
                    self._afterUpdateCallbacks.push(f);
                  };

                  var unflushedServerDocCount = 0;

                  var onServerDocFlush = () => {
                    --unflushedServerDocCount;

                    if (unflushedServerDocCount === 0) {
                      // This was the last doc to flush! Arrange to run f after the updates
                      // have been applied.
                      runFAfterUpdates();
                    }
                  };

                  keys(self._serverDocuments).forEach(collection => {
                    self._serverDocuments[collection].forEach(serverDoc => {
                      const writtenByStubForAMethodWithSentMessage = keys(serverDoc.writtenByStubs).some(methodId => {
                        var invoker = self._methodInvokers[methodId];
                        return invoker && invoker.sentMessage;
                      });

                      if (writtenByStubForAMethodWithSentMessage) {
                        ++unflushedServerDocCount;
                        serverDoc.flushCallbacks.push(onServerDocFlush);
                      }
                    });
                  });

                  if (unflushedServerDocCount === 0) {
                    // There aren't any buffered docs --- we can call f as soon as the current
                    // round of updates is applied!
                    runFAfterUpdates();
                  }
                }

                _livedata_nosub(msg) {
                  var self = this; // First pass it through _livedata_data, which only uses it to help get
                  // towards quiescence.

                  self._livedata_data(msg); // Do the rest of our processing immediately, with no
                  // buffering-until-quiescence.
                  // we weren't subbed anyway, or we initiated the unsub.


                  if (!hasOwn.call(self._subscriptions, msg.id)) {
                    return;
                  } // XXX COMPAT WITH 1.0.3.1 #errorCallback


                  var errorCallback = self._subscriptions[msg.id].errorCallback;
                  var stopCallback = self._subscriptions[msg.id].stopCallback;

                  self._subscriptions[msg.id].remove();

                  var meteorErrorFromMsg = msgArg => {
                    return msgArg && msgArg.error && new Meteor.Error(msgArg.error.error, msgArg.error.reason, msgArg.error.details);
                  }; // XXX COMPAT WITH 1.0.3.1 #errorCallback


                  if (errorCallback && msg.error) {
                    errorCallback(meteorErrorFromMsg(msg));
                  }

                  if (stopCallback) {
                    stopCallback(meteorErrorFromMsg(msg));
                  }
                }

                _livedata_result(msg) {
                  // id, result or error. error has error (code), reason, details
                  var self = this; // Lets make sure there are no buffered writes before returning result.

                  if (!isEmpty(self._bufferedWrites)) {
                    self._flushBufferedWrites();
                  } // find the outstanding request
                  // should be O(1) in nearly all realistic use cases


                  if (isEmpty(self._outstandingMethodBlocks)) {
                    Meteor._debug('Received method result but no methods outstanding');

                    return;
                  }

                  var currentMethodBlock = self._outstandingMethodBlocks[0].methods;
                  var m;

                  for (var i = 0; i < currentMethodBlock.length; i++) {
                    m = currentMethodBlock[i];
                    if (m.methodId === msg.id) break;
                  }

                  if (!m) {
                    Meteor._debug("Can't match method response to original method call", msg);

                    return;
                  } // Remove from current method block. This may leave the block empty, but we
                  // don't move on to the next block until the callback has been delivered, in
                  // _outstandingMethodFinished.


                  currentMethodBlock.splice(i, 1);

                  if (hasOwn.call(msg, 'error')) {
                    m.receiveResult(new Meteor.Error(msg.error.error, msg.error.reason, msg.error.details));
                  } else {
                    // msg.result may be undefined if the method didn't return a
                    // value
                    m.receiveResult(undefined, msg.result);
                  }
                } // Called by MethodInvoker after a method's callback is invoked.  If this was
                // the last outstanding method in the current block, runs the next block. If
                // there are no more methods, consider accepting a hot code push.


                _outstandingMethodFinished() {
                  var self = this;
                  if (self._anyMethodsAreOutstanding()) return; // No methods are outstanding. This should mean that the first block of
                  // methods is empty. (Or it might not exist, if this was a method that
                  // half-finished before disconnect/reconnect.)

                  if (!isEmpty(self._outstandingMethodBlocks)) {
                    var firstBlock = self._outstandingMethodBlocks.shift();

                    if (!isEmpty(firstBlock.methods)) throw new Error('No methods outstanding but nonempty block: ' + JSON.stringify(firstBlock)); // Send the outstanding methods now in the first block.

                    if (!isEmpty(self._outstandingMethodBlocks)) self._sendOutstandingMethods();
                  } // Maybe accept a hot code push.


                  self._maybeMigrate();
                } // Sends messages for all the methods in the first block in
                // _outstandingMethodBlocks.


                _sendOutstandingMethods() {
                  var self = this;

                  if (isEmpty(self._outstandingMethodBlocks)) {
                    return;
                  }

                  self._outstandingMethodBlocks[0].methods.forEach(m => {
                    m.sendMessage();
                  });
                }

                _livedata_error(msg) {
                  Meteor._debug('Received error from server: ', msg.reason);

                  if (msg.offendingMessage) Meteor._debug('For: ', msg.offendingMessage);
                }

                _callOnReconnectAndSendAppropriateOutstandingMethods() {
                  var self = this;
                  var oldOutstandingMethodBlocks = self._outstandingMethodBlocks;
                  self._outstandingMethodBlocks = [];
                  self.onReconnect && self.onReconnect();

                  DDP._reconnectHook.each(callback => {
                    callback(self);
                    return true;
                  });

                  if (isEmpty(oldOutstandingMethodBlocks)) return; // We have at least one block worth of old outstanding methods to try
                  // again. First: did onReconnect actually send anything? If not, we just
                  // restore all outstanding methods and run the first block.

                  if (isEmpty(self._outstandingMethodBlocks)) {
                    self._outstandingMethodBlocks = oldOutstandingMethodBlocks;

                    self._sendOutstandingMethods();

                    return;
                  } // OK, there are blocks on both sides. Special case: merge the last block of
                  // the reconnect methods with the first block of the original methods, if
                  // neither of them are "wait" blocks.


                  if (!last(self._outstandingMethodBlocks).wait && !oldOutstandingMethodBlocks[0].wait) {
                    oldOutstandingMethodBlocks[0].methods.forEach(m => {
                      last(self._outstandingMethodBlocks).methods.push(m); // If this "last block" is also the first block, send the message.

                      if (self._outstandingMethodBlocks.length === 1) {
                        m.sendMessage();
                      }
                    });
                    oldOutstandingMethodBlocks.shift();
                  } // Now add the rest of the original blocks on.


                  oldOutstandingMethodBlocks.forEach(block => {
                    self._outstandingMethodBlocks.push(block);
                  });
                } // We can accept a hot code push if there are no methods in flight.


                _readyToMigrate() {
                  return isEmpty(this._methodInvokers);
                } // If we were blocking a migration, see if it's now possible to continue.
                // Call whenever the set of outstanding/blocked methods shrinks.


                _maybeMigrate() {
                  var self = this;

                  if (self._retryMigrate && self._readyToMigrate()) {
                    self._retryMigrate();

                    self._retryMigrate = null;
                  }
                }

                onMessage(raw_msg) {
                  try {
                    var msg = DDPCommon.parseDDP(raw_msg);
                  } catch (e) {
                    Meteor._debug('Exception while parsing DDP', e);

                    return;
                  } // Any message counts as receiving a pong, as it demonstrates that
                  // the server is still alive.


                  if (this._heartbeat) {
                    this._heartbeat.messageReceived();
                  }

                  if (msg === null || !msg.msg) {
                    // XXX COMPAT WITH 0.6.6. ignore the old welcome message for back
                    // compat.  Remove this 'if' once the server stops sending welcome
                    // messages (stream_server.js).
                    if (!(msg && msg.server_id)) Meteor._debug('discarding invalid livedata message', msg);
                    return;
                  }

                  if (msg.msg === 'connected') {
                    this._version = this._versionSuggestion;

                    this._livedata_connected(msg);

                    this.options.onConnected();
                  } else if (msg.msg === 'failed') {
                    if (this._supportedDDPVersions.indexOf(msg.version) >= 0) {
                      this._versionSuggestion = msg.version;

                      this._stream.reconnect({
                        _force: true
                      });
                    } else {
                      var description = 'DDP version negotiation failed; server requested version ' + msg.version;

                      this._stream.disconnect({
                        _permanent: true,
                        _error: description
                      });

                      this.options.onDDPVersionNegotiationFailure(description);
                    }
                  } else if (msg.msg === 'ping' && this.options.respondToPings) {
                    this._send({
                      msg: 'pong',
                      id: msg.id
                    });
                  } else if (msg.msg === 'pong') {// noop, as we assume everything's a pong
                  } else if (['added', 'changed', 'removed', 'ready', 'updated'].includes(msg.msg)) {
                    this._livedata_data(msg);
                  } else if (msg.msg === 'nosub') {
                    this._livedata_nosub(msg);
                  } else if (msg.msg === 'result') {
                    this._livedata_result(msg);
                  } else if (msg.msg === 'error') {
                    this._livedata_error(msg);
                  } else {
                    Meteor._debug('discarding unknown livedata message type', msg);
                  }
                }

                onReset() {
                  // Send a connect message at the beginning of the stream.
                  // NOTE: reset is called even on the first connection, so this is
                  // the only place we send this message.
                  var msg = {
                    msg: 'connect'
                  };
                  if (this._lastSessionId) msg.session = this._lastSessionId;
                  msg.version = this._versionSuggestion || this._supportedDDPVersions[0];
                  this._versionSuggestion = msg.version;
                  msg.support = this._supportedDDPVersions;

                  this._send(msg); // Mark non-retry calls as failed. This has to be done early as getting these methods out of the
                  // current block is pretty important to making sure that quiescence is properly calculated, as
                  // well as possibly moving on to another useful block.
                  // Only bother testing if there is an outstandingMethodBlock (there might not be, especially if
                  // we are connecting for the first time.


                  if (this._outstandingMethodBlocks.length > 0) {
                    // If there is an outstanding method block, we only care about the first one as that is the
                    // one that could have already sent messages with no response, that are not allowed to retry.
                    const currentMethodBlock = this._outstandingMethodBlocks[0].methods;
                    this._outstandingMethodBlocks[0].methods = currentMethodBlock.filter(methodInvoker => {
                      // Methods with 'noRetry' option set are not allowed to re-send after
                      // recovering dropped connection.
                      if (methodInvoker.sentMessage && methodInvoker.noRetry) {
                        // Make sure that the method is told that it failed.
                        methodInvoker.receiveResult(new Meteor.Error('invocation-failed', 'Method invocation might have failed due to dropped connection. ' + 'Failing because `noRetry` option was passed to Meteor.apply.'));
                      } // Only keep a method if it wasn't sent or it's allowed to retry.
                      // This may leave the block empty, but we don't move on to the next
                      // block until the callback has been delivered, in _outstandingMethodFinished.


                      return !(methodInvoker.sentMessage && methodInvoker.noRetry);
                    });
                  } // Now, to minimize setup latency, go ahead and blast out all of
                  // our pending methods ands subscriptions before we've even taken
                  // the necessary RTT to know if we successfully reconnected. (1)
                  // They're supposed to be idempotent, and where they are not,
                  // they can block retry in apply; (2) even if we did reconnect,
                  // we're not sure what messages might have gotten lost
                  // (in either direction) since we were disconnected (TCP being
                  // sloppy about that.)
                  // If the current block of methods all got their results (but didn't all get
                  // their data visible), discard the empty block now.


                  if (this._outstandingMethodBlocks.length > 0 && this._outstandingMethodBlocks[0].methods.length === 0) {
                    this._outstandingMethodBlocks.shift();
                  } // Mark all messages as unsent, they have not yet been sent on this
                  // connection.


                  keys(this._methodInvokers).forEach(id => {
                    this._methodInvokers[id].sentMessage = false;
                  }); // If an `onReconnect` handler is set, call it first. Go through
                  // some hoops to ensure that methods that are called from within
                  // `onReconnect` get executed _before_ ones that were originally
                  // outstanding (since `onReconnect` is used to re-establish auth
                  // certificates)

                  this._callOnReconnectAndSendAppropriateOutstandingMethods(); // add new subscriptions at the end. this way they take effect after
                  // the handlers and we don't see flicker.


                  keys(this._subscriptions).forEach(id => {
                    const sub = this._subscriptions[id];

                    this._send({
                      msg: 'sub',
                      id: id,
                      name: sub.name,
                      params: sub.params
                    });
                  });
                }

              }
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "namespace.js": function module(_require6, _exports6, _module5) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/common/namespace.js                                                                             //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module5.export({
                DDP: () => DDP
              });
              let DDPCommon;
              _module5.link("meteor/ddp-common", {
                DDPCommon(v) {
                  DDPCommon = v;
                }

              }, 0);
              let Meteor;
              _module5.link("meteor/meteor", {
                Meteor(v) {
                  Meteor = v;
                }

              }, 1);
              let keys;
              _module5.link("meteor/ddp-common/utils.js", {
                keys(v) {
                  keys = v;
                }

              }, 2);
              let Connection;
              _module5.link("./livedata_connection.js", {
                Connection(v) {
                  Connection = v;
                }

              }, 3);
              // This array allows the `_allSubscriptionsReady` method below, which
              // is used by the `spiderable` package, to keep track of whether all
              // data is ready.
              const allConnections = [];
              /**
               * @namespace DDP
               * @summary Namespace for DDP-related methods/classes.
               */

              const DDP = {};
              // This is private but it's used in a few places. accounts-base uses
              // it to get the current user. Meteor.setTimeout and friends clear
              // it. We can probably find a better way to factor this.
              DDP._CurrentMethodInvocation = new Meteor.EnvironmentVariable();
              DDP._CurrentPublicationInvocation = new Meteor.EnvironmentVariable(); // XXX: Keep DDP._CurrentInvocation for backwards-compatibility.

              DDP._CurrentInvocation = DDP._CurrentMethodInvocation; // This is passed into a weird `makeErrorType` function that expects its thing
              // to be a constructor

              function connectionErrorConstructor(message) {
                this.message = message;
              }

              DDP.ConnectionError = Meteor.makeErrorType('DDP.ConnectionError', connectionErrorConstructor);
              DDP.ForcedReconnectError = Meteor.makeErrorType('DDP.ForcedReconnectError', () => {}); // Returns the named sequence of pseudo-random values.
              // The scope will be DDP._CurrentMethodInvocation.get(), so the stream will produce
              // consistent values for method calls on the client and server.

              DDP.randomStream = name => {
                var scope = DDP._CurrentMethodInvocation.get();

                return DDPCommon.RandomStream.get(scope, name);
              }; // @param url {String} URL to Meteor app,
              //     e.g.:
              //     "subdomain.meteor.com",
              //     "http://subdomain.meteor.com",
              //     "/",
              //     "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"

              /**
               * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.
               * @locus Anywhere
               * @param {String} url The URL of another Meteor application.
               */

              DDP.connect = (url, options) => {
                var ret = new Connection(url, options);
                allConnections.push(ret); // hack. see below.

                return ret;
              };

              DDP._reconnectHook = new Hook({
                bindEnvironment: false
              });
              /**
               * @summary Register a function to call as the first step of
               * reconnecting. This function can call methods which will be executed before
               * any other outstanding methods. For example, this can be used to re-establish
               * the appropriate authentication context on the connection.
               * @locus Anywhere
               * @param {Function} callback The function to call. It will be called with a
               * single argument, the [connection object](#ddp_connect) that is reconnecting.
               */

              DDP.onReconnect = callback => {
                return DDP._reconnectHook.register(callback);
              }; // Hack for `spiderable` package: a way to see if the page is done
              // loading all the data it needs.
              //


              DDP._allSubscriptionsReady = () => {
                return allConnections.every(conn => {
                  return keys(conn._subscriptions).every(id => {
                    return conn._subscriptions[id].ready;
                  });
                });
              };
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/ddp-client/client/client.js");

  /* Exports */
  Package._define("ddp-client", _exports2, {
    DDP: DDP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var DDP = Package['ddp-client'].DDP;

  /* Exports */
  Package._define("ddp", {
    DDP: DDP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ddp-server");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var EJSON = Package.ejson.EJSON;
  var DDP = Package['ddp-client'].DDP;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var AllowDeny;

  var _require = meteorInstall({ "node_modules": { "meteor": { "allow-deny": { "allow-deny.js": function _module() {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/allow-deny/allow-deny.js                                                                                  //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            ///
            /// Remote methods and access control.
            ///
            const hasOwn = Object.prototype.hasOwnProperty; // Restrict default mutators on collection. allow() and deny() take the
            // same options:
            //
            // options.insert {Function(userId, doc)}
            //   return true to allow/deny adding this document
            //
            // options.update {Function(userId, docs, fields, modifier)}
            //   return true to allow/deny updating these documents.
            //   `fields` is passed as an array of fields that are to be modified
            //
            // options.remove {Function(userId, docs)}
            //   return true to allow/deny removing these documents
            //
            // options.fetch {Array}
            //   Fields to fetch for these validators. If any call to allow or deny
            //   does not have this option then all fields are loaded.
            //
            // allow and deny can be called multiple times. The validators are
            // evaluated as follows:
            // - If neither deny() nor allow() has been called on the collection,
            //   then the request is allowed if and only if the "insecure" smart
            //   package is in use.
            // - Otherwise, if any deny() function returns true, the request is denied.
            // - Otherwise, if any allow() function returns true, the request is allowed.
            // - Otherwise, the request is denied.
            //
            // Meteor may call your deny() and allow() functions in any order, and may not
            // call all of them if it is able to make a decision without calling them all
            // (so don't include side effects).

            AllowDeny = {
              CollectionPrototype: {}
            }; // In the `mongo` package, we will extend Mongo.Collection.prototype with these
            // methods

            const CollectionPrototype = AllowDeny.CollectionPrototype;
            /**
             * @summary Allow users to write directly to this collection from client code, subject to limitations you define.
             * @locus Server
             * @method allow
             * @memberOf Mongo.Collection
             * @instance
             * @param {Object} options
             * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be allowed.
             * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
             * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
             */

            CollectionPrototype.allow = function (options) {
              addValidator(this, 'allow', options);
            };
            /**
             * @summary Override `allow` rules.
             * @locus Server
             * @method deny
             * @memberOf Mongo.Collection
             * @instance
             * @param {Object} options
             * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be denied, even if an [allow](#allow) rule says otherwise.
             * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
             * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
             */

            CollectionPrototype.deny = function (options) {
              addValidator(this, 'deny', options);
            };

            CollectionPrototype._defineMutationMethods = function (options) {
              const self = this;
              options = options || {}; // set to true once we call any allow or deny methods. If true, use
              // allow/deny semantics. If false, use insecure mode semantics.

              self._restricted = false; // Insecure mode (default to allowing writes). Defaults to 'undefined' which
              // means insecure iff the insecure package is loaded. This property can be
              // overriden by tests or packages wishing to change insecure mode behavior of
              // their collections.

              self._insecure = undefined;
              self._validators = {
                insert: {
                  allow: [],
                  deny: []
                },
                update: {
                  allow: [],
                  deny: []
                },
                remove: {
                  allow: [],
                  deny: []
                },
                upsert: {
                  allow: [],
                  deny: []
                },
                // dummy arrays; can't set these!
                fetch: [],
                fetchAllFields: false
              };
              if (!self._name) return; // anonymous collection
              // XXX Think about method namespacing. Maybe methods should be
              // "Meteor:Mongo:insert/NAME"?

              self._prefix = '/' + self._name + '/'; // Mutation Methods
              // Minimongo on the server gets no stubs; instead, by default
              // it wait()s until its result is ready, yielding.
              // This matches the behavior of macromongo on the server better.
              // XXX see #MeteorServerNull

              if (self._connection && (self._connection === Meteor.server || Meteor.isClient)) {
                const m = {};
                ['insert', 'update', 'remove'].forEach(method => {
                  const methodName = self._prefix + method;

                  if (options.useExisting) {
                    const handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers'; // Do not try to create additional methods if this has already been called.
                    // (Otherwise the .methods() call below will throw an error.)

                    if (self._connection[handlerPropName] && typeof self._connection[handlerPropName][methodName] === 'function') return;
                  }

                  m[methodName] = function ()
                  /* ... */
                  {
                    // All the methods do their own validation, instead of using check().
                    check(arguments, [Match.Any]);
                    const args = Array.from(arguments);

                    try {
                      // For an insert, if the client didn't specify an _id, generate one
                      // now; because this uses DDP.randomStream, it will be consistent with
                      // what the client generated. We generate it now rather than later so
                      // that if (eg) an allow/deny rule does an insert to the same
                      // collection (not that it really should), the generated _id will
                      // still be the first use of the stream and will be consistent.
                      //
                      // However, we don't actually stick the _id onto the document yet,
                      // because we want allow/deny rules to be able to differentiate
                      // between arbitrary client-specified _id fields and merely
                      // client-controlled-via-randomSeed fields.
                      let generatedId = null;

                      if (method === "insert" && !hasOwn.call(args[0], '_id')) {
                        generatedId = self._makeNewID();
                      }

                      if (this.isSimulation) {
                        // In a client simulation, you can do any mutation (even with a
                        // complex selector).
                        if (generatedId !== null) args[0]._id = generatedId;
                        return self._collection[method].apply(self._collection, args);
                      } // This is the server receiving a method call from the client.
                      // We don't allow arbitrary selectors in mutations from the client: only
                      // single-ID selectors.


                      if (method !== 'insert') throwIfSelectorIsNotId(args[0], method);

                      if (self._restricted) {
                        // short circuit if there is no way it will pass.
                        if (self._validators[method].allow.length === 0) {
                          throw new Meteor.Error(403, "Access denied. No allow validators set on restricted " + "collection for method '" + method + "'.");
                        }

                        const validatedMethodName = '_validated' + method.charAt(0).toUpperCase() + method.slice(1);
                        args.unshift(this.userId);
                        method === 'insert' && args.push(generatedId);
                        return self[validatedMethodName].apply(self, args);
                      } else if (self._isInsecure()) {
                        if (generatedId !== null) args[0]._id = generatedId; // In insecure mode, allow any mutation (with a simple selector).
                        // XXX This is kind of bogus.  Instead of blindly passing whatever
                        //     we get from the network to this function, we should actually
                        //     know the correct arguments for the function and pass just
                        //     them.  For example, if you have an extraneous extra null
                        //     argument and this is Mongo on the server, the .wrapAsync'd
                        //     functions like update will get confused and pass the
                        //     "fut.resolver()" in the wrong slot, where _update will never
                        //     invoke it. Bam, broken DDP connection.  Probably should just
                        //     take this whole method and write it three times, invoking
                        //     helpers for the common code.

                        return self._collection[method].apply(self._collection, args);
                      } else {
                        // In secure mode, if we haven't called allow or deny, then nothing
                        // is permitted.
                        throw new Meteor.Error(403, "Access denied");
                      }
                    } catch (e) {
                      if (e.name === 'MongoError' || e.name === 'MinimongoError') {
                        throw new Meteor.Error(409, e.toString());
                      } else {
                        throw e;
                      }
                    }
                  };
                });

                self._connection.methods(m);
              }
            };

            CollectionPrototype._updateFetch = function (fields) {
              const self = this;

              if (!self._validators.fetchAllFields) {
                if (fields) {
                  const union = Object.create(null);

                  const add = names => names && names.forEach(name => union[name] = 1);

                  add(self._validators.fetch);
                  add(fields);
                  self._validators.fetch = Object.keys(union);
                } else {
                  self._validators.fetchAllFields = true; // clear fetch just to make sure we don't accidentally read it

                  self._validators.fetch = null;
                }
              }
            };

            CollectionPrototype._isInsecure = function () {
              const self = this;
              if (self._insecure === undefined) return !!Package.insecure;
              return self._insecure;
            };

            CollectionPrototype._validatedInsert = function (userId, doc, generatedId) {
              const self = this; // call user validators.
              // Any deny returns true means denied.

              if (self._validators.insert.deny.some(validator => {
                return validator(userId, docToValidate(validator, doc, generatedId));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Any allow returns true means proceed. Throw error if they all fail.


              if (self._validators.insert.allow.every(validator => {
                return !validator(userId, docToValidate(validator, doc, generatedId));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // If we generated an ID above, insert it now: after the validation, but
              // before actually inserting.


              if (generatedId !== null) doc._id = generatedId;

              self._collection.insert.call(self._collection, doc);
            }; // Simulate a mongo `update` operation while validating that the access
            // control rules set by calls to `allow/deny` are satisfied. If all
            // pass, rewrite the mongo operation to use $in to set the list of
            // document ids to change ##ValidatedChange


            CollectionPrototype._validatedUpdate = function (userId, selector, mutator, options) {
              const self = this;
              check(mutator, Object);
              options = Object.assign(Object.create(null), options);
              if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) throw new Error("validated update should be of a single ID"); // We don't support upserts because they don't fit nicely into allow/deny
              // rules.

              if (options.upsert) throw new Meteor.Error(403, "Access denied. Upserts not " + "allowed in a restricted collection.");
              const noReplaceError = "Access denied. In a restricted collection you can only" + " update documents, not replace them. Use a Mongo update operator, such " + "as '$set'.";
              const mutatorKeys = Object.keys(mutator); // compute modified fields

              const modifiedFields = {};

              if (mutatorKeys.length === 0) {
                throw new Meteor.Error(403, noReplaceError);
              }

              mutatorKeys.forEach(op => {
                const params = mutator[op];

                if (op.charAt(0) !== '$') {
                  throw new Meteor.Error(403, noReplaceError);
                } else if (!hasOwn.call(ALLOWED_UPDATE_OPERATIONS, op)) {
                  throw new Meteor.Error(403, "Access denied. Operator " + op + " not allowed in a restricted collection.");
                } else {
                  Object.keys(params).forEach(field => {
                    // treat dotted fields as if they are replacing their
                    // top-level part
                    if (field.indexOf('.') !== -1) field = field.substring(0, field.indexOf('.')); // record the field we are trying to change

                    modifiedFields[field] = true;
                  });
                }
              });
              const fields = Object.keys(modifiedFields);
              const findOptions = {
                transform: null
              };

              if (!self._validators.fetchAllFields) {
                findOptions.fields = {};

                self._validators.fetch.forEach(fieldName => {
                  findOptions.fields[fieldName] = 1;
                });
              }

              const doc = self._collection.findOne(selector, findOptions);

              if (!doc) // none satisfied!
                return 0; // call user validators.
              // Any deny returns true means denied.

              if (self._validators.update.deny.some(validator => {
                const factoriedDoc = transformDoc(validator, doc);
                return validator(userId, factoriedDoc, fields, mutator);
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Any allow returns true means proceed. Throw error if they all fail.


              if (self._validators.update.allow.every(validator => {
                const factoriedDoc = transformDoc(validator, doc);
                return !validator(userId, factoriedDoc, fields, mutator);
              })) {
                throw new Meteor.Error(403, "Access denied");
              }

              options._forbidReplace = true; // Back when we supported arbitrary client-provided selectors, we actually
              // rewrote the selector to include an _id clause before passing to Mongo to
              // avoid races, but since selector is guaranteed to already just be an ID, we
              // don't have to any more.

              return self._collection.update.call(self._collection, selector, mutator, options);
            }; // Only allow these operations in validated updates. Specifically
            // whitelist operations, rather than blacklist, so new complex
            // operations that are added aren't automatically allowed. A complex
            // operation is one that does more than just modify its target
            // field. For now this contains all update operations except '$rename'.
            // http://docs.mongodb.org/manual/reference/operators/#update


            const ALLOWED_UPDATE_OPERATIONS = {
              $inc: 1,
              $set: 1,
              $unset: 1,
              $addToSet: 1,
              $pop: 1,
              $pullAll: 1,
              $pull: 1,
              $pushAll: 1,
              $push: 1,
              $bit: 1
            }; // Simulate a mongo `remove` operation while validating access control
            // rules. See #ValidatedChange

            CollectionPrototype._validatedRemove = function (userId, selector) {
              const self = this;
              const findOptions = {
                transform: null
              };

              if (!self._validators.fetchAllFields) {
                findOptions.fields = {};

                self._validators.fetch.forEach(fieldName => {
                  findOptions.fields[fieldName] = 1;
                });
              }

              const doc = self._collection.findOne(selector, findOptions);

              if (!doc) return 0; // call user validators.
              // Any deny returns true means denied.

              if (self._validators.remove.deny.some(validator => {
                return validator(userId, transformDoc(validator, doc));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Any allow returns true means proceed. Throw error if they all fail.


              if (self._validators.remove.allow.every(validator => {
                return !validator(userId, transformDoc(validator, doc));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Back when we supported arbitrary client-provided selectors, we actually
              // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to
              // Mongo to avoid races, but since selector is guaranteed to already just be
              // an ID, we don't have to any more.


              return self._collection.remove.call(self._collection, selector);
            };

            CollectionPrototype._callMutatorMethod = function _callMutatorMethod(name, args, callback) {
              if (Meteor.isClient && !callback && !alreadyInSimulation()) {
                // Client can't block, so it can't report errors by exception,
                // only by callback. If they forget the callback, give them a
                // default one that logs the error, so they aren't totally
                // baffled if their writes don't work because their database is
                // down.
                // Don't give a default callback in simulation, because inside stubs we
                // want to return the results from the local collection immediately and
                // not force a callback.
                callback = function (err) {
                  if (err) Meteor._debug(name + " failed: " + (err.reason || err.stack));
                };
              } // For two out of three mutator methods, the first argument is a selector


              const firstArgIsSelector = name === "update" || name === "remove";

              if (firstArgIsSelector && !alreadyInSimulation()) {
                // If we're about to actually send an RPC, we should throw an error if
                // this is a non-ID selector, because the mutation methods only allow
                // single-ID selectors. (If we don't throw here, we'll see flicker.)
                throwIfSelectorIsNotId(args[0], name);
              }

              const mutatorMethodName = this._prefix + name;
              return this._connection.apply(mutatorMethodName, args, {
                returnStubValue: true
              }, callback);
            };

            function transformDoc(validator, doc) {
              if (validator.transform) return validator.transform(doc);
              return doc;
            }

            function docToValidate(validator, doc, generatedId) {
              let ret = doc;

              if (validator.transform) {
                ret = EJSON.clone(doc); // If you set a server-side transform on your collection, then you don't get
                // to tell the difference between "client specified the ID" and "server
                // generated the ID", because transforms expect to get _id.  If you want to
                // do that check, you can do it with a specific
                // `C.allow({insert: f, transform: null})` validator.

                if (generatedId !== null) {
                  ret._id = generatedId;
                }

                ret = validator.transform(ret);
              }

              return ret;
            }

            function addValidator(collection, allowOrDeny, options) {
              // validate keys
              const validKeysRegEx = /^(?:insert|update|remove|fetch|transform)$/;
              Object.keys(options).forEach(key => {
                if (!validKeysRegEx.test(key)) throw new Error(allowOrDeny + ": Invalid key: " + key);
              });
              collection._restricted = true;
              ['insert', 'update', 'remove'].forEach(name => {
                if (hasOwn.call(options, name)) {
                  if (!(options[name] instanceof Function)) {
                    throw new Error(allowOrDeny + ": Value for `" + name + "` must be a function");
                  } // If the transform is specified at all (including as 'null') in this
                  // call, then take that; otherwise, take the transform from the
                  // collection.


                  if (options.transform === undefined) {
                    options[name].transform = collection._transform; // already wrapped
                  } else {
                    options[name].transform = LocalCollection.wrapTransform(options.transform);
                  }

                  collection._validators[name][allowOrDeny].push(options[name]);
                }
              }); // Only update the fetch fields if we're passed things that affect
              // fetching. This way allow({}) and allow({insert: f}) don't result in
              // setting fetchAllFields

              if (options.update || options.remove || options.fetch) {
                if (options.fetch && !(options.fetch instanceof Array)) {
                  throw new Error(allowOrDeny + ": Value for `fetch` must be an array");
                }

                collection._updateFetch(options.fetch);
              }
            }

            function throwIfSelectorIsNotId(selector, methodName) {
              if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {
                throw new Meteor.Error(403, "Not permitted. Untrusted code may only " + methodName + " documents by ID.");
              }
            }

            ; // Determine if we are in a DDP method simulation

            function alreadyInSimulation() {
              var CurrentInvocation = DDP._CurrentMethodInvocation || // For backwards compatibility, as explained in this issue:
              // https://github.com/meteor/meteor/issues/8947
              DDP._CurrentInvocation;
              const enclosing = CurrentInvocation.get();
              return enclosing && enclosing.isSimulation;
            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/allow-deny/allow-deny.js");

  /* Exports */
  Package._define("allow-deny", {
    AllowDeny: AllowDeny
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("mongo-dev-server");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var AllowDeny = Package['allow-deny'].AllowDeny;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var DDP = Package['ddp-client'].DDP;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var MongoID = Package['mongo-id'].MongoID;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Mongo, selector, callback, options;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "mongo": { "local_collection_driver.js": function module(_require, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                  //
            // packages/mongo/local_collection_driver.js                                                                        //
            //                                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              LocalCollectionDriver: () => LocalCollectionDriver
            });
            const LocalCollectionDriver = new class LocalCollectionDriver {
              constructor() {
                this.noConnCollections = Object.create(null);
              }

              open(name, conn) {
                if (!name) {
                  return new LocalCollection();
                }

                if (!conn) {
                  return ensureCollection(name, this.noConnCollections);
                }

                if (!conn._mongo_livedata_collections) {
                  conn._mongo_livedata_collections = Object.create(null);
                } // XXX is there a way to keep track of a connection's collections without
                // dangling it off the connection object?


                return ensureCollection(name, conn._mongo_livedata_collections);
              }

            }();

            function ensureCollection(name, collections) {
              return name in collections ? collections[name] : collections[name] = new LocalCollection(name);
            }
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "collection.js": function module(_require3, _exports2, _module2) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                  //
            // packages/mongo/collection.js                                                                                     //
            //                                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            !function (module1) {
              let _objectSpread;

              module1.link("@babel/runtime/helpers/objectSpread2", {
                default(v) {
                  _objectSpread = v;
                }

              }, 0);
              // options.connection, if given, is a LivedataClient or LivedataServer
              // XXX presently there is no way to destroy/clean up a Collection

              /**
               * @summary Namespace for MongoDB-related items
               * @namespace
               */
              Mongo = {};
              /**
               * @summary Constructor for a Collection
               * @locus Anywhere
               * @instancename collection
               * @class
               * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.
               * @param {Object} [options]
               * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.
               * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:
              
               - **`'STRING'`**: random strings
               - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values
              
              The default id generation technique is `'STRING'`.
               * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.
               * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.
               */

              Mongo.Collection = function Collection(name, options) {
                if (!name && name !== null) {
                  Meteor._debug("Warning: creating anonymous collection. It will not be " + "saved or synchronized over the network. (Pass null for " + "the collection name to turn off this warning.)");

                  name = null;
                }

                if (name !== null && typeof name !== "string") {
                  throw new Error("First argument to new Mongo.Collection must be a string or null");
                }

                if (options && options.methods) {
                  // Backwards compatibility hack with original signature (which passed
                  // "connection" directly instead of in options. (Connections must have a "methods"
                  // method.)
                  // XXX remove before 1.0
                  options = {
                    connection: options
                  };
                } // Backwards compatibility: "connection" used to be called "manager".


                if (options && options.manager && !options.connection) {
                  options.connection = options.manager;
                }

                options = _objectSpread({
                  connection: undefined,
                  idGeneration: 'STRING',
                  transform: null,
                  _driver: undefined,
                  _preventAutopublish: false
                }, options);

                switch (options.idGeneration) {
                  case 'MONGO':
                    this._makeNewID = function () {
                      var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;
                      return new Mongo.ObjectID(src.hexString(24));
                    };

                    break;

                  case 'STRING':
                  default:
                    this._makeNewID = function () {
                      var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;
                      return src.id();
                    };

                    break;
                }

                this._transform = LocalCollection.wrapTransform(options.transform);
                if (!name || options.connection === null) // note: nameless collections never have a connection
                  this._connection = null;else if (options.connection) this._connection = options.connection;else if (Meteor.isClient) this._connection = Meteor.connection;else this._connection = Meteor.server;

                if (!options._driver) {
                  // XXX This check assumes that webapp is loaded so that Meteor.server !==
                  // null. We should fully support the case of "want to use a Mongo-backed
                  // collection from Node code without webapp", but we don't yet.
                  // #MeteorServerNull
                  if (name && this._connection === Meteor.server && typeof MongoInternals !== "undefined" && MongoInternals.defaultRemoteCollectionDriver) {
                    options._driver = MongoInternals.defaultRemoteCollectionDriver();
                  } else {
                    const {
                      LocalCollectionDriver
                    } = _require3("./local_collection_driver.js");

                    options._driver = LocalCollectionDriver;
                  }
                }

                this._collection = options._driver.open(name, this._connection);
                this._name = name;
                this._driver = options._driver;

                this._maybeSetUpReplication(name, options); // XXX don't define these until allow or deny is actually used for this
                // collection. Could be hard if the security rules are only defined on the
                // server.


                if (options.defineMutationMethods !== false) {
                  try {
                    this._defineMutationMethods({
                      useExisting: options._suppressSameNameError === true
                    });
                  } catch (error) {
                    // Throw a more understandable error on the server for same collection name
                    if (error.message === "A method named '/".concat(name, "/insert' is already defined")) throw new Error("There is already a collection named \"".concat(name, "\""));
                    throw error;
                  }
                } // autopublish


                if (Package.autopublish && !options._preventAutopublish && this._connection && this._connection.publish) {
                  this._connection.publish(null, () => this.find(), {
                    is_auto: true
                  });
                }
              };

              Object.assign(Mongo.Collection.prototype, {
                _maybeSetUpReplication(name, _ref) {
                  let {
                    _suppressSameNameError = false
                  } = _ref;
                  const self = this;

                  if (!(self._connection && self._connection.registerStore)) {
                    return;
                  } // OK, we're going to be a slave, replicating some remote
                  // database, except possibly with some temporary divergence while
                  // we have unacknowledged RPC's.


                  const ok = self._connection.registerStore(name, {
                    // Called at the beginning of a batch of updates. batchSize is the number
                    // of update calls to expect.
                    //
                    // XXX This interface is pretty janky. reset probably ought to go back to
                    // being its own function, and callers shouldn't have to calculate
                    // batchSize. The optimization of not calling pause/remove should be
                    // delayed until later: the first call to update() should buffer its
                    // message, and then we can either directly apply it at endUpdate time if
                    // it was the only update, or do pauseObservers/apply/apply at the next
                    // update() if there's another one.
                    beginUpdate(batchSize, reset) {
                      // pause observers so users don't see flicker when updating several
                      // objects at once (including the post-reconnect reset-and-reapply
                      // stage), and so that a re-sorting of a query can take advantage of the
                      // full _diffQuery moved calculation instead of applying change one at a
                      // time.
                      if (batchSize > 1 || reset) self._collection.pauseObservers();
                      if (reset) self._collection.remove({});
                    },

                    // Apply an update.
                    // XXX better specify this interface (not in terms of a wire message)?
                    update(msg) {
                      var mongoId = MongoID.idParse(msg.id);

                      var doc = self._collection._docs.get(mongoId); // Is this a "replace the whole doc" message coming from the quiescence
                      // of method writes to an object? (Note that 'undefined' is a valid
                      // value meaning "remove it".)


                      if (msg.msg === 'replace') {
                        var replace = msg.replace;

                        if (!replace) {
                          if (doc) self._collection.remove(mongoId);
                        } else if (!doc) {
                          self._collection.insert(replace);
                        } else {
                          // XXX check that replace has no $ ops
                          self._collection.update(mongoId, replace);
                        }

                        return;
                      } else if (msg.msg === 'added') {
                        if (doc) {
                          throw new Error("Expected not to find a document already present for an add");
                        }

                        self._collection.insert(_objectSpread({
                          _id: mongoId
                        }, msg.fields));
                      } else if (msg.msg === 'removed') {
                        if (!doc) throw new Error("Expected to find a document already present for removed");

                        self._collection.remove(mongoId);
                      } else if (msg.msg === 'changed') {
                        if (!doc) throw new Error("Expected to find a document to change");
                        const keys = Object.keys(msg.fields);

                        if (keys.length > 0) {
                          var modifier = {};
                          keys.forEach(key => {
                            const value = msg.fields[key];

                            if (EJSON.equals(doc[key], value)) {
                              return;
                            }

                            if (typeof value === "undefined") {
                              if (!modifier.$unset) {
                                modifier.$unset = {};
                              }

                              modifier.$unset[key] = 1;
                            } else {
                              if (!modifier.$set) {
                                modifier.$set = {};
                              }

                              modifier.$set[key] = value;
                            }
                          });

                          if (Object.keys(modifier).length > 0) {
                            self._collection.update(mongoId, modifier);
                          }
                        }
                      } else {
                        throw new Error("I don't know how to deal with this message");
                      }
                    },

                    // Called at the end of a batch of updates.
                    endUpdate() {
                      self._collection.resumeObservers();
                    },

                    // Called around method stub invocations to capture the original versions
                    // of modified documents.
                    saveOriginals() {
                      self._collection.saveOriginals();
                    },

                    retrieveOriginals() {
                      return self._collection.retrieveOriginals();
                    },

                    // Used to preserve current versions of documents across a store reset.
                    getDoc(id) {
                      return self.findOne(id);
                    },

                    // To be able to get back to the collection from the store.
                    _getCollection() {
                      return self;
                    }

                  });

                  if (!ok) {
                    const message = "There is already a collection named \"".concat(name, "\"");

                    if (_suppressSameNameError === true) {
                      // XXX In theory we do not have to throw when `ok` is falsy. The
                      // store is already defined for this collection name, but this
                      // will simply be another reference to it and everything should
                      // work. However, we have historically thrown an error here, so
                      // for now we will skip the error only when _suppressSameNameError
                      // is `true`, allowing people to opt in and give this some real
                      // world testing.
                      console.warn ? console.warn(message) : console.log(message);
                    } else {
                      throw new Error(message);
                    }
                  }
                },

                ///
                /// Main collection API
                ///
                _getFindSelector(args) {
                  if (args.length == 0) return {};else return args[0];
                },

                _getFindOptions(args) {
                  var self = this;

                  if (args.length < 2) {
                    return {
                      transform: self._transform
                    };
                  } else {
                    check(args[1], Match.Optional(Match.ObjectIncluding({
                      fields: Match.Optional(Match.OneOf(Object, undefined)),
                      sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),
                      limit: Match.Optional(Match.OneOf(Number, undefined)),
                      skip: Match.Optional(Match.OneOf(Number, undefined))
                    })));
                    return _objectSpread({
                      transform: self._transform
                    }, args[1]);
                  }
                },

                /**
                 * @summary Find the documents in a collection that match the selector.
                 * @locus Anywhere
                 * @method find
                 * @memberof Mongo.Collection
                 * @instance
                 * @param {MongoSelector} [selector] A query describing the documents to find
                 * @param {Object} [options]
                 * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)
                 * @param {Number} options.skip Number of results to skip at the beginning
                 * @param {Number} options.limit Maximum number of results to return
                 * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.
                 * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity
                 * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
                 * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.
                 * @param {Number} options.pollingIntervalMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the frequency (in milliseconds) of how often to poll this query when observing on the server. Defaults to 10000ms (10 seconds).
                 * @param {Number} options.pollingThrottleMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the minimum time (in milliseconds) to allow between re-polling when observing on the server. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. Defaults to 50ms.
                 * @param {Number} options.maxTimeMs (Server only) If set, instructs MongoDB to set a time limit for this cursor's operations. If the operation reaches the specified time limit (in milliseconds) without the having been completed, an exception will be thrown. Useful to prevent an (accidental or malicious) unoptimized query from causing a full collection scan that would disrupt other database users, at the expense of needing to handle the resulting error.
                 * @param {String|Object} options.hint (Server only) Overrides MongoDB's default index selection and query optimization process. Specify an index to force its use, either by its name or index specification. You can also specify `{ $natural : 1 }` to force a forwards collection scan, or `{ $natural : -1 }` for a reverse collection scan. Setting this is only recommended for advanced users.
                 * @returns {Mongo.Cursor}
                 */
                find() {
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  // Collection.find() (return all docs) behaves differently
                  // from Collection.find(undefined) (return 0 docs).  so be
                  // careful about the length of arguments.
                  return this._collection.find(this._getFindSelector(args), this._getFindOptions(args));
                },

                /**
                 * @summary Finds the first document that matches the selector, as ordered by sort and skip options. Returns `undefined` if no matching document is found.
                 * @locus Anywhere
                 * @method findOne
                 * @memberof Mongo.Collection
                 * @instance
                 * @param {MongoSelector} [selector] A query describing the documents to find
                 * @param {Object} [options]
                 * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)
                 * @param {Number} options.skip Number of results to skip at the beginning
                 * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.
                 * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity
                 * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
                 * @returns {Object}
                 */
                findOne() {
                  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = arguments[_key2];
                  }

                  return this._collection.findOne(this._getFindSelector(args), this._getFindOptions(args));
                }

              });
              Object.assign(Mongo.Collection, {
                _publishCursor(cursor, sub, collection) {
                  var observeHandle = cursor.observeChanges({
                    added: function (id, fields) {
                      sub.added(collection, id, fields);
                    },
                    changed: function (id, fields) {
                      sub.changed(collection, id, fields);
                    },
                    removed: function (id) {
                      sub.removed(collection, id);
                    }
                  }, // Publications don't mutate the documents
                  // This is tested by the `livedata - publish callbacks clone` test
                  {
                    nonMutatingCallbacks: true
                  }); // We don't call sub.ready() here: it gets called in livedata_server, after
                  // possibly calling _publishCursor on multiple returned cursors.
                  // register stop callback (expects lambda w/ no args).

                  sub.onStop(function () {
                    observeHandle.stop();
                  }); // return the observeHandle in case it needs to be stopped early

                  return observeHandle;
                },

                // protect against dangerous selectors.  falsey and {_id: falsey} are both
                // likely programmer error, and not what you want, particularly for destructive
                // operations. If a falsey _id is sent in, a new string _id will be
                // generated and returned; if a fallbackId is provided, it will be returned
                // instead.
                _rewriteSelector(selector) {
                  let {
                    fallbackId
                  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                  // shorthand -- scalars match _id
                  if (LocalCollection._selectorIsId(selector)) selector = {
                    _id: selector
                  };

                  if (Array.isArray(selector)) {
                    // This is consistent with the Mongo console itself; if we don't do this
                    // check passing an empty array ends up selecting all items
                    throw new Error("Mongo selector can't be an array.");
                  }

                  if (!selector || '_id' in selector && !selector._id) {
                    // can't match anything
                    return {
                      _id: fallbackId || Random.id()
                    };
                  }

                  return selector;
                }

              });
              Object.assign(Mongo.Collection.prototype, {
                // 'insert' immediately returns the inserted document's new _id.
                // The others return values immediately if you are in a stub, an in-memory
                // unmanaged collection, or a mongo-backed collection and you don't pass a
                // callback. 'update' and 'remove' return the number of affected
                // documents. 'upsert' returns an object with keys 'numberAffected' and, if an
                // insert happened, 'insertedId'.
                //
                // Otherwise, the semantics are exactly like other methods: they take
                // a callback as an optional last argument; if no callback is
                // provided, they block until the operation is complete, and throw an
                // exception if it fails; if a callback is provided, then they don't
                // necessarily block, and they call the callback when they finish with error and
                // result arguments.  (The insert method provides the document ID as its result;
                // update and remove provide the number of affected docs as the result; upsert
                // provides an object with numberAffected and maybe insertedId.)
                //
                // On the client, blocking is impossible, so if a callback
                // isn't provided, they just return immediately and any error
                // information is lost.
                //
                // There's one more tweak. On the client, if you don't provide a
                // callback, then if there is an error, a message will be logged with
                // Meteor._debug.
                //
                // The intent (though this is actually determined by the underlying
                // drivers) is that the operations should be done synchronously, not
                // generating their result until the database has acknowledged
                // them. In the future maybe we should provide a flag to turn this
                // off.

                /**
                 * @summary Insert a document in the collection.  Returns its unique _id.
                 * @locus Anywhere
                 * @method  insert
                 * @memberof Mongo.Collection
                 * @instance
                 * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.
                 * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.
                 */
                insert(doc, callback) {
                  // Make sure we were passed a document to insert
                  if (!doc) {
                    throw new Error("insert requires an argument");
                  } // Make a shallow clone of the document, preserving its prototype.


                  doc = Object.create(Object.getPrototypeOf(doc), Object.getOwnPropertyDescriptors(doc));

                  if ('_id' in doc) {
                    if (!doc._id || !(typeof doc._id === 'string' || doc._id instanceof Mongo.ObjectID)) {
                      throw new Error("Meteor requires document _id fields to be non-empty strings or ObjectIDs");
                    }
                  } else {
                    let generateId = true; // Don't generate the id if we're the client and the 'outermost' call
                    // This optimization saves us passing both the randomSeed and the id
                    // Passing both is redundant.

                    if (this._isRemoteCollection()) {
                      const enclosing = DDP._CurrentMethodInvocation.get();

                      if (!enclosing) {
                        generateId = false;
                      }
                    }

                    if (generateId) {
                      doc._id = this._makeNewID();
                    }
                  } // On inserts, always return the id that we generated; on all other
                  // operations, just return the result from the collection.


                  var chooseReturnValueFromCollectionResult = function (result) {
                    if (doc._id) {
                      return doc._id;
                    } // XXX what is this for??
                    // It's some iteraction between the callback to _callMutatorMethod and
                    // the return value conversion


                    doc._id = result;
                    return result;
                  };

                  const wrappedCallback = wrapCallback(callback, chooseReturnValueFromCollectionResult);

                  if (this._isRemoteCollection()) {
                    const result = this._callMutatorMethod("insert", [doc], wrappedCallback);

                    return chooseReturnValueFromCollectionResult(result);
                  } // it's my collection.  descend into the collection object
                  // and propagate any exception.


                  try {
                    // If the user provided a callback and the collection implements this
                    // operation asynchronously, then queryRet will be undefined, and the
                    // result will be returned through the callback instead.
                    const result = this._collection.insert(doc, wrappedCallback);

                    return chooseReturnValueFromCollectionResult(result);
                  } catch (e) {
                    if (callback) {
                      callback(e);
                      return null;
                    }

                    throw e;
                  }
                },

                /**
                 * @summary Modify one or more documents in the collection. Returns the number of matched documents.
                 * @locus Anywhere
                 * @method update
                 * @memberof Mongo.Collection
                 * @instance
                 * @param {MongoSelector} selector Specifies which documents to modify
                 * @param {MongoModifier} modifier Specifies how to modify the documents
                 * @param {Object} [options]
                 * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
                 * @param {Boolean} options.upsert True to insert a document if no matching documents are found.
                 * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
                 */
                update(selector, modifier) {
                  for (var _len3 = arguments.length, optionsAndCallback = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                    optionsAndCallback[_key3 - 2] = arguments[_key3];
                  }

                  const callback = popCallbackFromArgs(optionsAndCallback); // We've already popped off the callback, so we are left with an array
                  // of one or zero items

                  const options = _objectSpread({}, optionsAndCallback[0] || null);

                  let insertedId;

                  if (options && options.upsert) {
                    // set `insertedId` if absent.  `insertedId` is a Meteor extension.
                    if (options.insertedId) {
                      if (!(typeof options.insertedId === 'string' || options.insertedId instanceof Mongo.ObjectID)) throw new Error("insertedId must be string or ObjectID");
                      insertedId = options.insertedId;
                    } else if (!selector || !selector._id) {
                      insertedId = this._makeNewID();
                      options.generatedId = true;
                      options.insertedId = insertedId;
                    }
                  }

                  selector = Mongo.Collection._rewriteSelector(selector, {
                    fallbackId: insertedId
                  });
                  const wrappedCallback = wrapCallback(callback);

                  if (this._isRemoteCollection()) {
                    const args = [selector, modifier, options];
                    return this._callMutatorMethod("update", args, wrappedCallback);
                  } // it's my collection.  descend into the collection object
                  // and propagate any exception.


                  try {
                    // If the user provided a callback and the collection implements this
                    // operation asynchronously, then queryRet will be undefined, and the
                    // result will be returned through the callback instead.
                    return this._collection.update(selector, modifier, options, wrappedCallback);
                  } catch (e) {
                    if (callback) {
                      callback(e);
                      return null;
                    }

                    throw e;
                  }
                },

                /**
                 * @summary Remove documents from the collection
                 * @locus Anywhere
                 * @method remove
                 * @memberof Mongo.Collection
                 * @instance
                 * @param {MongoSelector} selector Specifies which documents to remove
                 * @param {Function} [callback] Optional.  If present, called with an error object as its argument.
                 */
                remove(selector, callback) {
                  selector = Mongo.Collection._rewriteSelector(selector);
                  const wrappedCallback = wrapCallback(callback);

                  if (this._isRemoteCollection()) {
                    return this._callMutatorMethod("remove", [selector], wrappedCallback);
                  } // it's my collection.  descend into the collection object
                  // and propagate any exception.


                  try {
                    // If the user provided a callback and the collection implements this
                    // operation asynchronously, then queryRet will be undefined, and the
                    // result will be returned through the callback instead.
                    return this._collection.remove(selector, wrappedCallback);
                  } catch (e) {
                    if (callback) {
                      callback(e);
                      return null;
                    }

                    throw e;
                  }
                },

                // Determine if this collection is simply a minimongo representation of a real
                // database on another server
                _isRemoteCollection() {
                  // XXX see #MeteorServerNull
                  return this._connection && this._connection !== Meteor.server;
                },

                /**
                 * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).
                 * @locus Anywhere
                 * @method upsert
                 * @memberof Mongo.Collection
                 * @instance
                 * @param {MongoSelector} selector Specifies which documents to modify
                 * @param {MongoModifier} modifier Specifies how to modify the documents
                 * @param {Object} [options]
                 * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
                 * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
                 */
                upsert(selector, modifier, options, callback) {
                  if (!callback && typeof options === "function") {
                    callback = options;
                    options = {};
                  }

                  return this.update(selector, modifier, _objectSpread({}, options, {
                    _returnObject: true,
                    upsert: true
                  }), callback);
                },

                // We'll actually design an index API later. For now, we just pass through to
                // Mongo's, but make it synchronous.
                _ensureIndex(index, options) {
                  var self = this;
                  if (!self._collection._ensureIndex) throw new Error("Can only call _ensureIndex on server collections");

                  self._collection._ensureIndex(index, options);
                },

                _dropIndex(index) {
                  var self = this;
                  if (!self._collection._dropIndex) throw new Error("Can only call _dropIndex on server collections");

                  self._collection._dropIndex(index);
                },

                _dropCollection() {
                  var self = this;
                  if (!self._collection.dropCollection) throw new Error("Can only call _dropCollection on server collections");

                  self._collection.dropCollection();
                },

                _createCappedCollection(byteSize, maxDocuments) {
                  var self = this;
                  if (!self._collection._createCappedCollection) throw new Error("Can only call _createCappedCollection on server collections");

                  self._collection._createCappedCollection(byteSize, maxDocuments);
                },

                /**
                 * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/3.0/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
                 * @locus Server
                 * @memberof Mongo.Collection
                 * @instance
                 */
                rawCollection() {
                  var self = this;

                  if (!self._collection.rawCollection) {
                    throw new Error("Can only call rawCollection on server collections");
                  }

                  return self._collection.rawCollection();
                },

                /**
                 * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/3.0/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
                 * @locus Server
                 * @memberof Mongo.Collection
                 * @instance
                 */
                rawDatabase() {
                  var self = this;

                  if (!(self._driver.mongo && self._driver.mongo.db)) {
                    throw new Error("Can only call rawDatabase on server collections");
                  }

                  return self._driver.mongo.db;
                }

              }); // Convert the callback to not return a result if there is an error

              function wrapCallback(callback, convertResult) {
                return callback && function (error, result) {
                  if (error) {
                    callback(error);
                  } else if (typeof convertResult === "function") {
                    callback(error, convertResult(result));
                  } else {
                    callback(error, result);
                  }
                };
              }
              /**
               * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).
               * @locus Anywhere
               * @class
               * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create
               */

              Mongo.ObjectID = MongoID.ObjectID;
              /**
               * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.
               * @class
               * @instanceName cursor
               */

              Mongo.Cursor = LocalCollection.Cursor;
              /**
               * @deprecated in 0.9.1
               */

              Mongo.Collection.Cursor = Mongo.Cursor;
              /**
               * @deprecated in 0.9.1
               */

              Mongo.Collection.ObjectID = Mongo.ObjectID;
              /**
               * @deprecated in 0.9.1
               */

              Meteor.Collection = Mongo.Collection; // Allow deny stuff is now in the allow-deny package

              Object.assign(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);

              function popCallbackFromArgs(args) {
                // Pull off any callback (or perhaps a 'callback' variable that was passed
                // in undefined, like how 'upsert' does it).
                if (args.length && (args[args.length - 1] === undefined || args[args.length - 1] instanceof Function)) {
                  return args.pop();
                }
              }
            }.call(this, _module2);
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require2("/node_modules/meteor/mongo/local_collection_driver.js");
  _require2("/node_modules/meteor/mongo/collection.js");

  /* Exports */
  Package._define("mongo", {
    Mongo: Mongo
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var value, ReactiveDict;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "reactive-dict": { "migration.js": function module(_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/reactive-dict/migration.js                                                                           //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              ReactiveDict: () => ReactiveDict
            });
            let ReactiveDict;
            _module.link("./reactive-dict", {
              ReactiveDict(v) {
                ReactiveDict = v;
              }

            }, 0);
            const hasOwn = Object.prototype.hasOwnProperty;
            ReactiveDict._migratedDictData = {}; // name -> data

            ReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict

            ReactiveDict._loadMigratedDict = function (dictName) {
              if (hasOwn.call(ReactiveDict._migratedDictData, dictName)) {
                const data = ReactiveDict._migratedDictData[dictName];
                delete ReactiveDict._migratedDictData[dictName];
                return data;
              }

              return null;
            };

            ReactiveDict._registerDictForMigrate = function (dictName, dict) {
              if (hasOwn.call(ReactiveDict._dictsToMigrate, dictName)) throw new Error("Duplicate ReactiveDict name: " + dictName);
              ReactiveDict._dictsToMigrate[dictName] = dict;
            };

            if (Meteor.isClient && Package.reload) {
              // Put old migrated data into ReactiveDict._migratedDictData,
              // where it can be accessed by ReactiveDict._loadMigratedDict.
              var migrationData = Package.reload.Reload._migrationData('reactive-dict');

              if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts; // On migration, assemble the data from all the dicts that have been
              // registered.

              Package.reload.Reload._onMigrate('reactive-dict', function () {
                var dictsToMigrate = ReactiveDict._dictsToMigrate;
                var dataToMigrate = {};

                for (var dictName in dictsToMigrate) dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();

                return [true, {
                  dicts: dataToMigrate
                }];
              });
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "reactive-dict.js": function module(_require3, _exports3, _module2) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/reactive-dict/reactive-dict.js                                                                       //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module2.export({
              ReactiveDict: () => ReactiveDict
            });
            const hasOwn = Object.prototype.hasOwnProperty; // XXX come up with a serialization method which canonicalizes object key
            // order, which would allow us to use objects as values for equals.

            function stringify(value) {
              if (value === undefined) {
                return 'undefined';
              }

              return EJSON.stringify(value);
            }

            function parse(serialized) {
              if (serialized === undefined || serialized === 'undefined') {
                return undefined;
              }

              return EJSON.parse(serialized);
            }

            function changed(v) {
              v && v.changed();
            } // XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName

            /**
             * @class
             * @instanceName ReactiveDict
             * @summary Constructor for a ReactiveDict, which represents a reactive dictionary of key/value pairs.
             * @locus Client
             * @param {String} [name] Optional.  When a name is passed, preserves contents across Hot Code Pushes
             * @param {Object} [initialValue] Optional.  The default values for the dictionary
             */

            class ReactiveDict {
              constructor(dictName, dictData) {
                // this.keys: key -> value
                this.keys = {};

                if (dictName) {
                  // name given; migration will be performed
                  if (typeof dictName === 'string') {
                    // the normal case, argument is a string name.
                    // Only run migration logic on client, it will cause
                    // duplicate name errors on server during reloads.
                    // _registerDictForMigrate will throw an error on duplicate name.
                    Meteor.isClient && ReactiveDict._registerDictForMigrate(dictName, this);

                    const migratedData = Meteor.isClient && ReactiveDict._loadMigratedDict(dictName);

                    if (migratedData) {
                      // Don't stringify migrated data
                      this.keys = migratedData;
                    } else {
                      // Use _setObject to make sure values are stringified
                      this._setObject(dictData || {});
                    }

                    this.name = dictName;
                  } else if (typeof dictName === 'object') {
                    // back-compat case: dictName is actually migrationData
                    // Use _setObject to make sure values are stringified
                    this._setObject(dictName);
                  } else {
                    throw new Error("Invalid ReactiveDict argument: " + dictName);
                  }
                } else if (typeof dictData === 'object') {
                  this._setObject(dictData);
                }

                this.allDeps = new Tracker.Dependency();
                this.keyDeps = {}; // key -> Dependency

                this.keyValueDeps = {}; // key -> Dependency
              } // set() began as a key/value method, but we are now overloading it
              // to take an object of key/value pairs, similar to backbone
              // http://backbonejs.org/#Model-set

              /**
               * @summary Set a value for a key in the ReactiveDict. Notify any listeners
               * that the value has changed (eg: redraw templates, and rerun any
               * [`Tracker.autorun`](#tracker_autorun) computations, that called
               * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)
               * @locus Client
               * @param {String} key The key to set, eg, `selectedItem`
               * @param {EJSONable | undefined} value The new value for `key`
               */

              set(keyOrObject, value) {
                if (typeof keyOrObject === 'object' && value === undefined) {
                  // Called as `dict.set({...})`
                  this._setObject(keyOrObject);

                  return;
                } // the input isn't an object, so it must be a key
                // and we resume with the rest of the function


                const key = keyOrObject;
                value = stringify(value);
                const keyExisted = hasOwn.call(this.keys, key);
                const oldSerializedValue = keyExisted ? this.keys[key] : 'undefined';
                const isNewValue = value !== oldSerializedValue;
                this.keys[key] = value;

                if (isNewValue || !keyExisted) {
                  // Using the changed utility function here because this.allDeps might not exist yet,
                  // when setting initial data from constructor
                  changed(this.allDeps);
                } // Don't trigger changes when setting initial data from constructor,
                // this.KeyDeps is undefined in this case


                if (isNewValue && this.keyDeps) {
                  changed(this.keyDeps[key]);

                  if (this.keyValueDeps[key]) {
                    changed(this.keyValueDeps[key][oldSerializedValue]);
                    changed(this.keyValueDeps[key][value]);
                  }
                }
              }
              /**
               * @summary Set a value for a key if it hasn't been set before.
               * Otherwise works exactly the same as [`ReactiveDict.set`](#ReactiveDict-set).
               * @locus Client
               * @param {String} key The key to set, eg, `selectedItem`
               * @param {EJSONable | undefined} value The new value for `key`
               */

              setDefault(keyOrObject, value) {
                if (typeof keyOrObject === 'object' && value === undefined) {
                  // Called as `dict.setDefault({...})`
                  this._setDefaultObject(keyOrObject);

                  return;
                } // the input isn't an object, so it must be a key
                // and we resume with the rest of the function


                const key = keyOrObject;

                if (!hasOwn.call(this.keys, key)) {
                  this.set(key, value);
                }
              }
              /**
               * @summary Get the value assiciated with a key. If inside a [reactive
               * computation](#reactivity), invalidate the computation the next time the
               * value associated with this key is changed by
               * [`ReactiveDict.set`](#ReactiveDict-set).
               * This returns a clone of the value, so if it's an object or an array,
               * mutating the returned value has no effect on the value stored in the
               * ReactiveDict.
               * @locus Client
               * @param {String} key The key of the element to return
               */

              get(key) {
                this._ensureKey(key);

                this.keyDeps[key].depend();
                return parse(this.keys[key]);
              }
              /**
               * @summary Test if the stored entry for a key is equal to a value. If inside a
               * [reactive computation](#reactivity), invalidate the computation the next
               * time the variable changes to or from the value.
               * @locus Client
               * @param {String} key The name of the session variable to test
               * @param {String | Number | Boolean | null | undefined} value The value to
               * test against
               */

              equals(key, value) {
                // Mongo.ObjectID is in the 'mongo' package
                let ObjectID = null;

                if (Package.mongo) {
                  ObjectID = Package.mongo.Mongo.ObjectID;
                } // We don't allow objects (or arrays that might include objects) for
                // .equals, because JSON.stringify doesn't canonicalize object key
                // order. (We can make equals have the right return value by parsing the
                // current value and using EJSON.equals, but we won't have a canonical
                // element of keyValueDeps[key] to store the dependency.) You can still use
                // "EJSON.equals(reactiveDict.get(key), value)".
                //
                // XXX we could allow arrays as long as we recursively check that there
                // are no objects


                if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {
                  throw new Error("ReactiveDict.equals: value must be scalar");
                }

                const serializedValue = stringify(value);

                if (Tracker.active) {
                  this._ensureKey(key);

                  if (!hasOwn.call(this.keyValueDeps[key], serializedValue)) {
                    this.keyValueDeps[key][serializedValue] = new Tracker.Dependency();
                  }

                  var isNew = this.keyValueDeps[key][serializedValue].depend();

                  if (isNew) {
                    Tracker.onInvalidate(() => {
                      // clean up [key][serializedValue] if it's now empty, so we don't
                      // use O(n) memory for n = values seen ever
                      if (!this.keyValueDeps[key][serializedValue].hasDependents()) {
                        delete this.keyValueDeps[key][serializedValue];
                      }
                    });
                  }
                }

                let oldValue = undefined;

                if (hasOwn.call(this.keys, key)) {
                  oldValue = parse(this.keys[key]);
                }

                return EJSON.equals(oldValue, value);
              }
              /**
               * @summary Get all key-value pairs as a plain object. If inside a [reactive
               * computation](#reactivity), invalidate the computation the next time the
               * value associated with any key is changed by
               * [`ReactiveDict.set`](#ReactiveDict-set).
               * This returns a clone of each value, so if it's an object or an array,
               * mutating the returned value has no effect on the value stored in the
               * ReactiveDict.
               * @locus Client
               */

              all() {
                this.allDeps.depend();
                let ret = {};
                Object.keys(this.keys).forEach(key => {
                  ret[key] = parse(this.keys[key]);
                });
                return ret;
              }
              /**
               * @summary remove all key-value pairs from the ReactiveDict. Notify any
               * listeners that the value has changed (eg: redraw templates, and rerun any
               * [`Tracker.autorun`](#tracker_autorun) computations, that called
               * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)
               * @locus Client
               */

              clear() {
                const oldKeys = this.keys;
                this.keys = {};
                this.allDeps.changed();
                Object.keys(oldKeys).forEach(key => {
                  changed(this.keyDeps[key]);

                  if (this.keyValueDeps[key]) {
                    changed(this.keyValueDeps[key][oldKeys[key]]);
                    changed(this.keyValueDeps[key]['undefined']);
                  }
                });
              }
              /**
               * @summary remove a key-value pair from the ReactiveDict. Notify any listeners
               * that the value has changed (eg: redraw templates, and rerun any
               * [`Tracker.autorun`](#tracker_autorun) computations, that called
               * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)
               * @locus Client
               * @param {String} key The key to delete, eg, `selectedItem`
               */

              delete(key) {
                let didRemove = false;

                if (hasOwn.call(this.keys, key)) {
                  const oldValue = this.keys[key];
                  delete this.keys[key];
                  changed(this.keyDeps[key]);

                  if (this.keyValueDeps[key]) {
                    changed(this.keyValueDeps[key][oldValue]);
                    changed(this.keyValueDeps[key]['undefined']);
                  }

                  this.allDeps.changed();
                  didRemove = true;
                }

                return didRemove;
              }
              /**
               * @summary Clear all values from the reactiveDict and prevent it from being
               * migrated on a Hot Code Pushes. Notify any listeners
               * that the value has changed (eg: redraw templates, and rerun any
               * [`Tracker.autorun`](#tracker_autorun) computations, that called
               * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)
               * @locus Client
               */

              destroy() {
                this.clear();

                if (this.name && hasOwn.call(ReactiveDict._dictsToMigrate, this.name)) {
                  delete ReactiveDict._dictsToMigrate[this.name];
                }
              }

              _setObject(object) {
                Object.keys(object).forEach(key => {
                  this.set(key, object[key]);
                });
              }

              _setDefaultObject(object) {
                Object.keys(object).forEach(key => {
                  this.setDefault(key, object[key]);
                });
              }

              _ensureKey(key) {
                if (!(key in this.keyDeps)) {
                  this.keyDeps[key] = new Tracker.Dependency();
                  this.keyValueDeps[key] = {};
                }
              } // Get a JSON value that can be passed to the constructor to
              // create a new ReactiveDict with the same contents as this one


              _getMigrationData() {
                // XXX sanitize and make sure it's JSONible?
                return this.keys;
              }

            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/reactive-dict/migration.js");

  /* Exports */
  Package._define("reactive-dict", _exports2, {
    ReactiveDict: ReactiveDict
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var ReactiveDict = Package['reactive-dict'].ReactiveDict;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Session;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "session": { "session.js": function module(_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////
            //                                                                   //
            // packages/session/session.js                                       //
            //                                                                   //
            ///////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Session: () => Session
            });
            let ReactiveDict;
            _module.link("meteor/reactive-dict", {
              ReactiveDict(v) {
                ReactiveDict = v;
              }

            }, 0);
            const Session = new ReactiveDict('session');
            ///////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/session/session.js");

  /* Exports */
  Package._define("session", _exports2, {
    Session: Session
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;

  /* Package-scope variables */
  var ReactiveVar;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                              //
    // packages/reactive-var/reactive-var.js                                                                        //
    //                                                                                                              //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /*
     * ## [new] ReactiveVar(initialValue, [equalsFunc])
     *
     * A ReactiveVar holds a single value that can be get and set,
     * such that calling `set` will invalidate any Computations that
     * called `get`, according to the usual contract for reactive
     * data sources.
     *
     * A ReactiveVar is much like a Session variable -- compare `foo.get()`
     * to `Session.get("foo")` -- but it doesn't have a global name and isn't
     * automatically migrated across hot code pushes.  Also, while Session
     * variables can only hold JSON or EJSON, ReactiveVars can hold any value.
     *
     * An important property of ReactiveVars, which is sometimes the reason
     * to use one, is that setting the value to the same value as before has
     * no effect, meaning ReactiveVars can be used to absorb extra
     * invalidations that wouldn't serve a purpose.  However, by default,
     * ReactiveVars are extremely conservative about what changes they
     * absorb.  Calling `set` with an object argument will *always* trigger
     * invalidations, because even if the new value is `===` the old value,
     * the object may have been mutated.  You can change the default behavior
     * by passing a function of two arguments, `oldValue` and `newValue`,
     * to the constructor as `equalsFunc`.
     *
     * This class is extremely basic right now, but the idea is to evolve
     * it into the ReactiveVar of Geoff's Lickable Forms proposal.
     */

    /**
     * @class 
     * @instanceName reactiveVar
     * @summary Constructor for a ReactiveVar, which represents a single reactive variable.
     * @locus Client
     * @param {Any} initialValue The initial value to set.  `equalsFunc` is ignored when setting the initial value.
     * @param {Function} [equalsFunc] Optional.  A function of two arguments, called on the old value and the new value whenever the ReactiveVar is set.  If it returns true, no set is performed.  If omitted, the default `equalsFunc` returns true if its arguments are `===` and are of type number, boolean, string, undefined, or null.
     */
    ReactiveVar = function (initialValue, equalsFunc) {
      if (!(this instanceof ReactiveVar))
        // called without `new`
        return new ReactiveVar(initialValue, equalsFunc);

      this.curValue = initialValue;
      this.equalsFunc = equalsFunc;
      this.dep = new Tracker.Dependency();
    };

    ReactiveVar._isEqual = function (oldValue, newValue) {
      var a = oldValue,
          b = newValue;
      // Two values are "equal" here if they are `===` and are
      // number, boolean, string, undefined, or null.
      if (a !== b) return false;else return !a || typeof a === 'number' || typeof a === 'boolean' || typeof a === 'string';
    };

    /**
     * @summary Returns the current value of the ReactiveVar, establishing a reactive dependency.
     * @locus Client
     */
    ReactiveVar.prototype.get = function () {
      if (Tracker.active) this.dep.depend();

      return this.curValue;
    };

    /**
     * @summary Sets the current value of the ReactiveVar, invalidating the Computations that called `get` if `newValue` is different from the old value.
     * @locus Client
     * @param {Any} newValue
     */
    ReactiveVar.prototype.set = function (newValue) {
      var oldValue = this.curValue;

      if ((this.equalsFunc || ReactiveVar._isEqual)(oldValue, newValue))
        // value is same as last time
        return;

      this.curValue = newValue;
      this.dep.changed();
    };

    ReactiveVar.prototype.toString = function () {
      return 'ReactiveVar{' + this.get() + '}';
    };

    ReactiveVar.prototype._numListeners = function () {
      // Tests want to know.
      // Accesses a private field of Tracker.Dependency.
      var count = 0;
      for (var id in this.dep._dependentsById) count++;
      return count;
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("reactive-var", {
    ReactiveVar: ReactiveVar
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("standard-minifier-css");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("standard-minifier-js");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("typescript");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("email");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ddp-rate-limiter");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Random = Package.random.Random;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////
    //                                                                                  //
    // packages/localstorage/localstorage.js                                            //
    //                                                                                  //
    //////////////////////////////////////////////////////////////////////////////////////
    //
    // Meteor._localStorage is not an ideal name, but we can change it later.

    // Let's test to make sure that localStorage actually works. For example, in
    // Safari with private browsing on, window.localStorage exists but actually
    // trying to use it throws.
    // Accessing window.localStorage can also immediately throw an error in IE (#1291).

    var hasOwn = Object.prototype.hasOwnProperty;
    var key = '_localstorage_test_' + Random.id();
    var retrieved;
    var storage;

    try {
      storage = global.localStorage;

      if (storage) {
        storage.setItem(key, key);
        retrieved = storage.getItem(key);
        storage.removeItem(key);
      }
    } catch (ignored) {}

    if (key === retrieved) {
      if (Meteor.isServer) {
        Meteor._localStorage = storage;
      } else {
        // Some browsers (e.g. IE11) don't properly handle attempts to change
        // window.localStorage methods. By using proxy methods to expose
        // window.localStorage functionality, developers can change the
        // behavior of Meteor._localStorage methods without breaking
        // window.localStorage.
        ["getItem", "setItem", "removeItem"].forEach(function (name) {
          this[name] = function () {
            return storage[name].apply(storage, arguments);
          };
        }, Meteor._localStorage = {});
      }
    }

    if (!Meteor._localStorage) {
      if (Meteor.isClient) {
        Meteor._debug("You are running a browser with no localStorage or userData " + "support. Logging in from one tab will not cause another " + "tab to be logged in.");
      }

      Meteor._localStorage = Object.create({
        setItem: function (key, val) {
          this[key] = val;
        },

        removeItem: function (key) {
          delete this[key];
        },

        getItem: function (key) {
          return hasOwn.call(this, key) ? this[key] : null;
        }
      });
    }

    //////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("localstorage");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Random = Package.random.Random;
  var Hook = Package['callback-hook'].Hook;
  var ReactiveVar = Package['reactive-var'].ReactiveVar;
  var DDP = Package['ddp-client'].DDP;
  var Mongo = Package.mongo.Mongo;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Accounts, options, tokenExpires;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "accounts-base": { "client_main.js": function module(_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/accounts-base/client_main.js                                                                              //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Accounts: () => Accounts,
              AccountsClient: () => AccountsClient,
              AccountsTest: () => AccountsTest,
              default: () => _exports
            });
            let AccountsClient, AccountsTest;
            _module.link("./accounts_client.js", {
              AccountsClient(v) {
                AccountsClient = v;
              },

              AccountsTest(v) {
                AccountsTest = v;
              }

            }, 0);

            /**
             * @namespace Accounts
             * @summary The namespace for all client-side accounts-related methods.
             */
            _module.runSetters(Accounts = new AccountsClient());
            /**
             * @summary A [Mongo.Collection](#collections) containing user documents.
             * @locus Anywhere
             * @type {Mongo.Collection}
             * @importFromPackage meteor
             */

            Meteor.users = Accounts.users;
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "accounts_client.js": function module(_require3, _exports3, _module2) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/accounts-base/accounts_client.js                                                                          //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module2.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            _module2.export({
              AccountsClient: () => AccountsClient,
              AccountsTest: () => AccountsTest
            });
            let AccountsCommon;
            _module2.link("./accounts_common.js", {
              AccountsCommon(v) {
                AccountsCommon = v;
              }

            }, 0);

            class AccountsClient extends AccountsCommon {
              constructor(options) {
                super(options);
                this._loggingIn = new ReactiveVar(false);
                this._loggingOut = new ReactiveVar(false);
                this._loginServicesHandle = this.connection.subscribe("meteor.loginServiceConfiguration");
                this._pageLoadLoginCallbacks = [];
                this._pageLoadLoginAttemptInfo = null;
                this.savedHash = window.location.hash;

                this._initUrlMatching(); // Defined in localstorage_token.js.


                this._initLocalStorage(); // This is for .registerClientLoginFunction & .callLoginFunction.


                this._loginFuncs = {};
              } ///
              /// CURRENT USER
              ///
              // @override


              userId() {
                return this.connection.userId();
              } // This is mostly just called within this file, but Meteor.loginWithPassword
              // also uses it to make loggingIn() be true during the beginPasswordExchange
              // method call too.


              _setLoggingIn(x) {
                this._loggingIn.set(x);
              }
              /**
               * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.
               * @locus Client
               */

              loggingIn() {
                return this._loggingIn.get();
              }
              /**
               * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.
               * @locus Client
               */

              loggingOut() {
                return this._loggingOut.get();
              }
              /**
               * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using
               `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.
               * @locus Client
               * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.
               Should be the OAuth provider name accordingly.
               * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.
               */

              registerClientLoginFunction(funcName, func) {
                if (this._loginFuncs[funcName]) {
                  throw new Error("".concat(funcName, " has been defined already"));
                }

                this._loginFuncs[funcName] = func;
              }
              /**
               * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining
               arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains
               all arguments for the login function.
               * @locus Client
               * @param {String} funcName The name of the login function you wanted to call.
               */

              callLoginFunction(funcName) {
                if (!this._loginFuncs[funcName]) {
                  throw new Error("".concat(funcName, " was not defined"));
                }

                for (var _len = arguments.length, funcArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  funcArgs[_key - 1] = arguments[_key];
                }

                return this._loginFuncs[funcName].apply(this, funcArgs);
              }
              /**
               * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login
               function.
               * @locus Client
               * @param {String} funcName The name of the login function you wanted to call.
               * @param {Array} funcArgs The `arguments` for the login function.
               */

              applyLoginFunction(funcName, funcArgs) {
                if (!this._loginFuncs[funcName]) {
                  throw new Error("".concat(funcName, " was not defined"));
                }

                return this._loginFuncs[funcName].apply(this, funcArgs);
              }
              /**
               * @summary Log the user out.
               * @locus Client
               * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
               */

              logout(callback) {
                this._loggingOut.set(true);

                this.connection.apply('logout', [], {
                  wait: true
                }, (error, result) => {
                  this._loggingOut.set(false);

                  if (error) {
                    callback && callback(error);
                  } else {
                    this.makeClientLoggedOut();
                    callback && callback();
                  }
                });
              }
              /**
               * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.
               * @locus Client
               * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
               */

              logoutOtherClients(callback) {
                // We need to make two method calls: one to replace our current token,
                // and another to remove all tokens except the current one. We want to
                // call these two methods one after the other, without any other
                // methods running between them. For example, we don't want `logout`
                // to be called in between our two method calls (otherwise the second
                // method call would return an error). Another example: we don't want
                // logout to be called before the callback for `getNewToken`;
                // otherwise we would momentarily log the user out and then write a
                // new token to localStorage.
                //
                // To accomplish this, we make both calls as wait methods, and queue
                // them one after the other, without spinning off the event loop in
                // between. Even though we queue `removeOtherTokens` before
                // `getNewToken`, we won't actually send the `removeOtherTokens` call
                // until the `getNewToken` callback has finished running, because they
                // are both wait methods.
                this.connection.apply('getNewToken', [], {
                  wait: true
                }, (err, result) => {
                  if (!err) {
                    this._storeLoginToken(this.userId(), result.token, result.tokenExpires);
                  }
                });
                this.connection.apply('removeOtherTokens', [], {
                  wait: true
                }, err => callback && callback(err));
              } ///
              /// LOGIN METHODS
              ///
              // Call a login method on the server.
              //
              // A login method is a method which on success calls `this.setUserId(id)` and
              // `Accounts._setLoginToken` on the server and returns an object with fields
              // 'id' (containing the user id), 'token' (containing a resume token), and
              // optionally `tokenExpires`.
              //
              // This function takes care of:
              //   - Updating the Meteor.loggingIn() reactive data source
              //   - Calling the method in 'wait' mode
              //   - On success, saving the resume token to localStorage
              //   - On success, calling Accounts.connection.setUserId()
              //   - Setting up an onReconnect handler which logs in with
              //     the resume token
              //
              // Options:
              // - methodName: The method to call (default 'login')
              // - methodArguments: The arguments for the method
              // - validateResult: If provided, will be called with the result of the
              //                 method. If it throws, the client will not be logged in (and
              //                 its error will be passed to the callback).
              // - userCallback: Will be called with no arguments once the user is fully
              //                 logged in, or with the error on error.
              //


              callLoginMethod(options) {
                options = _objectSpread({
                  methodName: 'login',
                  methodArguments: [{}],
                  _suppressLoggingIn: false
                }, options); // Set defaults for callback arguments to no-op functions; make sure we
                // override falsey values too.

                ['validateResult', 'userCallback'].forEach(f => {
                  if (!options[f]) options[f] = () => null;
                }); // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.

                let called;

                const loginCallbacks = _ref => {
                  let {
                    error,
                    loginDetails
                  } = _ref;

                  if (!called) {
                    called = true;

                    if (!error) {
                      this._onLoginHook.each(callback => {
                        callback(loginDetails);
                        return true;
                      });
                    } else {
                      this._onLoginFailureHook.each(callback => {
                        callback({
                          error
                        });
                        return true;
                      });
                    }

                    options.userCallback(error, loginDetails);
                  }
                };

                let reconnected = false; // We want to set up onReconnect as soon as we get a result token back from
                // the server, without having to wait for subscriptions to rerun. This is
                // because if we disconnect and reconnect between getting the result and
                // getting the results of subscription rerun, we WILL NOT re-send this
                // method (because we never re-send methods whose results we've received)
                // but we WILL call loggedInAndDataReadyCallback at "reconnect quiesce"
                // time. This will lead to makeClientLoggedIn(result.id) even though we
                // haven't actually sent a login method!
                //
                // But by making sure that we send this "resume" login in that case (and
                // calling makeClientLoggedOut if it fails), we'll end up with an accurate
                // client-side userId. (It's important that livedata_connection guarantees
                // that the "reconnect quiesce"-time call to loggedInAndDataReadyCallback
                // will occur before the callback from the resume login call.)

                const onResultReceived = (err, result) => {
                  if (err || !result || !result.token) {// Leave onReconnect alone if there was an error, so that if the user was
                    // already logged in they will still get logged in on reconnect.
                    // See issue #4970.
                  } else {
                    // First clear out any previously set Acccounts login onReconnect
                    // callback (to make sure we don't keep piling up duplicate callbacks,
                    // which would then all be triggered when reconnecting).
                    if (this._reconnectStopper) {
                      this._reconnectStopper.stop();
                    }

                    this._reconnectStopper = DDP.onReconnect(conn => {
                      if (conn != this.connection) {
                        return;
                      }

                      reconnected = true; // If our token was updated in storage, use the latest one.

                      const storedToken = this._storedLoginToken();

                      if (storedToken) {
                        result = {
                          token: storedToken,
                          tokenExpires: this._storedLoginTokenExpires()
                        };
                      }

                      if (!result.tokenExpires) result.tokenExpires = this._tokenExpiration(new Date());

                      if (this._tokenExpiresSoon(result.tokenExpires)) {
                        this.makeClientLoggedOut();
                      } else {
                        this.callLoginMethod({
                          methodArguments: [{
                            resume: result.token
                          }],
                          // Reconnect quiescence ensures that the user doesn't see an
                          // intermediate state before the login method finishes. So we don't
                          // need to show a logging-in animation.
                          _suppressLoggingIn: true,
                          userCallback: (error, loginDetails) => {
                            const storedTokenNow = this._storedLoginToken();

                            if (error) {
                              // If we had a login error AND the current stored token is the
                              // one that we tried to log in with, then declare ourselves
                              // logged out. If there's a token in storage but it's not the
                              // token that we tried to log in with, we don't know anything
                              // about whether that token is valid or not, so do nothing. The
                              // periodic localStorage poll will decide if we are logged in or
                              // out with this token, if it hasn't already. Of course, even
                              // with this check, another tab could insert a new valid token
                              // immediately before we clear localStorage here, which would
                              // lead to both tabs being logged out, but by checking the token
                              // in storage right now we hope to make that unlikely to happen.
                              //
                              // If there is no token in storage right now, we don't have to
                              // do anything; whatever code removed the token from storage was
                              // responsible for calling `makeClientLoggedOut()`, or the
                              // periodic localStorage poll will call `makeClientLoggedOut`
                              // eventually if another tab wiped the token from storage.
                              if (storedTokenNow && storedTokenNow === result.token) {
                                this.makeClientLoggedOut();
                              }
                            } // Possibly a weird callback to call, but better than nothing if
                            // there is a reconnect between "login result received" and "data
                            // ready".


                            loginCallbacks({
                              error,
                              loginDetails
                            });
                          }
                        });
                      }
                    });
                  }
                }; // This callback is called once the local cache of the current-user
                // subscription (and all subscriptions, in fact) are guaranteed to be up to
                // date.


                const loggedInAndDataReadyCallback = (error, result) => {
                  // If the login method returns its result but the connection is lost
                  // before the data is in the local cache, it'll set an onReconnect (see
                  // above). The onReconnect will try to log in using the token, and *it*
                  // will call userCallback via its own version of this
                  // loggedInAndDataReadyCallback. So we don't have to do anything here.
                  if (reconnected) return; // Note that we need to call this even if _suppressLoggingIn is true,
                  // because it could be matching a _setLoggingIn(true) from a
                  // half-completed pre-reconnect login method.

                  this._setLoggingIn(false);

                  if (error || !result) {
                    error = error || new Error("No result from call to ".concat(options.methodName));
                    loginCallbacks({
                      error
                    });
                    return;
                  }

                  try {
                    options.validateResult(result);
                  } catch (e) {
                    loginCallbacks({
                      error: e
                    });
                    return;
                  } // Make the client logged in. (The user data should already be loaded!)


                  this.makeClientLoggedIn(result.id, result.token, result.tokenExpires);
                  loginCallbacks({
                    loginDetails: {
                      type: result.type
                    }
                  });
                };

                if (!options._suppressLoggingIn) {
                  this._setLoggingIn(true);
                }

                this.connection.apply(options.methodName, options.methodArguments, {
                  wait: true,
                  onResultReceived: onResultReceived
                }, loggedInAndDataReadyCallback);
              }

              makeClientLoggedOut() {
                // Ensure client was successfully logged in before running logout hooks.
                if (this.connection._userId) {
                  this._onLogoutHook.each(callback => {
                    callback();
                    return true;
                  });
                }

                this._unstoreLoginToken();

                this.connection.setUserId(null);
                this._reconnectStopper && this._reconnectStopper.stop();
              }

              makeClientLoggedIn(userId, token, tokenExpires) {
                this._storeLoginToken(userId, token, tokenExpires);

                this.connection.setUserId(userId);
              } ///
              /// LOGIN SERVICES
              ///
              // A reactive function returning whether the loginServiceConfiguration
              // subscription is ready. Used by accounts-ui to hide the login button
              // until we have all the configuration loaded
              //


              loginServicesConfigured() {
                return this._loginServicesHandle.ready();
              }

              // Some login services such as the redirect login flow or the resume
              // login handler can log the user in at page load time.  The
              // Meteor.loginWithX functions have a callback argument, but the
              // callback function instance won't be in memory any longer if the
              // page was reloaded.  The `onPageLoadLogin` function allows a
              // callback to be registered for the case where the login was
              // initiated in a previous VM, and we now have the result of the login
              // attempt in a new VM.
              // Register a callback to be called if we have information about a
              // login attempt at page load time.  Call the callback immediately if
              // we already have the page load login attempt info, otherwise stash
              // the callback to be called if and when we do get the attempt info.
              //
              onPageLoadLogin(f) {
                if (this._pageLoadLoginAttemptInfo) {
                  f(this._pageLoadLoginAttemptInfo);
                } else {
                  this._pageLoadLoginCallbacks.push(f);
                }
              }

              // Receive the information about the login attempt at page load time.
              // Call registered callbacks, and also record the info in case
              // someone's callback hasn't been registered yet.
              //
              _pageLoadLogin(attemptInfo) {
                if (this._pageLoadLoginAttemptInfo) {
                  Meteor._debug('Ignoring unexpected duplicate page load login attempt info');

                  return;
                }

                this._pageLoadLoginCallbacks.forEach(callback => callback(attemptInfo));

                this._pageLoadLoginCallbacks = [];
                this._pageLoadLoginAttemptInfo = attemptInfo;
              } // _startupCallback executes on onLogin callbacks
              // at registration time if already logged in
              // this can happen when new AccountsClient is created
              // before callbacks are registered see #10157


              _startupCallback(callback) {
                // Are we already logged in?
                if (this.connection._userId) {
                  // If already logged in before handler is registered, it's safe to
                  // assume type is a 'resume', so we execute the callback at the end
                  // of the queue so that Meteor.startup can complete before any
                  // embedded onLogin callbacks would execute.
                  Meteor.setTimeout(() => callback({
                    type: 'resume'
                  }), 0);
                }
              } ///
              /// LOGIN TOKENS
              ///
              // These methods deal with storing a login token and user id in the
              // browser's localStorage facility. It polls local storage every few
              // seconds to synchronize login state between multiple tabs in the same
              // browser.


              loginWithToken(token, callback) {
                this.callLoginMethod({
                  methodArguments: [{
                    resume: token
                  }],
                  userCallback: callback
                });
              }

              // Semi-internal API. Call this function to re-enable auto login after
              // if it was disabled at startup.
              _enableAutoLogin() {
                this._autoLoginEnabled = true;

                this._pollStoredLoginToken();
              }

              ///
              /// STORING
              ///
              // Call this from the top level of the test file for any test that does
              // logging in and out, to protect multiple tabs running the same tests
              // simultaneously from interfering with each others' localStorage.
              _isolateLoginTokenForTest() {
                this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();
                this.USER_ID_KEY = this.USER_ID_KEY + Random.id();
              }

              _storeLoginToken(userId, token, tokenExpires) {
                Meteor._localStorage.setItem(this.USER_ID_KEY, userId);

                Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);

                if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());

                Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires); // to ensure that the localstorage poller doesn't end up trying to
                // connect a second time


                this._lastLoginTokenWhenPolled = token;
              }

              _unstoreLoginToken() {
                Meteor._localStorage.removeItem(this.USER_ID_KEY);

                Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);

                Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY); // to ensure that the localstorage poller doesn't end up trying to
                // connect a second time


                this._lastLoginTokenWhenPolled = null;
              }

              // This is private, but it is exported for now because it is used by a
              // test in accounts-password.
              _storedLoginToken() {
                return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);
              }

              _storedLoginTokenExpires() {
                return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);
              }

              _storedUserId() {
                return Meteor._localStorage.getItem(this.USER_ID_KEY);
              }

              _unstoreLoginTokenIfExpiresSoon() {
                const tokenExpires = this._storedLoginTokenExpires();

                if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {
                  this._unstoreLoginToken();
                }
              }

              ///
              /// AUTO-LOGIN
              ///
              _initLocalStorage() {
                // Key names to use in localStorage
                this.LOGIN_TOKEN_KEY = "Meteor.loginToken";
                this.LOGIN_TOKEN_EXPIRES_KEY = "Meteor.loginTokenExpires";
                this.USER_ID_KEY = "Meteor.userId";
                const rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;

                if (rootUrlPathPrefix || this.connection !== Meteor.connection) {
                  // We want to keep using the same keys for existing apps that do not
                  // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have
                  // to log in again after an app updates to a version of Meteor that
                  // contains this code, but it's generally preferable to namespace the
                  // keys so that connections from distinct apps to distinct DDP URLs
                  // will be distinct in Meteor._localStorage.
                  let namespace = ":".concat(this.connection._stream.rawUrl);

                  if (rootUrlPathPrefix) {
                    namespace += ":".concat(rootUrlPathPrefix);
                  }

                  this.LOGIN_TOKEN_KEY += namespace;
                  this.LOGIN_TOKEN_EXPIRES_KEY += namespace;
                  this.USER_ID_KEY += namespace;
                }

                let token;

                if (this._autoLoginEnabled) {
                  // Immediately try to log in via local storage, so that any DDP
                  // messages are sent after we have established our user account
                  this._unstoreLoginTokenIfExpiresSoon();

                  token = this._storedLoginToken();

                  if (token) {
                    // On startup, optimistically present us as logged in while the
                    // request is in flight. This reduces page flicker on startup.
                    const userId = this._storedUserId();

                    userId && this.connection.setUserId(userId);
                    this.loginWithToken(token, err => {
                      if (err) {
                        Meteor._debug("Error logging in with token: ".concat(err));

                        this.makeClientLoggedOut();
                      }

                      this._pageLoadLogin({
                        type: "resume",
                        allowed: !err,
                        error: err,
                        methodName: "login",
                        // XXX This is duplicate code with loginWithToken, but
                        // loginWithToken can also be called at other times besides
                        // page load.
                        methodArguments: [{
                          resume: token
                        }]
                      });
                    });
                  }
                } // Poll local storage every 3 seconds to login if someone logged in in
                // another tab


                this._lastLoginTokenWhenPolled = token;

                if (this._pollIntervalTimer) {
                  // Unlikely that _initLocalStorage will be called more than once for
                  // the same AccountsClient instance, but just in case...
                  clearInterval(this._pollIntervalTimer);
                }

                this._pollIntervalTimer = setInterval(() => {
                  this._pollStoredLoginToken();
                }, 3000);
              }

              _pollStoredLoginToken() {
                if (!this._autoLoginEnabled) {
                  return;
                }

                const currentLoginToken = this._storedLoginToken(); // != instead of !== just to make sure undefined and null are treated the same


                if (this._lastLoginTokenWhenPolled != currentLoginToken) {
                  if (currentLoginToken) {
                    this.loginWithToken(currentLoginToken, err => {
                      if (err) {
                        this.makeClientLoggedOut();
                      }
                    });
                  } else {
                    this.logout();
                  }
                }

                this._lastLoginTokenWhenPolled = currentLoginToken;
              }

              ///
              /// URLS
              ///
              _initUrlMatching() {
                // By default, allow the autologin process to happen.
                this._autoLoginEnabled = true; // We only support one callback per URL.

                this._accountsCallbacks = {}; // Try to match the saved value of window.location.hash.

                this._attemptToMatchHash();
              }

              // Separate out this functionality for testing
              _attemptToMatchHash() {
                attemptToMatchHash(this, this.savedHash, defaultSuccessHandler);
              }

              /**
               * @summary Register a function to call when a reset password link is clicked
               * in an email sent by
               * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).
               * This function should be called in top-level code, not inside
               * `Meteor.startup()`.
               * @memberof! Accounts
               * @name onResetPasswordLink
               * @param  {Function} callback The function to call. It is given two arguments:
               *
               * 1. `token`: A password reset token that can be passed to
               * [`Accounts.resetPassword`](#accounts_resetpassword).
               * 2. `done`: A function to call when the password reset UI flow is complete. The normal
               * login process is suspended until this function is called, so that the
               * password for user A can be reset even if user B was logged in.
               * @locus Client
               */
              onResetPasswordLink(callback) {
                if (this._accountsCallbacks["reset-password"]) {
                  Meteor._debug("Accounts.onResetPasswordLink was called more than once. " + "Only one callback added will be executed.");
                }

                this._accountsCallbacks["reset-password"] = callback;
              }

              /**
               * @summary Register a function to call when an email verification link is
               * clicked in an email sent by
               * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).
               * This function should be called in top-level code, not inside
               * `Meteor.startup()`.
               * @memberof! Accounts
               * @name onEmailVerificationLink
               * @param  {Function} callback The function to call. It is given two arguments:
               *
               * 1. `token`: An email verification token that can be passed to
               * [`Accounts.verifyEmail`](#accounts_verifyemail).
               * 2. `done`: A function to call when the email verification UI flow is complete.
               * The normal login process is suspended until this function is called, so
               * that the user can be notified that they are verifying their email before
               * being logged in.
               * @locus Client
               */
              onEmailVerificationLink(callback) {
                if (this._accountsCallbacks["verify-email"]) {
                  Meteor._debug("Accounts.onEmailVerificationLink was called more than once. " + "Only one callback added will be executed.");
                }

                this._accountsCallbacks["verify-email"] = callback;
              }

              /**
               * @summary Register a function to call when an account enrollment link is
               * clicked in an email sent by
               * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).
               * This function should be called in top-level code, not inside
               * `Meteor.startup()`.
               * @memberof! Accounts
               * @name onEnrollmentLink
               * @param  {Function} callback The function to call. It is given two arguments:
               *
               * 1. `token`: A password reset token that can be passed to
               * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly
               * enrolled account a password.
               * 2. `done`: A function to call when the enrollment UI flow is complete.
               * The normal login process is suspended until this function is called, so that
               * user A can be enrolled even if user B was logged in.
               * @locus Client
               */
              onEnrollmentLink(callback) {
                if (this._accountsCallbacks["enroll-account"]) {
                  Meteor._debug("Accounts.onEnrollmentLink was called more than once. " + "Only one callback added will be executed.");
                }

                this._accountsCallbacks["enroll-account"] = callback;
              }

            }

            ;
            /**
             * @summary True if a login method (such as `Meteor.loginWithPassword`, 
             * `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in 
             * progress. A reactive data source.
             * @locus Client
             * @importFromPackage meteor
             */

            Meteor.loggingIn = () => Accounts.loggingIn();
            /**
             * @summary True if a logout method (such as `Meteor.logout`) is currently in 
             * progress. A reactive data source.
             * @locus Client
             * @importFromPackage meteor
             */

            Meteor.loggingOut = () => Accounts.loggingOut();
            /**
             * @summary Log the user out.
             * @locus Client
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage meteor
             */

            Meteor.logout = callback => Accounts.logout(callback);
            /**
             * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.
             * @locus Client
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage meteor
             */

            Meteor.logoutOtherClients = callback => Accounts.logoutOtherClients(callback);
            /**
             * @summary Login with a Meteor access token.
             * @locus Client
             * @param {Object} [token] Local storage token for use with login across 
             * multiple tabs in the same browser.
             * @param {Function} [callback] Optional callback. Called with no arguments on
             * success.
             * @importFromPackage meteor
             */

            Meteor.loginWithToken = (token, callback) => Accounts.loginWithToken(token, callback); ///
            /// HANDLEBARS HELPERS
            ///
            // If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}
            // global helpers.


            if (Package.blaze) {
              const {
                Template
              } = Package.blaze.Blaze;
              /**
               * @global
               * @name  currentUser
               * @isHelper true
               * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.
               */

              Template.registerHelper('currentUser', () => Meteor.user());
              /**
               * @global
               * @name  loggingIn
               * @isHelper true
               * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).
               */

              Template.registerHelper('loggingIn', () => Meteor.loggingIn());
              /**
               * @global
               * @name  loggingOut
               * @isHelper true
               * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).
               */

              Template.registerHelper('loggingOut', () => Meteor.loggingOut());
              /**
               * @global
               * @name  loggingInOrOut
               * @isHelper true
               * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).
               */

              Template.registerHelper('loggingInOrOut', () => Meteor.loggingIn() || Meteor.loggingOut());
            }

            const defaultSuccessHandler = function (token, urlPart) {
              // put login in a suspended state to wait for the interaction to finish
              this._autoLoginEnabled = false; // wait for other packages to register callbacks

              Meteor.startup(() => {
                // if a callback has been registered for this kind of token, call it
                if (this._accountsCallbacks[urlPart]) {
                  this._accountsCallbacks[urlPart](token, () => this._enableAutoLogin());
                }
              });
            }; // Note that both arguments are optional and are currently only passed by
            // accounts_url_tests.js.


            const attemptToMatchHash = (accounts, hash, success) => {
              // All of the special hash URLs we support for accounts interactions
              ["reset-password", "verify-email", "enroll-account"].forEach(urlPart => {
                let token;
                const tokenRegex = new RegExp("^\\#\\/".concat(urlPart, "\\/(.*)$"));
                const match = hash.match(tokenRegex);

                if (match) {
                  token = match[1]; // XXX COMPAT WITH 0.9.3

                  if (urlPart === "reset-password") {
                    accounts._resetPasswordToken = token;
                  } else if (urlPart === "verify-email") {
                    accounts._verifyEmailToken = token;
                  } else if (urlPart === "enroll-account") {
                    accounts._enrollAccountToken = token;
                  }
                } else {
                  return;
                } // If no handlers match the hash, then maybe it's meant to be consumed
                // by some entirely different code, so we only clear it the first time
                // a handler successfully matches. Note that later handlers reuse the
                // savedHash, so clearing window.location.hash here will not interfere
                // with their needs.


                window.location.hash = ""; // Do some stuff with the token we matched

                success.call(accounts, token, urlPart);
              });
            }; // Export for testing


            const AccountsTest = {
              attemptToMatchHash: (hash, success) => attemptToMatchHash(Accounts, hash, success)
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "accounts_common.js": function module(_require4, _exports4, _module3) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/accounts-base/accounts_common.js                                                                          //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module3.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            _module3.export({
              AccountsCommon: () => AccountsCommon,
              EXPIRE_TOKENS_INTERVAL_MS: () => EXPIRE_TOKENS_INTERVAL_MS,
              CONNECTION_CLOSE_DELAY_MS: () => CONNECTION_CLOSE_DELAY_MS
            });

            class AccountsCommon {
              constructor(options) {
                // Currently this is read directly by packages like accounts-password
                // and accounts-ui-unstyled.
                this._options = {}; // Note that setting this.connection = null causes this.users to be a
                // LocalCollection, which is not what we want.

                this.connection = undefined;

                this._initConnection(options || {}); // There is an allow call in accounts_server.js that restricts writes to
                // this collection.


                this.users = new Mongo.Collection("users", {
                  _preventAutopublish: true,
                  connection: this.connection
                }); // Callback exceptions are printed with Meteor._debug and ignored.

                this._onLoginHook = new Hook({
                  bindEnvironment: false,
                  debugPrintExceptions: "onLogin callback"
                });
                this._onLoginFailureHook = new Hook({
                  bindEnvironment: false,
                  debugPrintExceptions: "onLoginFailure callback"
                });
                this._onLogoutHook = new Hook({
                  bindEnvironment: false,
                  debugPrintExceptions: "onLogout callback"
                }); // Expose for testing.

                this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;
                this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS; // Thrown when the user cancels the login process (eg, closes an oauth
                // popup, declines retina scan, etc)

                const lceName = 'Accounts.LoginCancelledError';
                this.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {
                  this.message = description;
                });
                this.LoginCancelledError.prototype.name = lceName; // This is used to transmit specific subclass errors over the wire. We
                // should come up with a more generic way to do this (eg, with some sort of
                // symbolic error code rather than a number).

                this.LoginCancelledError.numericError = 0x8acdc2f; // loginServiceConfiguration and ConfigError are maintained for backwards compatibility

                Meteor.startup(() => {
                  const {
                    ServiceConfiguration
                  } = Package['service-configuration'];
                  this.loginServiceConfiguration = ServiceConfiguration.configurations;
                  this.ConfigError = ServiceConfiguration.ConfigError;
                });
              }
              /**
               * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.
               * @locus Anywhere
               */

              userId() {
                throw new Error("userId method not implemented");
              } // merge the defaultFieldSelector with an existing options object


              _addDefaultFieldSelector() {
                let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                // this will be the most common case for most people, so make it quick
                if (!this._options.defaultFieldSelector) return options; // if no field selector then just use defaultFieldSelector

                if (!options.fields) return _objectSpread({}, options, {
                  fields: this._options.defaultFieldSelector
                }); // if empty field selector then the full user object is explicitly requested, so obey

                const keys = Object.keys(options.fields);
                if (!keys.length) return options; // if the requested fields are +ve then ignore defaultFieldSelector
                // assume they are all either +ve or -ve because Mongo doesn't like mixed

                if (!!options.fields[keys[0]]) return options; // The requested fields are -ve.
                // If the defaultFieldSelector is +ve then use requested fields, otherwise merge them

                const keys2 = Object.keys(this._options.defaultFieldSelector);
                return this._options.defaultFieldSelector[keys2[0]] ? options : _objectSpread({}, options, {
                  fields: _objectSpread({}, options.fields, {}, this._options.defaultFieldSelector)
                });
              }
              /**
               * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.
               * @locus Anywhere
               * @param {Object} [options]
               * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.
               */

              user(options) {
                const userId = this.userId();
                return userId ? this.users.findOne(userId, this._addDefaultFieldSelector(options)) : null;
              } // Set up config for the accounts system. Call this on both the client
              // and the server.
              //
              // Note that this method gets overridden on AccountsServer.prototype, but
              // the overriding method calls the overridden method.
              //
              // XXX we should add some enforcement that this is called on both the
              // client and the server. Otherwise, a user can
              // 'forbidClientAccountCreation' only on the client and while it looks
              // like their app is secure, the server will still accept createUser
              // calls. https://github.com/meteor/meteor/issues/828
              //
              // @param options {Object} an object with fields:
              // - sendVerificationEmail {Boolean}
              //     Send email address verification emails to new users created from
              //     client signups.
              // - forbidClientAccountCreation {Boolean}
              //     Do not allow clients to create accounts directly.
              // - restrictCreationByEmailDomain {Function or String}
              //     Require created users to have an email matching the function or
              //     having the string as domain.
              // - loginExpirationInDays {Number}
              //     Number of days since login until a user is logged out (login token
              //     expires).
              // - passwordResetTokenExpirationInDays {Number}
              //     Number of days since password reset token creation until the
              //     token cannt be used any longer (password reset token expires).
              // - ambiguousErrorMessages {Boolean}
              //     Return ambiguous error messages from login failures to prevent
              //     user enumeration.
              // - bcryptRounds {Number}
              //     Allows override of number of bcrypt rounds (aka work factor) used
              //     to store passwords.

              /**
               * @summary Set global accounts options.
               * @locus Anywhere
               * @param {Object} options
               * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.
               * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the "Create account" link will not be available.
               * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.
               * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.
               * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.
               * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.
               * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.
               * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.
               * @param {MongoFieldSpecifier} options.defaultFieldSelector To exclude by default large custom fields from `Meteor.user()` and `Meteor.findUserBy...()` functions when called without a field selector, and all `onLogin`, `onLoginFailure` and `onLogout` callbacks.  Example: `Accounts.config({ defaultFieldSelector: { myBigArray: 0 }})`.
               */

              config(options) {
                // We don't want users to accidentally only call Accounts.config on the
                // client, where some of the options will have partial effects (eg removing
                // the "create account" button from accounts-ui if forbidClientAccountCreation
                // is set, or redirecting Google login to a specific-domain page) without
                // having their full effects.
                if (Meteor.isServer) {
                  __meteor_runtime_config__.accountsConfigCalled = true;
                } else if (!__meteor_runtime_config__.accountsConfigCalled) {
                  // XXX would be nice to "crash" the client and replace the UI with an error
                  // message, but there's no trivial way to do this.
                  Meteor._debug("Accounts.config was called on the client but not on the " + "server; some configuration options may not take effect.");
                } // We need to validate the oauthSecretKey option at the time
                // Accounts.config is called. We also deliberately don't store the
                // oauthSecretKey in Accounts._options.


                if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {
                  if (Meteor.isClient) {
                    throw new Error("The oauthSecretKey option may only be specified on the server");
                  }

                  if (!Package["oauth-encryption"]) {
                    throw new Error("The oauth-encryption package must be loaded to set oauthSecretKey");
                  }

                  Package["oauth-encryption"].OAuthEncryption.loadKey(options.oauthSecretKey);
                  options = _objectSpread({}, options);
                  delete options.oauthSecretKey;
                } // validate option keys


                const VALID_KEYS = ["sendVerificationEmail", "forbidClientAccountCreation", "passwordEnrollTokenExpirationInDays", "restrictCreationByEmailDomain", "loginExpirationInDays", "passwordResetTokenExpirationInDays", "ambiguousErrorMessages", "bcryptRounds", "defaultFieldSelector"];
                Object.keys(options).forEach(key => {
                  if (!VALID_KEYS.includes(key)) {
                    throw new Error("Accounts.config: Invalid key: ".concat(key));
                  }
                }); // set values in Accounts._options

                VALID_KEYS.forEach(key => {
                  if (key in options) {
                    if (key in this._options) {
                      throw new Error("Can't set `".concat(key, "` more than once"));
                    }

                    this._options[key] = options[key];
                  }
                });
              }
              /**
               * @summary Register a callback to be called after a login attempt succeeds.
               * @locus Anywhere
               * @param {Function} func The callback to be called when login is successful.
               *                        The callback receives a single object that
               *                        holds login details. This object contains the login
               *                        result type (password, resume, etc.) on both the
               *                        client and server. `onLogin` callbacks registered
               *                        on the server also receive extra data, such
               *                        as user details, connection information, etc.
               */

              onLogin(func) {
                let ret = this._onLoginHook.register(func); // call the just registered callback if already logged in


                this._startupCallback(ret.callback);

                return ret;
              }
              /**
               * @summary Register a callback to be called after a login attempt fails.
               * @locus Anywhere
               * @param {Function} func The callback to be called after the login has failed.
               */

              onLoginFailure(func) {
                return this._onLoginFailureHook.register(func);
              }
              /**
               * @summary Register a callback to be called after a logout attempt succeeds.
               * @locus Anywhere
               * @param {Function} func The callback to be called when logout is successful.
               */

              onLogout(func) {
                return this._onLogoutHook.register(func);
              }

              _initConnection(options) {
                if (!Meteor.isClient) {
                  return;
                } // The connection used by the Accounts system. This is the connection
                // that will get logged in by Meteor.login(), and this is the
                // connection whose login state will be reflected by Meteor.userId().
                //
                // It would be much preferable for this to be in accounts_client.js,
                // but it has to be here because it's needed to create the
                // Meteor.users collection.


                if (options.connection) {
                  this.connection = options.connection;
                } else if (options.ddpUrl) {
                  this.connection = DDP.connect(options.ddpUrl);
                } else if (typeof __meteor_runtime_config__ !== "undefined" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {
                  // Temporary, internal hook to allow the server to point the client
                  // to a different authentication server. This is for a very
                  // particular use case that comes up when implementing a oauth
                  // server. Unsupported and may go away at any point in time.
                  //
                  // We will eventually provide a general way to use account-base
                  // against any DDP connection, not just one special one.
                  this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);
                } else {
                  this.connection = Meteor.connection;
                }
              }

              _getTokenLifetimeMs() {
                // When loginExpirationInDays is set to null, we'll use a really high
                // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an
                // unexpiring token.
                const loginExpirationInDays = this._options.loginExpirationInDays === null ? LOGIN_UNEXPIRING_TOKEN_DAYS : this._options.loginExpirationInDays;
                return (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;
              }

              _getPasswordResetTokenLifetimeMs() {
                return (this._options.passwordResetTokenExpirationInDays || DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;
              }

              _getPasswordEnrollTokenLifetimeMs() {
                return (this._options.passwordEnrollTokenExpirationInDays || DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;
              }

              _tokenExpiration(when) {
                // We pass when through the Date constructor for backwards compatibility;
                // `when` used to be a number.
                return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());
              }

              _tokenExpiresSoon(when) {
                let minLifetimeMs = .1 * this._getTokenLifetimeMs();

                const minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;

                if (minLifetimeMs > minLifetimeCapMs) {
                  minLifetimeMs = minLifetimeCapMs;
                }

                return new Date() > new Date(when) - minLifetimeMs;
              } // No-op on the server, overridden on the client.


              _startupCallback(callback) {}

            }

            // Note that Accounts is defined separately in accounts_client.js and
            // accounts_server.js.

            /**
             * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.
             * @locus Anywhere but publish functions
             * @importFromPackage meteor
             */
            Meteor.userId = () => Accounts.userId();
            /**
             * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.
             * @locus Anywhere but publish functions
             * @importFromPackage meteor
             * @param {Object} [options]
             * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.
             */

            Meteor.user = options => Accounts.user(options); // how long (in days) until a login token expires


            const DEFAULT_LOGIN_EXPIRATION_DAYS = 90; // how long (in days) until reset password token expires

            const DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3; // how long (in days) until enrol password token expires

            const DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30; // Clients don't try to auto-login with a token that is going to expire within
            // .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.
            // Tries to avoid abrupt disconnects from expiring tokens.

            const MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour
            // how often (in milliseconds) we check for expired tokens

            const EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000;
            const CONNECTION_CLOSE_DELAY_MS = 10 * 1000;
            // A large number of expiration days (approximately 100 years worth) that is
            // used when creating unexpiring tokens.
            const LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/accounts-base/client_main.js");

  /* Exports */
  Package._define("accounts-base", _exports2, {
    Accounts: Accounts
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

	/* Imports */
	var Meteor = Package.meteor.Meteor;
	var global = Package.meteor.global;
	var meteorEnv = Package.meteor.meteorEnv;

	/* Package-scope variables */
	var SHA256;

	(function () {

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//                                                                                                            //
		// packages/sha/sha256.js                                                                                     //
		//                                                                                                            //
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//
		/// METEOR WRAPPER
		//
		SHA256 = function () {

			/**
   *
   *  Secure Hash Algorithm (SHA256)
   *  http://www.webtoolkit.info/javascript-sha256.html
   *  http://anmar.eu.org/projects/jssha2/
   *
   *  Original code by Angel Marin, Paul Johnston.
   *
   **/

			function SHA256(s) {

				var chrsz = 8;
				var hexcase = 0;

				function safe_add(x, y) {
					var lsw = (x & 0xFFFF) + (y & 0xFFFF);
					var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
					return msw << 16 | lsw & 0xFFFF;
				}

				function S(X, n) {
					return X >>> n | X << 32 - n;
				}
				function R(X, n) {
					return X >>> n;
				}
				function Ch(x, y, z) {
					return x & y ^ ~x & z;
				}
				function Maj(x, y, z) {
					return x & y ^ x & z ^ y & z;
				}
				function Sigma0256(x) {
					return S(x, 2) ^ S(x, 13) ^ S(x, 22);
				}
				function Sigma1256(x) {
					return S(x, 6) ^ S(x, 11) ^ S(x, 25);
				}
				function Gamma0256(x) {
					return S(x, 7) ^ S(x, 18) ^ R(x, 3);
				}
				function Gamma1256(x) {
					return S(x, 17) ^ S(x, 19) ^ R(x, 10);
				}

				function core_sha256(m, l) {
					var K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2);
					var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);
					var W = new Array(64);
					var a, b, c, d, e, f, g, h, i, j;
					var T1, T2;

					m[l >> 5] |= 0x80 << 24 - l % 32;
					m[(l + 64 >> 9 << 4) + 15] = l;

					for (var i = 0; i < m.length; i += 16) {
						a = HASH[0];
						b = HASH[1];
						c = HASH[2];
						d = HASH[3];
						e = HASH[4];
						f = HASH[5];
						g = HASH[6];
						h = HASH[7];

						for (var j = 0; j < 64; j++) {
							if (j < 16) W[j] = m[j + i];else W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);

							T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);
							T2 = safe_add(Sigma0256(a), Maj(a, b, c));

							h = g;
							g = f;
							f = e;
							e = safe_add(d, T1);
							d = c;
							c = b;
							b = a;
							a = safe_add(T1, T2);
						}

						HASH[0] = safe_add(a, HASH[0]);
						HASH[1] = safe_add(b, HASH[1]);
						HASH[2] = safe_add(c, HASH[2]);
						HASH[3] = safe_add(d, HASH[3]);
						HASH[4] = safe_add(e, HASH[4]);
						HASH[5] = safe_add(f, HASH[5]);
						HASH[6] = safe_add(g, HASH[6]);
						HASH[7] = safe_add(h, HASH[7]);
					}
					return HASH;
				}

				function str2binb(str) {
					var bin = Array();
					var mask = (1 << chrsz) - 1;
					for (var i = 0; i < str.length * chrsz; i += chrsz) {
						bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << 24 - i % 32;
					}
					return bin;
				}

				function Utf8Encode(string) {
					// METEOR change:
					// The webtoolkit.info version of this code added this
					// Utf8Encode function (which does seem necessary for dealing
					// with arbitrary Unicode), but the following line seems
					// problematic:
					//
					// string = string.replace(/\r\n/g,"\n");
					var utftext = "";

					for (var n = 0; n < string.length; n++) {

						var c = string.charCodeAt(n);

						if (c < 128) {
							utftext += String.fromCharCode(c);
						} else if (c > 127 && c < 2048) {
							utftext += String.fromCharCode(c >> 6 | 192);
							utftext += String.fromCharCode(c & 63 | 128);
						} else {
							utftext += String.fromCharCode(c >> 12 | 224);
							utftext += String.fromCharCode(c >> 6 & 63 | 128);
							utftext += String.fromCharCode(c & 63 | 128);
						}
					}

					return utftext;
				}

				function binb2hex(binarray) {
					var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
					var str = "";
					for (var i = 0; i < binarray.length * 4; i++) {
						str += hex_tab.charAt(binarray[i >> 2] >> (3 - i % 4) * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> (3 - i % 4) * 8 & 0xF);
					}
					return str;
				}

				s = Utf8Encode(s);
				return binb2hex(core_sha256(str2binb(s), s.length * chrsz));
			}

			/// METEOR WRAPPER
			return SHA256;
		}();

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}).call(this);

	/* Exports */
	Package._define("sha", {
		SHA256: SHA256
	});
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Random = Package.random.Random;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var SHA256 = Package.sha.SHA256;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var BigInteger, SRP;

  var _require = meteorInstall({ "node_modules": { "meteor": { "srp": { "biginteger.js": function _module() {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/srp/biginteger.js                                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            /// METEOR WRAPPER
            BigInteger = function () {
              /// BEGIN jsbn.js

              /*
               * Copyright (c) 2003-2005  Tom Wu
               * All Rights Reserved.
               *
               * Permission is hereby granted, free of charge, to any person obtaining
               * a copy of this software and associated documentation files (the
               * "Software"), to deal in the Software without restriction, including
               * without limitation the rights to use, copy, modify, merge, publish,
               * distribute, sublicense, and/or sell copies of the Software, and to
               * permit persons to whom the Software is furnished to do so, subject to
               * the following conditions:
               *
               * The above copyright notice and this permission notice shall be
               * included in all copies or substantial portions of the Software.
               *
               * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
               * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
               * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
               *
               * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
               * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
               * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
               * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
               * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
               *
               * In addition, the following condition applies:
               *
               * All redistributions must retain an intact copy of this copyright notice
               * and disclaimer.
               */
              // Basic JavaScript BN library - subset useful for RSA encryption.
              // Bits per digit
              var dbits; // JavaScript engine analysis

              var canary = 0xdeadbeefcafe;
              var j_lm = (canary & 0xffffff) == 0xefcafe; // (public) Constructor

              function BigInteger(a, b, c) {
                if (a != null) if ("number" == typeof a) this.fromNumber(a, b, c);else if (b == null && "string" != typeof a) this.fromString(a, 256);else this.fromString(a, b);
              } // return new, unset BigInteger


              function nbi() {
                return new BigInteger(null);
              } // am: Compute w_j += (x*this_i), propagate carries,
              // c is initial carry, returns final carry.
              // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
              // We need to select the fastest one that works in this environment.
              // am1: use a single mult and divide to get the high bits,
              // max digit bits should be 26 because
              // max internal value = 2*dvalue^2-2*dvalue (< 2^53)


              function am1(i, x, w, j, c, n) {
                while (--n >= 0) {
                  var v = x * this[i++] + w[j] + c;
                  c = Math.floor(v / 0x4000000);
                  w[j++] = v & 0x3ffffff;
                }

                return c;
              } // am2 avoids a big mult-and-extract completely.
              // Max digit bits should be <= 30 because we do bitwise ops
              // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)


              function am2(i, x, w, j, c, n) {
                var xl = x & 0x7fff,
                    xh = x >> 15;

                while (--n >= 0) {
                  var l = this[i] & 0x7fff;
                  var h = this[i++] >> 15;
                  var m = xh * l + h * xl;
                  l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
                  c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
                  w[j++] = l & 0x3fffffff;
                }

                return c;
              } // Alternately, set max digit bits to 28 since some
              // browsers slow down when dealing with 32-bit numbers.


              function am3(i, x, w, j, c, n) {
                var xl = x & 0x3fff,
                    xh = x >> 14;

                while (--n >= 0) {
                  var l = this[i] & 0x3fff;
                  var h = this[i++] >> 14;
                  var m = xh * l + h * xl;
                  l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
                  c = (l >> 28) + (m >> 14) + xh * h;
                  w[j++] = l & 0xfffffff;
                }

                return c;
              }
              /* XXX METEOR XXX
              if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
                BigInteger.prototype.am = am2;
                dbits = 30;
              }
              else if(j_lm && (navigator.appName != "Netscape")) {
                BigInteger.prototype.am = am1;
                dbits = 26;
              }
              else 
              */

              {
                // Mozilla/Netscape seems to prefer am3
                BigInteger.prototype.am = am3;
                dbits = 28;
              }
              BigInteger.prototype.DB = dbits;
              BigInteger.prototype.DM = (1 << dbits) - 1;
              BigInteger.prototype.DV = 1 << dbits;
              var BI_FP = 52;
              BigInteger.prototype.FV = Math.pow(2, BI_FP);
              BigInteger.prototype.F1 = BI_FP - dbits;
              BigInteger.prototype.F2 = 2 * dbits - BI_FP; // Digit conversions

              var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
              var BI_RC = new Array();
              var rr, vv;
              rr = "0".charCodeAt(0);

              for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;

              rr = "a".charCodeAt(0);

              for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

              rr = "A".charCodeAt(0);

              for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

              function int2char(n) {
                return BI_RM.charAt(n);
              }

              function intAt(s, i) {
                var c = BI_RC[s.charCodeAt(i)];
                return c == null ? -1 : c;
              } // (protected) copy this to r


              function bnpCopyTo(r) {
                for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];

                r.t = this.t;
                r.s = this.s;
              } // (protected) set from integer value x, -DV <= x < DV


              function bnpFromInt(x) {
                this.t = 1;
                this.s = x < 0 ? -1 : 0;
                if (x > 0) this[0] = x;else if (x < -1) this[0] = x + DV;else this.t = 0;
              } // return bigint initialized to value


              function nbv(i) {
                var r = nbi();
                r.fromInt(i);
                return r;
              } // (protected) set from string and radix


              function bnpFromString(s, b) {
                var k;
                if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 256) k = 8; // byte array
                else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else {
                    this.fromRadix(s, b);
                    return;
                  }
                this.t = 0;
                this.s = 0;
                var i = s.length,
                    mi = false,
                    sh = 0;

                while (--i >= 0) {
                  var x = k == 8 ? s[i] & 0xff : intAt(s, i);

                  if (x < 0) {
                    if (s.charAt(i) == "-") mi = true;
                    continue;
                  }

                  mi = false;
                  if (sh == 0) this[this.t++] = x;else if (sh + k > this.DB) {
                    this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
                    this[this.t++] = x >> this.DB - sh;
                  } else this[this.t - 1] |= x << sh;
                  sh += k;
                  if (sh >= this.DB) sh -= this.DB;
                }

                if (k == 8 && (s[0] & 0x80) != 0) {
                  this.s = -1;
                  if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
                }

                this.clamp();
                if (mi) BigInteger.ZERO.subTo(this, this);
              } // (protected) clamp off excess high words


              function bnpClamp() {
                var c = this.s & this.DM;

                while (this.t > 0 && this[this.t - 1] == c) --this.t;
              } // (public) return string representation in given radix


              function bnToString(b) {
                if (this.s < 0) return "-" + this.negate().toString(b);
                var k;
                if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else return this.toRadix(b);
                var km = (1 << k) - 1,
                    d,
                    m = false,
                    r = "",
                    i = this.t;
                var p = this.DB - i * this.DB % k;

                if (i-- > 0) {
                  if (p < this.DB && (d = this[i] >> p) > 0) {
                    m = true;
                    r = int2char(d);
                  }

                  while (i >= 0) {
                    if (p < k) {
                      d = (this[i] & (1 << p) - 1) << k - p;
                      d |= this[--i] >> (p += this.DB - k);
                    } else {
                      d = this[i] >> (p -= k) & km;

                      if (p <= 0) {
                        p += this.DB;
                        --i;
                      }
                    }

                    if (d > 0) m = true;
                    if (m) r += int2char(d);
                  }
                }

                return m ? r : "0";
              } // (public) -this


              function bnNegate() {
                var r = nbi();
                BigInteger.ZERO.subTo(this, r);
                return r;
              } // (public) |this|


              function bnAbs() {
                return this.s < 0 ? this.negate() : this;
              } // (public) return + if this > a, - if this < a, 0 if equal


              function bnCompareTo(a) {
                var r = this.s - a.s;
                if (r != 0) return r;
                var i = this.t;
                r = i - a.t;
                if (r != 0) return r;

                while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;

                return 0;
              } // returns bit length of the integer x


              function nbits(x) {
                var r = 1,
                    t;

                if ((t = x >>> 16) != 0) {
                  x = t;
                  r += 16;
                }

                if ((t = x >> 8) != 0) {
                  x = t;
                  r += 8;
                }

                if ((t = x >> 4) != 0) {
                  x = t;
                  r += 4;
                }

                if ((t = x >> 2) != 0) {
                  x = t;
                  r += 2;
                }

                if ((t = x >> 1) != 0) {
                  x = t;
                  r += 1;
                }

                return r;
              } // (public) return the number of bits in "this"


              function bnBitLength() {
                if (this.t <= 0) return 0;
                return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
              } // (protected) r = this << n*DB


              function bnpDLShiftTo(n, r) {
                var i;

                for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];

                for (i = n - 1; i >= 0; --i) r[i] = 0;

                r.t = this.t + n;
                r.s = this.s;
              } // (protected) r = this >> n*DB


              function bnpDRShiftTo(n, r) {
                for (var i = n; i < this.t; ++i) r[i - n] = this[i];

                r.t = Math.max(this.t - n, 0);
                r.s = this.s;
              } // (protected) r = this << n


              function bnpLShiftTo(n, r) {
                var bs = n % this.DB;
                var cbs = this.DB - bs;
                var bm = (1 << cbs) - 1;
                var ds = Math.floor(n / this.DB),
                    c = this.s << bs & this.DM,
                    i;

                for (i = this.t - 1; i >= 0; --i) {
                  r[i + ds + 1] = this[i] >> cbs | c;
                  c = (this[i] & bm) << bs;
                }

                for (i = ds - 1; i >= 0; --i) r[i] = 0;

                r[ds] = c;
                r.t = this.t + ds + 1;
                r.s = this.s;
                r.clamp();
              } // (protected) r = this >> n


              function bnpRShiftTo(n, r) {
                r.s = this.s;
                var ds = Math.floor(n / this.DB);

                if (ds >= this.t) {
                  r.t = 0;
                  return;
                }

                var bs = n % this.DB;
                var cbs = this.DB - bs;
                var bm = (1 << bs) - 1;
                r[0] = this[ds] >> bs;

                for (var i = ds + 1; i < this.t; ++i) {
                  r[i - ds - 1] |= (this[i] & bm) << cbs;
                  r[i - ds] = this[i] >> bs;
                }

                if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
                r.t = this.t - ds;
                r.clamp();
              } // (protected) r = this - a


              function bnpSubTo(a, r) {
                var i = 0,
                    c = 0,
                    m = Math.min(a.t, this.t);

                while (i < m) {
                  c += this[i] - a[i];
                  r[i++] = c & this.DM;
                  c >>= this.DB;
                }

                if (a.t < this.t) {
                  c -= a.s;

                  while (i < this.t) {
                    c += this[i];
                    r[i++] = c & this.DM;
                    c >>= this.DB;
                  }

                  c += this.s;
                } else {
                  c += this.s;

                  while (i < a.t) {
                    c -= a[i];
                    r[i++] = c & this.DM;
                    c >>= this.DB;
                  }

                  c -= a.s;
                }

                r.s = c < 0 ? -1 : 0;
                if (c < -1) r[i++] = this.DV + c;else if (c > 0) r[i++] = c;
                r.t = i;
                r.clamp();
              } // (protected) r = this * a, r != this,a (HAC 14.12)
              // "this" should be the larger one if appropriate.


              function bnpMultiplyTo(a, r) {
                var x = this.abs(),
                    y = a.abs();
                var i = x.t;
                r.t = i + y.t;

                while (--i >= 0) r[i] = 0;

                for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);

                r.s = 0;
                r.clamp();
                if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
              } // (protected) r = this^2, r != this (HAC 14.16)


              function bnpSquareTo(r) {
                var x = this.abs();
                var i = r.t = 2 * x.t;

                while (--i >= 0) r[i] = 0;

                for (i = 0; i < x.t - 1; ++i) {
                  var c = x.am(i, x[i], r, 2 * i, 0, 1);

                  if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
                    r[i + x.t] -= x.DV;
                    r[i + x.t + 1] = 1;
                  }
                }

                if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
                r.s = 0;
                r.clamp();
              } // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
              // r != q, this != m.  q or r may be null.


              function bnpDivRemTo(m, q, r) {
                var pm = m.abs();
                if (pm.t <= 0) return;
                var pt = this.abs();

                if (pt.t < pm.t) {
                  if (q != null) q.fromInt(0);
                  if (r != null) this.copyTo(r);
                  return;
                }

                if (r == null) r = nbi();
                var y = nbi(),
                    ts = this.s,
                    ms = m.s;
                var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus

                if (nsh > 0) {
                  pm.lShiftTo(nsh, y);
                  pt.lShiftTo(nsh, r);
                } else {
                  pm.copyTo(y);
                  pt.copyTo(r);
                }

                var ys = y.t;
                var y0 = y[ys - 1];
                if (y0 == 0) return;
                var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
                var d1 = this.FV / yt,
                    d2 = (1 << this.F1) / yt,
                    e = 1 << this.F2;
                var i = r.t,
                    j = i - ys,
                    t = q == null ? nbi() : q;
                y.dlShiftTo(j, t);

                if (r.compareTo(t) >= 0) {
                  r[r.t++] = 1;
                  r.subTo(t, r);
                }

                BigInteger.ONE.dlShiftTo(ys, t);
                t.subTo(y, y); // "negative" y so we can replace sub with am later

                while (y.t < ys) y[y.t++] = 0;

                while (--j >= 0) {
                  // Estimate quotient digit
                  var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);

                  if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
                    // Try it out
                    y.dlShiftTo(j, t);
                    r.subTo(t, r);

                    while (r[i] < --qd) r.subTo(t, r);
                  }
                }

                if (q != null) {
                  r.drShiftTo(ys, q);
                  if (ts != ms) BigInteger.ZERO.subTo(q, q);
                }

                r.t = ys;
                r.clamp();
                if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder

                if (ts < 0) BigInteger.ZERO.subTo(r, r);
              } // (public) this mod a


              function bnMod(a) {
                var r = nbi();
                this.abs().divRemTo(a, null, r);
                if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
                return r;
              } // Modular reduction using "classic" algorithm


              function Classic(m) {
                this.m = m;
              }

              function cConvert(x) {
                if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);else return x;
              }

              function cRevert(x) {
                return x;
              }

              function cReduce(x) {
                x.divRemTo(this.m, null, x);
              }

              function cMulTo(x, y, r) {
                x.multiplyTo(y, r);
                this.reduce(r);
              }

              function cSqrTo(x, r) {
                x.squareTo(r);
                this.reduce(r);
              }

              Classic.prototype.convert = cConvert;
              Classic.prototype.revert = cRevert;
              Classic.prototype.reduce = cReduce;
              Classic.prototype.mulTo = cMulTo;
              Classic.prototype.sqrTo = cSqrTo; // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
              // justification:
              //         xy == 1 (mod m)
              //         xy =  1+km
              //   xy(2-xy) = (1+km)(1-km)
              // x[y(2-xy)] = 1-k^2m^2
              // x[y(2-xy)] == 1 (mod m^2)
              // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
              // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
              // JS multiply "overflows" differently from C/C++, so care is needed here.

              function bnpInvDigit() {
                if (this.t < 1) return 0;
                var x = this[0];
                if ((x & 1) == 0) return 0;
                var y = x & 3; // y == 1/x mod 2^2

                y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4

                y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8

                y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16
                // last step - calculate inverse mod DV directly;
                // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints

                y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits
                // we really want the negative inverse, and -DV < y < DV

                return y > 0 ? this.DV - y : -y;
              } // Montgomery reduction


              function Montgomery(m) {
                this.m = m;
                this.mp = m.invDigit();
                this.mpl = this.mp & 0x7fff;
                this.mph = this.mp >> 15;
                this.um = (1 << m.DB - 15) - 1;
                this.mt2 = 2 * m.t;
              } // xR mod m


              function montConvert(x) {
                var r = nbi();
                x.abs().dlShiftTo(this.m.t, r);
                r.divRemTo(this.m, null, r);
                if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
                return r;
              } // x/R mod m


              function montRevert(x) {
                var r = nbi();
                x.copyTo(r);
                this.reduce(r);
                return r;
              } // x = x/R mod m (HAC 14.32)


              function montReduce(x) {
                while (x.t <= this.mt2) // pad x so am has enough room later
                x[x.t++] = 0;

                for (var i = 0; i < this.m.t; ++i) {
                  // faster way of calculating u0 = x[i]*mp mod DV
                  var j = x[i] & 0x7fff;
                  var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call

                  j = i + this.m.t;
                  x[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry

                  while (x[j] >= x.DV) {
                    x[j] -= x.DV;
                    x[++j]++;
                  }
                }

                x.clamp();
                x.drShiftTo(this.m.t, x);
                if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
              } // r = "x^2/R mod m"; x != r


              function montSqrTo(x, r) {
                x.squareTo(r);
                this.reduce(r);
              } // r = "xy/R mod m"; x,y != r


              function montMulTo(x, y, r) {
                x.multiplyTo(y, r);
                this.reduce(r);
              }

              Montgomery.prototype.convert = montConvert;
              Montgomery.prototype.revert = montRevert;
              Montgomery.prototype.reduce = montReduce;
              Montgomery.prototype.mulTo = montMulTo;
              Montgomery.prototype.sqrTo = montSqrTo; // (protected) true iff this is even

              function bnpIsEven() {
                return (this.t > 0 ? this[0] & 1 : this.s) == 0;
              } // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)


              function bnpExp(e, z) {
                if (e > 0xffffffff || e < 1) return BigInteger.ONE;
                var r = nbi(),
                    r2 = nbi(),
                    g = z.convert(this),
                    i = nbits(e) - 1;
                g.copyTo(r);

                while (--i >= 0) {
                  z.sqrTo(r, r2);
                  if ((e & 1 << i) > 0) z.mulTo(r2, g, r);else {
                    var t = r;
                    r = r2;
                    r2 = t;
                  }
                }

                return z.revert(r);
              } // (public) this^e % m, 0 <= e < 2^32


              function bnModPowInt(e, m) {
                var z;
                if (e < 256 || m.isEven()) z = new Classic(m);else z = new Montgomery(m);
                return this.exp(e, z);
              } // protected


              BigInteger.prototype.copyTo = bnpCopyTo;
              BigInteger.prototype.fromInt = bnpFromInt;
              BigInteger.prototype.fromString = bnpFromString;
              BigInteger.prototype.clamp = bnpClamp;
              BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
              BigInteger.prototype.drShiftTo = bnpDRShiftTo;
              BigInteger.prototype.lShiftTo = bnpLShiftTo;
              BigInteger.prototype.rShiftTo = bnpRShiftTo;
              BigInteger.prototype.subTo = bnpSubTo;
              BigInteger.prototype.multiplyTo = bnpMultiplyTo;
              BigInteger.prototype.squareTo = bnpSquareTo;
              BigInteger.prototype.divRemTo = bnpDivRemTo;
              BigInteger.prototype.invDigit = bnpInvDigit;
              BigInteger.prototype.isEven = bnpIsEven;
              BigInteger.prototype.exp = bnpExp; // public

              BigInteger.prototype.toString = bnToString;
              BigInteger.prototype.negate = bnNegate;
              BigInteger.prototype.abs = bnAbs;
              BigInteger.prototype.compareTo = bnCompareTo;
              BigInteger.prototype.bitLength = bnBitLength;
              BigInteger.prototype.mod = bnMod;
              BigInteger.prototype.modPowInt = bnModPowInt; // "constants"

              BigInteger.ZERO = nbv(0);
              BigInteger.ONE = nbv(1); /// BEGIN jsbn2.js

              /*
               * Copyright (c) 2003-2005  Tom Wu
               * All Rights Reserved.
               *
               * Permission is hereby granted, free of charge, to any person obtaining
               * a copy of this software and associated documentation files (the
               * "Software"), to deal in the Software without restriction, including
               * without limitation the rights to use, copy, modify, merge, publish,
               * distribute, sublicense, and/or sell copies of the Software, and to
               * permit persons to whom the Software is furnished to do so, subject to
               * the following conditions:
               *
               * The above copyright notice and this permission notice shall be
               * included in all copies or substantial portions of the Software.
               *
               * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
               * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
               * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
               *
               * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
               * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
               * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
               * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
               * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
               *
               * In addition, the following condition applies:
               *
               * All redistributions must retain an intact copy of this copyright notice
               * and disclaimer.
               */
              // Extended JavaScript BN functions, required for RSA private ops.
              // (public)

              function bnClone() {
                var r = nbi();
                this.copyTo(r);
                return r;
              } // (public) return value as integer


              function bnIntValue() {
                if (this.s < 0) {
                  if (this.t == 1) return this[0] - this.DV;else if (this.t == 0) return -1;
                } else if (this.t == 1) return this[0];else if (this.t == 0) return 0; // assumes 16 < DB < 32


                return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
              } // (public) return value as byte


              function bnByteValue() {
                return this.t == 0 ? this.s : this[0] << 24 >> 24;
              } // (public) return value as short (assumes DB>=16)


              function bnShortValue() {
                return this.t == 0 ? this.s : this[0] << 16 >> 16;
              } // (protected) return x s.t. r^x < DV


              function bnpChunkSize(r) {
                return Math.floor(Math.LN2 * this.DB / Math.log(r));
              } // (public) 0 if this == 0, 1 if this > 0


              function bnSigNum() {
                if (this.s < 0) return -1;else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;else return 1;
              } // (protected) convert to radix string


              function bnpToRadix(b) {
                if (b == null) b = 10;
                if (this.signum() == 0 || b < 2 || b > 36) return "0";
                var cs = this.chunkSize(b);
                var a = Math.pow(b, cs);
                var d = nbv(a),
                    y = nbi(),
                    z = nbi(),
                    r = "";
                this.divRemTo(d, y, z);

                while (y.signum() > 0) {
                  r = (a + z.intValue()).toString(b).substr(1) + r;
                  y.divRemTo(d, y, z);
                }

                return z.intValue().toString(b) + r;
              } // (protected) convert from radix string


              function bnpFromRadix(s, b) {
                this.fromInt(0);
                if (b == null) b = 10;
                var cs = this.chunkSize(b);
                var d = Math.pow(b, cs),
                    mi = false,
                    j = 0,
                    w = 0;

                for (var i = 0; i < s.length; ++i) {
                  var x = intAt(s, i);

                  if (x < 0) {
                    if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
                    continue;
                  }

                  w = b * w + x;

                  if (++j >= cs) {
                    this.dMultiply(d);
                    this.dAddOffset(w, 0);
                    j = 0;
                    w = 0;
                  }
                }

                if (j > 0) {
                  this.dMultiply(Math.pow(b, j));
                  this.dAddOffset(w, 0);
                }

                if (mi) BigInteger.ZERO.subTo(this, this);
              } // (protected) alternate constructor


              function bnpFromNumber(a, b, c) {
                if ("number" == typeof b) {
                  // new BigInteger(int,int,RNG)
                  if (a < 2) this.fromInt(1);else {
                    this.fromNumber(a, c);
                    if (!this.testBit(a - 1)) // force MSB set
                      this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
                    if (this.isEven()) this.dAddOffset(1, 0); // force odd

                    while (!this.isProbablePrime(b)) {
                      this.dAddOffset(2, 0);
                      if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
                    }
                  }
                } else {
                  // new BigInteger(int,RNG)
                  var x = new Array(),
                      t = a & 7;
                  x.length = (a >> 3) + 1;
                  b.nextBytes(x);
                  if (t > 0) x[0] &= (1 << t) - 1;else x[0] = 0;
                  this.fromString(x, 256);
                }
              } // (public) convert to bigendian byte array


              function bnToByteArray() {
                var i = this.t,
                    r = new Array();
                r[0] = this.s;
                var p = this.DB - i * this.DB % 8,
                    d,
                    k = 0;

                if (i-- > 0) {
                  if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | this.s << this.DB - p;

                  while (i >= 0) {
                    if (p < 8) {
                      d = (this[i] & (1 << p) - 1) << 8 - p;
                      d |= this[--i] >> (p += this.DB - 8);
                    } else {
                      d = this[i] >> (p -= 8) & 0xff;

                      if (p <= 0) {
                        p += this.DB;
                        --i;
                      }
                    }

                    if ((d & 0x80) != 0) d |= -256;
                    if (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;
                    if (k > 0 || d != this.s) r[k++] = d;
                  }
                }

                return r;
              }

              function bnEquals(a) {
                return this.compareTo(a) == 0;
              }

              function bnMin(a) {
                return this.compareTo(a) < 0 ? this : a;
              }

              function bnMax(a) {
                return this.compareTo(a) > 0 ? this : a;
              } // (protected) r = this op a (bitwise)


              function bnpBitwiseTo(a, op, r) {
                var i,
                    f,
                    m = Math.min(a.t, this.t);

                for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);

                if (a.t < this.t) {
                  f = a.s & this.DM;

                  for (i = m; i < this.t; ++i) r[i] = op(this[i], f);

                  r.t = this.t;
                } else {
                  f = this.s & this.DM;

                  for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);

                  r.t = a.t;
                }

                r.s = op(this.s, a.s);
                r.clamp();
              } // (public) this & a


              function op_and(x, y) {
                return x & y;
              }

              function bnAnd(a) {
                var r = nbi();
                this.bitwiseTo(a, op_and, r);
                return r;
              } // (public) this | a


              function op_or(x, y) {
                return x | y;
              }

              function bnOr(a) {
                var r = nbi();
                this.bitwiseTo(a, op_or, r);
                return r;
              } // (public) this ^ a


              function op_xor(x, y) {
                return x ^ y;
              }

              function bnXor(a) {
                var r = nbi();
                this.bitwiseTo(a, op_xor, r);
                return r;
              } // (public) this & ~a


              function op_andnot(x, y) {
                return x & ~y;
              }

              function bnAndNot(a) {
                var r = nbi();
                this.bitwiseTo(a, op_andnot, r);
                return r;
              } // (public) ~this


              function bnNot() {
                var r = nbi();

                for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];

                r.t = this.t;
                r.s = ~this.s;
                return r;
              } // (public) this << n


              function bnShiftLeft(n) {
                var r = nbi();
                if (n < 0) this.rShiftTo(-n, r);else this.lShiftTo(n, r);
                return r;
              } // (public) this >> n


              function bnShiftRight(n) {
                var r = nbi();
                if (n < 0) this.lShiftTo(-n, r);else this.rShiftTo(n, r);
                return r;
              } // return index of lowest 1-bit in x, x < 2^31


              function lbit(x) {
                if (x == 0) return -1;
                var r = 0;

                if ((x & 0xffff) == 0) {
                  x >>= 16;
                  r += 16;
                }

                if ((x & 0xff) == 0) {
                  x >>= 8;
                  r += 8;
                }

                if ((x & 0xf) == 0) {
                  x >>= 4;
                  r += 4;
                }

                if ((x & 3) == 0) {
                  x >>= 2;
                  r += 2;
                }

                if ((x & 1) == 0) ++r;
                return r;
              } // (public) returns index of lowest 1-bit (or -1 if none)


              function bnGetLowestSetBit() {
                for (var i = 0; i < this.t; ++i) if (this[i] != 0) return i * this.DB + lbit(this[i]);

                if (this.s < 0) return this.t * this.DB;
                return -1;
              } // return number of 1 bits in x


              function cbit(x) {
                var r = 0;

                while (x != 0) {
                  x &= x - 1;
                  ++r;
                }

                return r;
              } // (public) return number of set bits


              function bnBitCount() {
                var r = 0,
                    x = this.s & this.DM;

                for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);

                return r;
              } // (public) true iff nth bit is set


              function bnTestBit(n) {
                var j = Math.floor(n / this.DB);
                if (j >= this.t) return this.s != 0;
                return (this[j] & 1 << n % this.DB) != 0;
              } // (protected) this op (1<<n)


              function bnpChangeBit(n, op) {
                var r = BigInteger.ONE.shiftLeft(n);
                this.bitwiseTo(r, op, r);
                return r;
              } // (public) this | (1<<n)


              function bnSetBit(n) {
                return this.changeBit(n, op_or);
              } // (public) this & ~(1<<n)


              function bnClearBit(n) {
                return this.changeBit(n, op_andnot);
              } // (public) this ^ (1<<n)


              function bnFlipBit(n) {
                return this.changeBit(n, op_xor);
              } // (protected) r = this + a


              function bnpAddTo(a, r) {
                var i = 0,
                    c = 0,
                    m = Math.min(a.t, this.t);

                while (i < m) {
                  c += this[i] + a[i];
                  r[i++] = c & this.DM;
                  c >>= this.DB;
                }

                if (a.t < this.t) {
                  c += a.s;

                  while (i < this.t) {
                    c += this[i];
                    r[i++] = c & this.DM;
                    c >>= this.DB;
                  }

                  c += this.s;
                } else {
                  c += this.s;

                  while (i < a.t) {
                    c += a[i];
                    r[i++] = c & this.DM;
                    c >>= this.DB;
                  }

                  c += a.s;
                }

                r.s = c < 0 ? -1 : 0;
                if (c > 0) r[i++] = c;else if (c < -1) r[i++] = this.DV + c;
                r.t = i;
                r.clamp();
              } // (public) this + a


              function bnAdd(a) {
                var r = nbi();
                this.addTo(a, r);
                return r;
              } // (public) this - a


              function bnSubtract(a) {
                var r = nbi();
                this.subTo(a, r);
                return r;
              } // (public) this * a


              function bnMultiply(a) {
                var r = nbi();
                this.multiplyTo(a, r);
                return r;
              } // (public) this / a


              function bnDivide(a) {
                var r = nbi();
                this.divRemTo(a, r, null);
                return r;
              } // (public) this % a


              function bnRemainder(a) {
                var r = nbi();
                this.divRemTo(a, null, r);
                return r;
              } // (public) [this/a,this%a]


              function bnDivideAndRemainder(a) {
                var q = nbi(),
                    r = nbi();
                this.divRemTo(a, q, r);
                return new Array(q, r);
              } // (protected) this *= n, this >= 0, 1 < n < DV


              function bnpDMultiply(n) {
                this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
                ++this.t;
                this.clamp();
              } // (protected) this += n << w words, this >= 0


              function bnpDAddOffset(n, w) {
                while (this.t <= w) this[this.t++] = 0;

                this[w] += n;

                while (this[w] >= this.DV) {
                  this[w] -= this.DV;
                  if (++w >= this.t) this[this.t++] = 0;
                  ++this[w];
                }
              } // A "null" reducer


              function NullExp() {}

              function nNop(x) {
                return x;
              }

              function nMulTo(x, y, r) {
                x.multiplyTo(y, r);
              }

              function nSqrTo(x, r) {
                x.squareTo(r);
              }

              NullExp.prototype.convert = nNop;
              NullExp.prototype.revert = nNop;
              NullExp.prototype.mulTo = nMulTo;
              NullExp.prototype.sqrTo = nSqrTo; // (public) this^e

              function bnPow(e) {
                return this.exp(e, new NullExp());
              } // (protected) r = lower n words of "this * a", a.t <= n
              // "this" should be the larger one if appropriate.


              function bnpMultiplyLowerTo(a, n, r) {
                var i = Math.min(this.t + a.t, n);
                r.s = 0; // assumes a,this >= 0

                r.t = i;

                while (i > 0) r[--i] = 0;

                var j;

                for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);

                for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);

                r.clamp();
              } // (protected) r = "this * a" without lower n words, n > 0
              // "this" should be the larger one if appropriate.


              function bnpMultiplyUpperTo(a, n, r) {
                --n;
                var i = r.t = this.t + a.t - n;
                r.s = 0; // assumes a,this >= 0

                while (--i >= 0) r[i] = 0;

                for (i = Math.max(n - this.t, 0); i < a.t; ++i) r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);

                r.clamp();
                r.drShiftTo(1, r);
              } // Barrett modular reduction


              function Barrett(m) {
                // setup Barrett
                this.r2 = nbi();
                this.q3 = nbi();
                BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
                this.mu = this.r2.divide(m);
                this.m = m;
              }

              function barrettConvert(x) {
                if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);else if (x.compareTo(this.m) < 0) return x;else {
                  var r = nbi();
                  x.copyTo(r);
                  this.reduce(r);
                  return r;
                }
              }

              function barrettRevert(x) {
                return x;
              } // x = x mod m (HAC 14.42)


              function barrettReduce(x) {
                x.drShiftTo(this.m.t - 1, this.r2);

                if (x.t > this.m.t + 1) {
                  x.t = this.m.t + 1;
                  x.clamp();
                }

                this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
                this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);

                while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);

                x.subTo(this.r2, x);

                while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
              } // r = x^2 mod m; x != r


              function barrettSqrTo(x, r) {
                x.squareTo(r);
                this.reduce(r);
              } // r = x*y mod m; x,y != r


              function barrettMulTo(x, y, r) {
                x.multiplyTo(y, r);
                this.reduce(r);
              }

              Barrett.prototype.convert = barrettConvert;
              Barrett.prototype.revert = barrettRevert;
              Barrett.prototype.reduce = barrettReduce;
              Barrett.prototype.mulTo = barrettMulTo;
              Barrett.prototype.sqrTo = barrettSqrTo; // (public) this^e % m (HAC 14.85)

              function bnModPow(e, m) {
                var i = e.bitLength(),
                    k,
                    r = nbv(1),
                    z;
                if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;
                if (i < 8) z = new Classic(m);else if (m.isEven()) z = new Barrett(m);else z = new Montgomery(m); // precomputation

                var g = new Array(),
                    n = 3,
                    k1 = k - 1,
                    km = (1 << k) - 1;
                g[1] = z.convert(this);

                if (k > 1) {
                  var g2 = nbi();
                  z.sqrTo(g[1], g2);

                  while (n <= km) {
                    g[n] = nbi();
                    z.mulTo(g2, g[n - 2], g[n]);
                    n += 2;
                  }
                }

                var j = e.t - 1,
                    w,
                    is1 = true,
                    r2 = nbi(),
                    t;
                i = nbits(e[j]) - 1;

                while (j >= 0) {
                  if (i >= k1) w = e[j] >> i - k1 & km;else {
                    w = (e[j] & (1 << i + 1) - 1) << k1 - i;
                    if (j > 0) w |= e[j - 1] >> this.DB + i - k1;
                  }
                  n = k;

                  while ((w & 1) == 0) {
                    w >>= 1;
                    --n;
                  }

                  if ((i -= n) < 0) {
                    i += this.DB;
                    --j;
                  }

                  if (is1) {
                    // ret == 1, don't bother squaring or multiplying it
                    g[w].copyTo(r);
                    is1 = false;
                  } else {
                    while (n > 1) {
                      z.sqrTo(r, r2);
                      z.sqrTo(r2, r);
                      n -= 2;
                    }

                    if (n > 0) z.sqrTo(r, r2);else {
                      t = r;
                      r = r2;
                      r2 = t;
                    }
                    z.mulTo(r2, g[w], r);
                  }

                  while (j >= 0 && (e[j] & 1 << i) == 0) {
                    z.sqrTo(r, r2);
                    t = r;
                    r = r2;
                    r2 = t;

                    if (--i < 0) {
                      i = this.DB - 1;
                      --j;
                    }
                  }
                }

                return z.revert(r);
              } // (public) gcd(this,a) (HAC 14.54)


              function bnGCD(a) {
                var x = this.s < 0 ? this.negate() : this.clone();
                var y = a.s < 0 ? a.negate() : a.clone();

                if (x.compareTo(y) < 0) {
                  var t = x;
                  x = y;
                  y = t;
                }

                var i = x.getLowestSetBit(),
                    g = y.getLowestSetBit();
                if (g < 0) return x;
                if (i < g) g = i;

                if (g > 0) {
                  x.rShiftTo(g, x);
                  y.rShiftTo(g, y);
                }

                while (x.signum() > 0) {
                  if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
                  if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);

                  if (x.compareTo(y) >= 0) {
                    x.subTo(y, x);
                    x.rShiftTo(1, x);
                  } else {
                    y.subTo(x, y);
                    y.rShiftTo(1, y);
                  }
                }

                if (g > 0) y.lShiftTo(g, y);
                return y;
              } // (protected) this % n, n < 2^26


              function bnpModInt(n) {
                if (n <= 0) return 0;
                var d = this.DV % n,
                    r = this.s < 0 ? n - 1 : 0;
                if (this.t > 0) if (d == 0) r = this[0] % n;else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;
                return r;
              } // (public) 1/this % m (HAC 14.61)


              function bnModInverse(m) {
                var ac = m.isEven();
                if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;
                var u = m.clone(),
                    v = this.clone();
                var a = nbv(1),
                    b = nbv(0),
                    c = nbv(0),
                    d = nbv(1);

                while (u.signum() != 0) {
                  while (u.isEven()) {
                    u.rShiftTo(1, u);

                    if (ac) {
                      if (!a.isEven() || !b.isEven()) {
                        a.addTo(this, a);
                        b.subTo(m, b);
                      }

                      a.rShiftTo(1, a);
                    } else if (!b.isEven()) b.subTo(m, b);

                    b.rShiftTo(1, b);
                  }

                  while (v.isEven()) {
                    v.rShiftTo(1, v);

                    if (ac) {
                      if (!c.isEven() || !d.isEven()) {
                        c.addTo(this, c);
                        d.subTo(m, d);
                      }

                      c.rShiftTo(1, c);
                    } else if (!d.isEven()) d.subTo(m, d);

                    d.rShiftTo(1, d);
                  }

                  if (u.compareTo(v) >= 0) {
                    u.subTo(v, u);
                    if (ac) a.subTo(c, a);
                    b.subTo(d, b);
                  } else {
                    v.subTo(u, v);
                    if (ac) c.subTo(a, c);
                    d.subTo(b, d);
                  }
                }

                if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
                if (d.compareTo(m) >= 0) return d.subtract(m);
                if (d.signum() < 0) d.addTo(m, d);else return d;
                if (d.signum() < 0) return d.add(m);else return d;
              }

              var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509];
              var lplim = (1 << 26) / lowprimes[lowprimes.length - 1]; // (public) test primality with certainty >= 1-.5^t

              function bnIsProbablePrime(t) {
                var i,
                    x = this.abs();

                if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
                  for (i = 0; i < lowprimes.length; ++i) if (x[0] == lowprimes[i]) return true;

                  return false;
                }

                if (x.isEven()) return false;
                i = 1;

                while (i < lowprimes.length) {
                  var m = lowprimes[i],
                      j = i + 1;

                  while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];

                  m = x.modInt(m);

                  while (i < j) if (m % lowprimes[i++] == 0) return false;
                }

                return x.millerRabin(t);
              } // (protected) true if probably prime (HAC 4.24, Miller-Rabin)


              function bnpMillerRabin(t) {
                var n1 = this.subtract(BigInteger.ONE);
                var k = n1.getLowestSetBit();
                if (k <= 0) return false;
                var r = n1.shiftRight(k);
                t = t + 1 >> 1;
                if (t > lowprimes.length) t = lowprimes.length;
                var a = nbi();

                for (var i = 0; i < t; ++i) {
                  a.fromInt(lowprimes[i]);
                  var y = a.modPow(r, this);

                  if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
                    var j = 1;

                    while (j++ < k && y.compareTo(n1) != 0) {
                      y = y.modPowInt(2, this);
                      if (y.compareTo(BigInteger.ONE) == 0) return false;
                    }

                    if (y.compareTo(n1) != 0) return false;
                  }
                }

                return true;
              } // protected


              BigInteger.prototype.chunkSize = bnpChunkSize;
              BigInteger.prototype.toRadix = bnpToRadix;
              BigInteger.prototype.fromRadix = bnpFromRadix;
              BigInteger.prototype.fromNumber = bnpFromNumber;
              BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
              BigInteger.prototype.changeBit = bnpChangeBit;
              BigInteger.prototype.addTo = bnpAddTo;
              BigInteger.prototype.dMultiply = bnpDMultiply;
              BigInteger.prototype.dAddOffset = bnpDAddOffset;
              BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
              BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
              BigInteger.prototype.modInt = bnpModInt;
              BigInteger.prototype.millerRabin = bnpMillerRabin; // public

              BigInteger.prototype.clone = bnClone;
              BigInteger.prototype.intValue = bnIntValue;
              BigInteger.prototype.byteValue = bnByteValue;
              BigInteger.prototype.shortValue = bnShortValue;
              BigInteger.prototype.signum = bnSigNum;
              BigInteger.prototype.toByteArray = bnToByteArray;
              BigInteger.prototype.equals = bnEquals;
              BigInteger.prototype.min = bnMin;
              BigInteger.prototype.max = bnMax;
              BigInteger.prototype.and = bnAnd;
              BigInteger.prototype.or = bnOr;
              BigInteger.prototype.xor = bnXor;
              BigInteger.prototype.andNot = bnAndNot;
              BigInteger.prototype.not = bnNot;
              BigInteger.prototype.shiftLeft = bnShiftLeft;
              BigInteger.prototype.shiftRight = bnShiftRight;
              BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
              BigInteger.prototype.bitCount = bnBitCount;
              BigInteger.prototype.testBit = bnTestBit;
              BigInteger.prototype.setBit = bnSetBit;
              BigInteger.prototype.clearBit = bnClearBit;
              BigInteger.prototype.flipBit = bnFlipBit;
              BigInteger.prototype.add = bnAdd;
              BigInteger.prototype.subtract = bnSubtract;
              BigInteger.prototype.multiply = bnMultiply;
              BigInteger.prototype.divide = bnDivide;
              BigInteger.prototype.remainder = bnRemainder;
              BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
              BigInteger.prototype.modPow = bnModPow;
              BigInteger.prototype.modInverse = bnModInverse;
              BigInteger.prototype.pow = bnPow;
              BigInteger.prototype.gcd = bnGCD;
              BigInteger.prototype.isProbablePrime = bnIsProbablePrime; // BigInteger interfaces not implemented in jsbn:
              // BigInteger(int signum, byte[] magnitude)
              // double doubleValue()
              // float floatValue()
              // int hashCode()
              // long longValue()
              // static BigInteger valueOf(long val)
              /// METEOR WRAPPER

              return BigInteger;
            }();
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "srp.js": function module(_require2, _exports, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/srp/srp.js                                                                                                 //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module2.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            // This package contains just enough of the original SRP code to
            // support the backwards-compatibility upgrade path.
            //
            // An SRP (and possibly also accounts-srp) package should eventually be
            // available in Atmosphere so that users can continue to use SRP if they
            // want to.
            SRP = {};
            /**
             * Generate a new SRP verifier. Password is the plaintext password.
             *
             * options is optional and can include:
             * - identity: String. The SRP username to user. Mostly this is passed
             *   in for testing.  Random UUID if not provided.
             * - hashedIdentityAndPassword: combined identity and password, already hashed, for the SRP to bcrypt upgrade path.
             * - salt: String. A salt to use.  Mostly this is passed in for
             *   testing.  Random UUID if not provided.
             * - SRP parameters (see _defaults and paramsFromOptions below)
             */

            SRP.generateVerifier = function (password, options) {
              var params = paramsFromOptions(options);
              var salt = options && options.salt || Random.secret();
              var identity;
              var hashedIdentityAndPassword = options && options.hashedIdentityAndPassword;

              if (!hashedIdentityAndPassword) {
                identity = options && options.identity || Random.secret();
                hashedIdentityAndPassword = params.hash(identity + ":" + password);
              }

              var x = params.hash(salt + hashedIdentityAndPassword);
              var xi = new BigInteger(x, 16);
              var v = params.g.modPow(xi, params.N);
              return {
                identity: identity,
                salt: salt,
                verifier: v.toString(16)
              };
            }; // For use with check().


            SRP.matchVerifier = {
              identity: String,
              salt: String,
              verifier: String
            };
            /**
             * Default parameter values for SRP.
             *
             */

            var _defaults = {
              hash: function (x) {
                return SHA256(x).toLowerCase();
              },
              N: new BigInteger("EEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE48E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B297BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9AFD5138FE8376435B9FC61D2FC0EB06E3", 16),
              g: new BigInteger("2")
            };
            _defaults.k = new BigInteger(_defaults.hash(_defaults.N.toString(16) + _defaults.g.toString(16)), 16);
            /**
             * Process an options hash to create SRP parameters.
             *
             * Options can include:
             * - hash: Function. Defaults to SHA256.
             * - N: String or BigInteger. Defaults to 1024 bit value from RFC 5054
             * - g: String or BigInteger. Defaults to 2.
             * - k: String or BigInteger. Defaults to hash(N, g)
             */

            var paramsFromOptions = function (options) {
              if (!options) // fast path
                return _defaults;

              var ret = _objectSpread({}, _defaults);

              ['N', 'g', 'k'].forEach(function (p) {
                if (options[p]) {
                  if (typeof options[p] === "string") ret[p] = new BigInteger(options[p], 16);else if (options[p] instanceof BigInteger) ret[p] = options[p];else throw new Error("Invalid parameter: " + p);
                }
              });
              if (options.hash) ret.hash = function (x) {
                return options.hash(x).toLowerCase();
              };

              if (!options.k && (options.N || options.g || options.hash)) {
                ret.k = ret.hash(ret.N.toString(16) + ret.g.toString(16));
              }

              return ret;
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/srp/biginteger.js");
  _require("/node_modules/meteor/srp/srp.js");

  /* Exports */
  Package._define("srp", {
    SRP: SRP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Accounts = Package['accounts-base'].Accounts;
  var SRP = Package.srp.SRP;
  var SHA256 = Package.sha.SHA256;
  var EJSON = Package.ejson.EJSON;
  var DDP = Package['ddp-client'].DDP;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "accounts-password": { "password_client.js": function module(_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                            //
            // packages/accounts-password/password_client.js                                                              //
            //                                                                                                            //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);

            // Used in the various functions below to handle errors consistently
            const reportError = (error, callback) => {
              if (callback) {
                callback(error);
              } else {
                throw error;
              }
            }; // Attempt to log in with a password.
            //
            // @param selector {String|Object} One of the following:
            //   - {username: (username)}
            //   - {email: (email)}
            //   - a string which may be a username or email, depending on whether
            //     it contains "@".
            // @param password {String}
            // @param callback {Function(error|undefined)}

            /**
             * @summary Log the user in with a password.
             * @locus Client
             * @param {Object | String} user
             *   Either a string interpreted as a username or an email; or an object with a
             *   single key: `email`, `username` or `id`. Username or email match in a case
             *   insensitive manner.
             * @param {String} password The user's password.
             * @param {Function} [callback] Optional callback.
             *   Called with no arguments on success, or with a single `Error` argument
             *   on failure.
             * @importFromPackage meteor
             */

            Meteor.loginWithPassword = (selector, password, callback) => {
              if (typeof selector === 'string') if (!selector.includes('@')) selector = {
                username: selector
              };else selector = {
                email: selector
              };
              Accounts.callLoginMethod({
                methodArguments: [{
                  user: selector,
                  password: Accounts._hashPassword(password)
                }],
                userCallback: (error, result) => {
                  if (error && error.error === 400 && error.reason === 'old password format') {
                    // The "reason" string should match the error thrown in the
                    // password login handler in password_server.js.
                    // XXX COMPAT WITH 0.8.1.3
                    // If this user's last login was with a previous version of
                    // Meteor that used SRP, then the server throws this error to
                    // indicate that we should try again. The error includes the
                    // user's SRP identity. We provide a value derived from the
                    // identity and the password to prove to the server that we know
                    // the password without requiring a full SRP flow, as well as
                    // SHA256(password), which the server bcrypts and stores in
                    // place of the old SRP information for this user.
                    srpUpgradePath({
                      upgradeError: error,
                      userSelector: selector,
                      plaintextPassword: password
                    }, callback);
                  } else if (error) {
                    reportError(error, callback);
                  } else {
                    callback && callback();
                  }
                }
              });
            };

            Accounts._hashPassword = password => ({
              digest: SHA256(password),
              algorithm: "sha-256"
            }); // XXX COMPAT WITH 0.8.1.3
            // The server requested an upgrade from the old SRP password format,
            // so supply the needed SRP identity to login. Options:
            //   - upgradeError: the error object that the server returned to tell
            //     us to upgrade from SRP to bcrypt.
            //   - userSelector: selector to retrieve the user object
            //   - plaintextPassword: the password as a string


            const srpUpgradePath = (options, callback) => {
              let details;

              try {
                details = EJSON.parse(options.upgradeError.details);
              } catch (e) {}

              if (!(details && details.format === 'srp')) {
                reportError(new Meteor.Error(400, "Password is old. Please reset your " + "password."), callback);
              } else {
                Accounts.callLoginMethod({
                  methodArguments: [{
                    user: options.userSelector,
                    srp: SHA256("".concat(details.identity, ":").concat(options.plaintextPassword)),
                    password: Accounts._hashPassword(options.plaintextPassword)
                  }],
                  userCallback: callback
                });
              }
            }; // Attempt to log in as a new user.

            /**
             * @summary Create a new user.
             * @locus Anywhere
             * @param {Object} options
             * @param {String} options.username A unique name for this user.
             * @param {String} options.email The user's email address.
             * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.
             * @param {Object} options.profile The user's profile, typically including the `name` field.
             * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage accounts-base
             */

            Accounts.createUser = (options, callback) => {
              options = _objectSpread({}, options); // we'll be modifying options

              if (typeof options.password !== 'string') throw new Error("options.password must be a string");

              if (!options.password) {
                return reportError(new Meteor.Error(400, "Password may not be empty"), callback);
              } // Replace password with the hashed password.


              options.password = Accounts._hashPassword(options.password);
              Accounts.callLoginMethod({
                methodName: 'createUser',
                methodArguments: [options],
                userCallback: callback
              });
            }; // Change password. Must be logged in.
            //
            // @param oldPassword {String|null} By default servers no longer allow
            //   changing password without the old password, but they could so we
            //   support passing no password to the server and letting it decide.
            // @param newPassword {String}
            // @param callback {Function(error|undefined)}

            /**
             * @summary Change the current user's password. Must be logged in.
             * @locus Client
             * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.
             * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage accounts-base
             */

            Accounts.changePassword = (oldPassword, newPassword, callback) => {
              if (!Meteor.user()) {
                return reportError(new Error("Must be logged in to change password."), callback);
              }

              if (!newPassword instanceof String) {
                return reportError(new Meteor.Error(400, "Password must be a string"), callback);
              }

              if (!newPassword) {
                return reportError(new Meteor.Error(400, "Password may not be empty"), callback);
              }

              Accounts.connection.apply('changePassword', [oldPassword ? Accounts._hashPassword(oldPassword) : null, Accounts._hashPassword(newPassword)], (error, result) => {
                if (error || !result) {
                  if (error && error.error === 400 && error.reason === 'old password format') {
                    // XXX COMPAT WITH 0.8.1.3
                    // The server is telling us to upgrade from SRP to bcrypt, as
                    // in Meteor.loginWithPassword.
                    srpUpgradePath({
                      upgradeError: error,
                      userSelector: {
                        id: Meteor.userId()
                      },
                      plaintextPassword: oldPassword
                    }, err => {
                      if (err) {
                        reportError(err, callback);
                      } else {
                        // Now that we've successfully migrated from srp to
                        // bcrypt, try changing the password again.
                        Accounts.changePassword(oldPassword, newPassword, callback);
                      }
                    });
                  } else {
                    // A normal error, not an error telling us to upgrade to bcrypt
                    reportError(error || new Error("No result from changePassword."), callback);
                  }
                } else {
                  callback && callback();
                }
              });
            }; // Sends an email to a user with a link that can be used to reset
            // their password
            //
            // @param options {Object}
            //   - email: (email)
            // @param callback (optional) {Function(error|undefined)}

            /**
             * @summary Request a forgot password email.
             * @locus Client
             * @param {Object} options
             * @param {String} options.email The email address to send a password reset link.
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage accounts-base
             */

            Accounts.forgotPassword = (options, callback) => {
              if (!options.email) {
                return reportError(new Meteor.Error(400, "Must pass options.email"), callback);
              }

              if (callback) {
                Accounts.connection.call("forgotPassword", options, callback);
              } else {
                Accounts.connection.call("forgotPassword", options);
              }
            }; // Resets a password based on a token originally created by
            // Accounts.forgotPassword, and then logs in the matching user.
            //
            // @param token {String}
            // @param newPassword {String}
            // @param callback (optional) {Function(error|undefined)}

            /**
             * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.
             * @locus Client
             * @param {String} token The token retrieved from the reset password URL.
             * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage accounts-base
             */

            Accounts.resetPassword = (token, newPassword, callback) => {
              if (!token instanceof String) {
                return reportError(new Meteor.Error(400, "Token must be a string"), callback);
              }

              if (!newPassword instanceof String) {
                return reportError(new Meteor.Error(400, "Password must be a string"), callback);
              }

              if (!newPassword) {
                return reportError(new Meteor.Error(400, "Password may not be empty"), callback);
              }

              Accounts.callLoginMethod({
                methodName: 'resetPassword',
                methodArguments: [token, Accounts._hashPassword(newPassword)],
                userCallback: callback
              });
            }; // Verifies a user's email address based on a token originally
            // created by Accounts.sendVerificationEmail
            //
            // @param token {String}
            // @param callback (optional) {Function(error|undefined)}

            /**
             * @summary Marks the user's email address as verified. Logs the user in afterwards.
             * @locus Client
             * @param {String} token The token retrieved from the verification URL.
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage accounts-base
             */

            Accounts.verifyEmail = (token, callback) => {
              if (!token) {
                return reportError(new Meteor.Error(400, "Need to pass token"), callback);
              }

              Accounts.callLoginMethod({
                methodName: 'verifyEmail',
                methodArguments: [token],
                userCallback: callback
              });
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require2("/node_modules/meteor/accounts-password/password_client.js");

  /* Exports */
  Package._define("accounts-password");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var URL;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "url": { "url_client.js": function _module(_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/url/url_client.js                                                  //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            var common = _require("./url_common.js");
            var URL = _exports.URL = common.URL;

            URL._constructUrl = function (url, query, params) {
              var query_match = /^(.*?)(\?.*)?$/.exec(url);
              return common.buildUrl(query_match[1], query_match[2], query, params);
            };

            /////////////////////////////////////////////////////////////////////////////////
          }, "url_common.js": function _module2(_require2, _exports2) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/url/url_common.js                                                  //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            var URL = _exports2.URL = {};

            function encodeString(str) {
              return encodeURIComponent(str).replace(/\*/g, '%2A');
            }

            // Encode URL paramaters into a query string, handling nested objects and
            // arrays properly.
            URL._encodeParams = function (params, prefix) {
              var str = [];
              var isParamsArray = Array.isArray(params);
              for (var p in params) {
                if (Object.prototype.hasOwnProperty.call(params, p)) {
                  var k = prefix ? prefix + '[' + (isParamsArray ? '' : p) + ']' : p;
                  var v = params[p];
                  if (typeof v === 'object') {
                    str.push(this._encodeParams(v, k));
                  } else {
                    var encodedKey = encodeString(k).replace('%5B', '[').replace('%5D', ']');
                    str.push(encodedKey + '=' + encodeString(v));
                  }
                }
              }
              return str.join('&').replace(/%20/g, '+');
            };

            _exports2.buildUrl = function (before_qmark, from_qmark, opt_query, opt_params) {
              var url_without_query = before_qmark;
              var query = from_qmark ? from_qmark.slice(1) : null;

              if (typeof opt_query === "string") query = String(opt_query);

              if (opt_params) {
                query = query || "";
                var prms = URL._encodeParams(opt_params);
                if (query && prms) query += '&';
                query += prms;
              }

              var url = url_without_query;
              if (query !== null) url += "?" + query;

              return url;
            };

            /////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports3 = _require3("/node_modules/meteor/url/url_client.js");

  /* Exports */
  Package._define("url", _exports3, {
    URL: URL
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Reload = Package.reload.Reload;
  var Base64 = Package.base64.Base64;
  var URL = Package.url.URL;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var OAuth, Oauth;

  var _require = meteorInstall({ "node_modules": { "meteor": { "oauth": { "oauth_client.js": function _module() {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/oauth/oauth_client.js                                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // credentialToken -> credentialSecret. You must provide both the
            // credentialToken and the credentialSecret to retrieve an access token from
            // the _pendingCredentials collection.
            const credentialSecrets = {};
            OAuth = {};

            OAuth.showPopup = (url, callback, dimensions) => {
              throw new Error("OAuth.showPopup must be implemented on this arch.");
            }; // Determine the login style (popup or redirect) for this login flow.
            //
            //


            OAuth._loginStyle = (service, config, options) => {
              if (Meteor.isCordova) {
                return "popup";
              }

              let loginStyle = options && options.loginStyle || config.loginStyle || 'popup';
              if (!["popup", "redirect"].includes(loginStyle)) throw new Error("Invalid login style: ".concat(loginStyle)); // If we don't have session storage (for example, Safari in private
              // mode), the redirect login flow won't work, so fallback to the
              // popup style.

              if (loginStyle === 'redirect') {
                try {
                  sessionStorage.setItem('Meteor.oauth.test', 'test');
                  sessionStorage.removeItem('Meteor.oauth.test');
                } catch (e) {
                  loginStyle = 'popup';
                }
              }

              return loginStyle;
            };

            OAuth._stateParam = (loginStyle, credentialToken, redirectUrl) => {
              const state = {
                loginStyle,
                credentialToken,
                isCordova: Meteor.isCordova
              };
              if (loginStyle === 'redirect') state.redirectUrl = redirectUrl || '' + window.location; // Encode base64 as not all login services URI-encode the state
              // parameter when they pass it back to us.
              // Use the 'base64' package here because 'btoa' isn't supported in IE8/9.

              return Base64.encode(JSON.stringify(state));
            }; // At the beginning of the redirect login flow, before we redirect to
            // the login service, save the credential token for this login attempt
            // in the reload migration data.
            //


            OAuth.saveDataForRedirect = (loginService, credentialToken) => {
              Reload._onMigrate('oauth', () => [true, {
                loginService,
                credentialToken
              }]);

              Reload._migrate(null, {
                immediateMigration: true
              });
            }; // At the end of the redirect login flow, when we've redirected back
            // to the application, retrieve the credentialToken and (if the login
            // was successful) the credentialSecret.
            //
            // Called at application startup.  Returns null if this is normal
            // application startup and we weren't just redirected at the end of
            // the login flow.
            //


            OAuth.getDataAfterRedirect = () => {
              const migrationData = Reload._migrationData('oauth');

              if (!(migrationData && migrationData.credentialToken)) return null;
              const {
                credentialToken
              } = migrationData;
              const key = OAuth._storageTokenPrefix + credentialToken;
              let credentialSecret;

              try {
                credentialSecret = sessionStorage.getItem(key);
                sessionStorage.removeItem(key);
              } catch (e) {
                Meteor._debug('error retrieving credentialSecret', e);
              }

              return {
                loginService: migrationData.loginService,
                credentialToken,
                credentialSecret
              };
            }; // Launch an OAuth login flow.  For the popup login style, show the
            // popup.  For the redirect login style, save the credential token for
            // this login attempt in the reload migration data, and redirect to
            // the service for the login.
            //
            // options:
            //  loginService: "facebook", "google", etc.
            //  loginStyle: "popup" or "redirect"
            //  loginUrl: The URL at the login service provider to start the OAuth flow.
            //  credentialRequestCompleteCallback: for the popup flow, call when the popup
            //    is closed and we have the credential from the login service.
            //  credentialToken: our identifier for this login flow.
            //


            OAuth.launchLogin = options => {
              if (!options.loginService) throw new Error('loginService required');

              if (options.loginStyle === 'popup') {
                OAuth.showPopup(options.loginUrl, options.credentialRequestCompleteCallback.bind(null, options.credentialToken), options.popupOptions);
              } else if (options.loginStyle === 'redirect') {
                OAuth.saveDataForRedirect(options.loginService, options.credentialToken);
                window.location = options.loginUrl;
              } else {
                throw new Error('invalid login style');
              }
            }; // XXX COMPAT WITH 0.7.0.1
            // Private interface but probably used by many oauth clients in atmosphere.


            OAuth.initiateLogin = (credentialToken, url, callback, dimensions) => {
              OAuth.showPopup(url, callback.bind(null, credentialToken), dimensions);
            }; // Called by the popup when the OAuth flow is completed, right before
            // the popup closes.


            OAuth._handleCredentialSecret = (credentialToken, secret) => {
              check(credentialToken, String);
              check(secret, String);

              if (!Object.prototype.hasOwnProperty.call(credentialSecrets, credentialToken)) {
                credentialSecrets[credentialToken] = secret;
              } else {
                throw new Error("Duplicate credential token from OAuth login");
              }
            }; // Used by accounts-oauth, which needs both a credentialToken and the
            // corresponding to credential secret to call the `login` method over DDP.


            OAuth._retrieveCredentialSecret = credentialToken => {
              // First check the secrets collected by OAuth._handleCredentialSecret,
              // then check localStorage. This matches what we do in
              // end_of_login_response.html.
              let secret = credentialSecrets[credentialToken];

              if (!secret) {
                const localStorageKey = OAuth._storageTokenPrefix + credentialToken;
                secret = Meteor._localStorage.getItem(localStorageKey);

                Meteor._localStorage.removeItem(localStorageKey);
              } else {
                delete credentialSecrets[credentialToken];
              }

              return secret;
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "oauth_browser.js": function _module2() {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/oauth/oauth_browser.js                                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Browser specific code for the OAuth package.
            // Open a popup window, centered on the screen, and call a callback when it
            // closes.
            //
            // @param url {String} url to show
            // @param callback {Function} Callback function to call on completion. Takes no
            //   arguments.
            // @param dimensions {optional Object(width, height)} The dimensions of
            //   the popup. If not passed defaults to something sane.
            OAuth.showPopup = (url, callback, dimensions) => {
              // default dimensions that worked well for facebook and google
              const popup = openCenteredPopup(url, dimensions && dimensions.width || 650, dimensions && dimensions.height || 331);
              const checkPopupOpen = setInterval(() => {
                let popupClosed;

                try {
                  // Fix for #328 - added a second test criteria (popup.closed === undefined)
                  // to humour this Android quirk:
                  // http://code.google.com/p/android/issues/detail?id=21061
                  popupClosed = popup.closed || popup.closed === undefined;
                } catch (e) {
                  // For some unknown reason, IE9 (and others?) sometimes (when
                  // the popup closes too quickly?) throws "SCRIPT16386: No such
                  // interface supported" when trying to read 'popup.closed'. Try
                  // again in 100ms.
                  return;
                }

                if (popupClosed) {
                  clearInterval(checkPopupOpen);
                  callback();
                }
              }, 100);
            };

            const openCenteredPopup = function (url, width, height) {
              const screenX = typeof window.screenX !== 'undefined' ? window.screenX : window.screenLeft;
              const screenY = typeof window.screenY !== 'undefined' ? window.screenY : window.screenTop;
              const outerWidth = typeof window.outerWidth !== 'undefined' ? window.outerWidth : document.body.clientWidth;
              const outerHeight = typeof window.outerHeight !== 'undefined' ? window.outerHeight : document.body.clientHeight - 22; // XXX what is the 22?
              // Use `outerWidth - width` and `outerHeight - height` for help in
              // positioning the popup centered relative to the current window

              const left = screenX + (outerWidth - width) / 2;
              const top = screenY + (outerHeight - height) / 2;
              const features = "width=".concat(width, ",height=").concat(height) + ",left=".concat(left, ",top=").concat(top, ",scrollbars=yes");
              const newwindow = window.open(url, 'Login', features);

              if (typeof newwindow === 'undefined') {
                // blocked by a popup blocker maybe?
                const err = new Error("The login popup was blocked by the browser");
                err.attemptedUrl = url;
                throw err;
              }

              if (newwindow.focus) newwindow.focus();
              return newwindow;
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "oauth_common.js": function module(_require2, _exports, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/oauth/oauth_common.js                                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module3.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            OAuth._storageTokenPrefix = "Meteor.oauth.credentialSecret-";

            OAuth._redirectUri = (serviceName, config, params, absoluteUrlOptions) => {
              // XXX COMPAT WITH 0.9.0
              // The redirect URI used to have a "?close" query argument.  We
              // detect whether we need to be backwards compatible by checking for
              // the absence of the `loginStyle` field, which wasn't used in the
              // code which had the "?close" argument.
              // This logic is duplicated in the tool so that the tool can do OAuth
              // flow with <= 0.9.0 servers (tools/auth.js).
              const query = config.loginStyle ? null : "close"; // Clone because we're going to mutate 'params'. The 'cordova' and
              // 'android' parameters are only used for picking the host of the
              // redirect URL, and not actually included in the redirect URL itself.

              let isCordova = false;
              let isAndroid = false;

              if (params) {
                params = _objectSpread({}, params);
                isCordova = params.cordova;
                isAndroid = params.android;
                delete params.cordova;
                delete params.android;

                if (Object.keys(params).length === 0) {
                  params = undefined;
                }
              }

              if (Meteor.isServer && isCordova) {
                const url = Npm.require('url');

                let rootUrl = process.env.MOBILE_ROOT_URL || __meteor_runtime_config__.ROOT_URL;

                if (isAndroid) {
                  // Match the replace that we do in cordova boilerplate
                  // (boilerplate-generator package).
                  // XXX Maybe we should put this in a separate package or something
                  // that is used here and by boilerplate-generator? Or maybe
                  // `Meteor.absoluteUrl` should know how to do this?
                  const parsedRootUrl = url.parse(rootUrl);

                  if (parsedRootUrl.hostname === "localhost") {
                    parsedRootUrl.hostname = "10.0.2.2";
                    delete parsedRootUrl.host;
                  }

                  rootUrl = url.format(parsedRootUrl);
                }

                absoluteUrlOptions = _objectSpread({}, absoluteUrlOptions, {
                  // For Cordova clients, redirect to the special Cordova root url
                  // (likely a local IP in development mode).
                  rootUrl
                });
              }

              return URL._constructUrl(Meteor.absoluteUrl("_oauth/".concat(serviceName), absoluteUrlOptions), query, params);
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "deprecated.js": function _module4() {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/oauth/deprecated.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // XXX COMPAT WITH 0.8.0
            Oauth = OAuth;
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/oauth/oauth_client.js");
  _require("/node_modules/meteor/oauth/oauth_browser.js");
  _require("/node_modules/meteor/oauth/oauth_common.js");
  _require("/node_modules/meteor/oauth/deprecated.js");

  /* Exports */
  Package._define("oauth", {
    OAuth: OAuth,
    Oauth: Oauth
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Accounts = Package['accounts-base'].Accounts;
  var OAuth = Package.oauth.OAuth;
  var Oauth = Package.oauth.Oauth;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  var _require = meteorInstall({ "node_modules": { "meteor": { "accounts-oauth": { "oauth_common.js": function _module() {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                       //
            // packages/accounts-oauth/oauth_common.js                                                               //
            //                                                                                                       //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            Accounts.oauth = {};
            const services = {};
            const hasOwn = Object.prototype.hasOwnProperty; // Helper for registering OAuth based accounts packages.
            // On the server, adds an index to the user collection.

            Accounts.oauth.registerService = name => {
              if (hasOwn.call(services, name)) throw new Error("Duplicate service: ".concat(name));
              services[name] = true;

              if (Meteor.server) {
                // Accounts.updateOrCreateUserFromExternalService does a lookup by this id,
                // so this should be a unique index. You might want to add indexes for other
                // fields returned by your service (eg services.github.login) but you can do
                // that in your app.
                Meteor.users._ensureIndex("services.".concat(name, ".id"), {
                  unique: true,
                  sparse: true
                });
              }
            }; // Removes a previously registered service.
            // This will disable logging in with this service, and serviceNames() will not
            // contain it.
            // It's worth noting that already logged in users will remain logged in unless
            // you manually expire their sessions.


            Accounts.oauth.unregisterService = name => {
              if (!hasOwn.call(services, name)) throw new Error("Service not found: ".concat(name));
              delete services[name];
            };

            Accounts.oauth.serviceNames = () => Object.keys(services);
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "oauth_client.js": function _module2() {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                       //
            // packages/accounts-oauth/oauth_client.js                                                               //
            //                                                                                                       //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Documentation for Meteor.loginWithExternalService

            /**
             * @name loginWith<ExternalService>
             * @memberOf Meteor
             * @function
             * @summary Log the user in using an external service.
             * @locus Client
             * @param {Object} [options]
             * @param {String[]} options.requestPermissions A list of permissions to request from the user.
             * @param {Boolean} options.requestOfflineToken If true, asks the user for permission to act on their behalf when offline. This stores an additional offline token in the `services` field of the user document. Currently only supported with Google.
             * @param {Object} options.loginUrlParameters Provide additional parameters to the authentication URI. Currently only supported with Google. See [Google Identity Platform documentation](https://developers.google.com/identity/protocols/OpenIDConnect#authenticationuriparameters).
             * @param {String} options.loginHint An email address that the external service will use to pre-fill the login prompt. Currently only supported with Meteor developer accounts and Google accounts. If used with Google, the Google User ID can also be passed.
             * @param {String} options.loginStyle Login style ("popup" or "redirect", defaults to the login service configuration).  The "popup" style opens the login page in a separate popup window, which is generally preferred because the Meteor application doesn't need to be reloaded.  The "redirect" style redirects the Meteor application's window to the login page, and the login service provider redirects back to the Meteor application which is then reloaded.  The "redirect" style can be used in situations where a popup window can't be opened, such as in a mobile UIWebView.  The "redirect" style however relies on session storage which isn't available in Safari private mode, so the "popup" style will be forced if session storage can't be used.
             * @param {String} options.redirectUrl If using "redirect" login style, the user will be returned to this URL after authorisation has been completed.
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure. The callback cannot be called if you are using the "redirect" `loginStyle`, because the app will have reloaded in the meantime; try using [client-side login hooks](#accounts_onlogin) instead.
             * @importFromPackage meteor
             */
            // Allow server to specify a specify subclass of errors. We should come
            // up with a more generic way to do this!
            const convertError = err => {
              if (err && err instanceof Meteor.Error && err.error === Accounts.LoginCancelledError.numericError) return new Accounts.LoginCancelledError(err.reason);else return err;
            }; // For the redirect login flow, the final step is that we're
            // redirected back to the application.  The credentialToken for this
            // login attempt is stored in the reload migration data, and the
            // credentialSecret for a successful login is stored in session
            // storage.


            Meteor.startup(() => {
              const oauth = OAuth.getDataAfterRedirect();
              if (!oauth) return; // We'll only have the credentialSecret if the login completed
              // successfully.  However we still call the login method anyway to
              // retrieve the error if the login was unsuccessful.

              const methodName = 'login';
              const {
                credentialToken,
                credentialSecret
              } = oauth;
              const methodArguments = [{
                oauth: {
                  credentialToken,
                  credentialSecret
                }
              }];
              Accounts.callLoginMethod({
                methodArguments,
                userCallback: err => {
                  // The redirect login flow is complete.  Construct an
                  // `attemptInfo` object with the login result, and report back
                  // to the code which initiated the login attempt
                  // (e.g. accounts-ui, when that package is being used).
                  err = convertError(err);

                  Accounts._pageLoadLogin({
                    type: oauth.loginService,
                    allowed: !err,
                    error: err,
                    methodName,
                    methodArguments
                  });
                }
              });
            }); // Send an OAuth login method to the server. If the user authorized
            // access in the popup this should log the user in, otherwise
            // nothing should happen.

            Accounts.oauth.tryLoginAfterPopupClosed = (credentialToken, callback) => {
              const credentialSecret = OAuth._retrieveCredentialSecret(credentialToken) || null;
              Accounts.callLoginMethod({
                methodArguments: [{
                  oauth: {
                    credentialToken,
                    credentialSecret
                  }
                }],
                userCallback: callback && (err => callback(convertError(err)))
              });
            };

            Accounts.oauth.credentialRequestCompleteHandler = callback => credentialTokenOrError => {
              if (credentialTokenOrError && credentialTokenOrError instanceof Error) {
                callback && callback(credentialTokenOrError);
              } else {
                Accounts.oauth.tryLoginAfterPopupClosed(credentialTokenOrError, callback);
              }
            };
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/accounts-oauth/oauth_common.js");
  _require("/node_modules/meteor/accounts-oauth/oauth_client.js");

  /* Exports */
  Package._define("accounts-oauth");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Accounts = Package['accounts-base'].Accounts;
  var Mongo = Package.mongo.Mongo;

  /* Package-scope variables */
  var ServiceConfiguration;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                    //
    // packages/service-configuration/service_configuration_common.js                     //
    //                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////
    //
    if (typeof ServiceConfiguration === 'undefined') {
      ServiceConfiguration = {};
    }

    // Table containing documents with configuration options for each
    // login service
    ServiceConfiguration.configurations = new Mongo.Collection("meteor_accounts_loginServiceConfiguration", {
      _preventAutopublish: true,
      connection: Meteor.isClient ? Accounts.connection : Meteor.connection
    });
    // Leave this collection open in insecure mode. In theory, someone could
    // hijack your oauth connect requests to a different endpoint or appId,
    // but you did ask for 'insecure'. The advantage is that it is much
    // easier to write a configuration wizard that works only in insecure
    // mode.


    // Thrown when trying to use a login service which is not configured
    ServiceConfiguration.ConfigError = function (serviceName) {
      if (Meteor.isClient && !Accounts.loginServicesConfigured()) {
        this.message = "Login service configuration not yet loaded";
      } else if (serviceName) {
        this.message = "Service " + serviceName + " not configured";
      } else {
        this.message = "Service not configured";
      }
    };
    ServiceConfiguration.ConfigError.prototype = new Error();
    ServiceConfiguration.ConfigError.prototype.name = 'ServiceConfiguration.ConfigError';

    ////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("service-configuration", {
    ServiceConfiguration: ServiceConfiguration
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("oauth2");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var OAuth = Package.oauth.OAuth;
  var Oauth = Package.oauth.Oauth;
  var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;
  var Random = Package.random.Random;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Google;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "google-oauth": { "google_client.js": function module(_require, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                  //
            // packages/google-oauth/google_client.js                                                                           //
            //                                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let Google;
            _module.link("./namespace.js", {
              default(v) {
                Google = v;
              }

            }, 0);
            const hasOwn = Object.prototype.hasOwnProperty;
            const ILLEGAL_PARAMETERS = {
              'response_type': 1,
              'client_id': 1,
              'scope': 1,
              'redirect_uri': 1,
              'state': 1
            }; // Request Google credentials for the user
            // @param options {optional}
            // @param credentialRequestCompleteCallback {Function} Callback function to call on
            //   completion. Takes one argument, credentialToken on success, or Error on
            //   error.

            Google.requestCredential = (options, credentialRequestCompleteCallback) => {
              // support both (options, callback) and (callback).
              if (!credentialRequestCompleteCallback && typeof options === 'function') {
                credentialRequestCompleteCallback = options;
                options = {};
              } else if (!options) {
                options = {};
              }

              const config = ServiceConfiguration.configurations.findOne({
                service: 'google'
              });

              if (!config) {
                credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError());
                return;
              }

              const credentialToken = Random.secret(); // we need the email scope to get user id from google.

              const requiredScopes = {
                'email': 1
              };
              let scopes = options.requestPermissions || ['profile'];
              scopes.forEach(scope => requiredScopes[scope] = 1);
              scopes = Object.keys(requiredScopes);
              const loginUrlParameters = {};

              if (config.loginUrlParameters) {
                Object.assign(loginUrlParameters, config.loginUrlParameters);
              }

              if (options.loginUrlParameters) {
                Object.assign(loginUrlParameters, options.loginUrlParameters);
              } // validate options keys


              Object.keys(loginUrlParameters).forEach(key => {
                if (hasOwn.call(ILLEGAL_PARAMETERS, key)) {
                  throw new Error("Google.requestCredential: Invalid loginUrlParameter: ".concat(key));
                }
              }); // backwards compatible options

              if (options.requestOfflineToken != null) {
                loginUrlParameters.access_type = options.requestOfflineToken ? 'offline' : 'online';
              }

              if (options.prompt != null) {
                loginUrlParameters.prompt = options.prompt;
              } else if (options.forceApprovalPrompt) {
                loginUrlParameters.prompt = 'consent';
              }

              if (options.loginHint) {
                loginUrlParameters.login_hint = options.loginHint;
              }

              const loginStyle = OAuth._loginStyle('google', config, options); // https://developers.google.com/accounts/docs/OAuth2WebServer#formingtheurl


              Object.assign(loginUrlParameters, {
                "response_type": "code",
                "client_id": config.clientId,
                "scope": scopes.join(' '),
                // space delimited
                "redirect_uri": OAuth._redirectUri('google', config),
                "state": OAuth._stateParam(loginStyle, credentialToken, options.redirectUrl)
              });
              const loginUrl = 'https://accounts.google.com/o/oauth2/auth?' + Object.keys(loginUrlParameters).map(param => "".concat(encodeURIComponent(param), "=").concat(encodeURIComponent(loginUrlParameters[param]))).join("&");
              OAuth.launchLogin({
                loginService: "google",
                loginStyle,
                loginUrl,
                credentialRequestCompleteCallback,
                credentialToken,
                popupOptions: {
                  height: 600
                }
              });
            };
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "namespace.js": function module(_require3, _exports3, _module2) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                  //
            // packages/google-oauth/namespace.js                                                                               //
            //                                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            !function (module1) {
              // The module.exports object of this module becomes the Google namespace
              // for other modules in this package.
              Google = _module2.exports; // So that api.export finds the "Google" property.

              Google.Google = Google;
            }.call(this, _module2);
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require2("/node_modules/meteor/google-oauth/google_client.js");
  var _exports2 = _require2("/node_modules/meteor/google-oauth/namespace.js");

  /* Exports */
  Package._define("google-oauth", _exports2, {
    Google: Google
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Accounts = Package['accounts-base'].Accounts;
  var Google = Package['google-oauth'].Google;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  var _require = meteorInstall({ "node_modules": { "meteor": { "accounts-google": { "notice.js": function _module() {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                       //
            // packages/accounts-google/notice.js                                                                    //
            //                                                                                                       //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            if (Package['accounts-ui'] && !Package['service-configuration'] && !Object.prototype.hasOwnProperty.call(Package, 'google-config-ui')) {
              console.warn("Note: You're using accounts-ui and accounts-google,\n" + "but didn't install the configuration UI for the Google\n" + "OAuth. You can install it with:\n" + "\n" + "    meteor add google-config-ui" + "\n");
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "google.js": function module(_require2, _exports, _module2) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                       //
            // packages/accounts-google/google.js                                                                    //
            //                                                                                                       //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module2.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            Accounts.oauth.registerService('google');

            if (Meteor.isClient) {
              const loginWithGoogle = (options, callback) => {
                // support a callback without options
                if (!callback && typeof options === "function") {
                  callback = options;
                  options = null;
                }

                if (Meteor.isCordova && Google.signIn) {
                  // After 20 April 2017, Google OAuth login will no longer work from
                  // a WebView, so Cordova apps must use Google Sign-In instead.
                  // https://github.com/meteor/meteor/issues/8253
                  Google.signIn(options, callback);
                  return;
                } // Use Google's domain-specific login page if we want to restrict creation to
                // a particular email domain. (Don't use it if restrictCreationByEmailDomain
                // is a function.) Note that all this does is change Google's UI ---
                // accounts-base/accounts_server.js still checks server-side that the server
                // has the proper email address after the OAuth conversation.


                if (typeof Accounts._options.restrictCreationByEmailDomain === 'string') {
                  options = _objectSpread({}, options);
                  options.loginUrlParameters = _objectSpread({}, options.loginUrlParameters);
                  options.loginUrlParameters.hd = Accounts._options.restrictCreationByEmailDomain;
                }

                const credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);
                Google.requestCredential(options, credentialRequestCompleteCallback);
              };

              Accounts.registerClientLoginFunction('google', loginWithGoogle);

              Meteor.loginWithGoogle = function () {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                return Accounts.applyLoginFunction('google', args);
              };
            } else {
              Accounts.addAutopublishFields({
                forLoggedInUser: // publish access token since it can be used from the client (if
                // transmitted over ssl or on
                // localhost). https://developers.google.com/accounts/docs/OAuth2UserAgent
                // refresh token probably shouldn't be sent down.
                Google.whitelistedFields.concat(['accessToken', 'expiresAt']).map(subfield => "services.google.".concat(subfield) // don't publish refresh token
                ),
                forOtherUsers: // even with autopublish, no legitimate web app should be
                // publishing all users' emails
                Google.whitelistedFields.filter(field => field !== 'email' && field !== 'verified_email').map(subfield => "services.google.".concat(subfield))
              });
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/accounts-google/notice.js");
  _require("/node_modules/meteor/accounts-google/google.js");

  /* Exports */
  Package._define("accounts-google");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var URL = Package.url.URL;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var HTTP;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "http": { "httpcall_client.js": function module(_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/http/httpcall_client.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var URL = _require("meteor/url").URL;
            var common = _require("./httpcall_common.js");
            var HTTP = _exports.HTTP = common.HTTP;
            var hasOwn = Object.prototype.hasOwnProperty;

            /**
             * @summary Perform an outbound HTTP request.
             * @locus Anywhere
             * @param {String} method The [HTTP method](http://en.wikipedia.org/wiki/HTTP_method) to use, such as "`GET`", "`POST`", or "`HEAD`".
             * @param {String} url The URL to retrieve.
             * @param {Object} [options]
             * @param {String} options.content String to use as the HTTP request body.
             * @param {Object} options.data JSON-able object to stringify and use as the HTTP request body. Overwrites `content`.
             * @param {String} options.query Query string to go in the URL. Overwrites any query string in `url`.
             * @param {Object} options.params Dictionary of request parameters to be encoded and placed in the URL (for GETs) or request body (for POSTs).  If `content` or `data` is specified, `params` will always be placed in the URL.
             * @param {String} options.auth HTTP basic authentication string of the form `"username:password"`
             * @param {Object} options.headers Dictionary of strings, headers to add to the HTTP request.
             * @param {Number} options.timeout Maximum time in milliseconds to wait for the request before failing.  There is no timeout by default.
             * @param {Boolean} options.followRedirects If `true`, transparently follow HTTP redirects. Cannot be set to `false` on the client. Default `true`.
             * @param {Object} options.npmRequestOptions On the server, `HTTP.call` is implemented by using the [npm `request` module](https://www.npmjs.com/package/request). Any options in this object will be passed directly to the `request` invocation.
             * @param {Function} options.beforeSend On the client, this will be called before the request is sent to allow for more direct manipulation of the underlying XMLHttpRequest object, which will be passed as the first argument. If the callback returns `false`, the request will be not be sent.
             * @param {Function} [asyncCallback] Optional callback.  If passed, the method runs asynchronously, instead of synchronously, and calls asyncCallback.  On the client, this callback is required.
             */
            HTTP.call = function (method, url, options, callback) {

              ////////// Process arguments //////////

              if (!callback && typeof options === "function") {
                // support (method, url, callback) argument list
                callback = options;
                options = null;
              }

              options = options || {};

              if (typeof callback !== "function") throw new Error("Can't make a blocking HTTP call from the client; callback required.");

              method = (method || "").toUpperCase();

              var headers = {};

              var content = options.content;
              if (options.data) {
                content = JSON.stringify(options.data);
                headers['Content-Type'] = 'application/json';
              }

              var params_for_url, params_for_body;
              if (content || method === "GET" || method === "HEAD") params_for_url = options.params;else params_for_body = options.params;

              url = URL._constructUrl(url, options.query, params_for_url);

              if (options.followRedirects === false) throw new Error("Option followRedirects:false not supported on client.");

              if (hasOwn.call(options, 'npmRequestOptions')) {
                throw new Error("Option npmRequestOptions not supported on client.");
              }

              var username, password;
              if (options.auth) {
                var colonLoc = options.auth.indexOf(':');
                if (colonLoc < 0) throw new Error('Option auth should be of the form "username:password"');
                username = options.auth.substring(0, colonLoc);
                password = options.auth.substring(colonLoc + 1);
              }

              if (params_for_body) {
                content = URL._encodeParams(params_for_body);
              }

              if (options.headers) {
                Object.keys(options.headers).forEach(function (key) {
                  headers[key] = options.headers[key];
                });
              }

              ////////// Callback wrapping //////////

              // wrap callback to add a 'response' property on an error, in case
              // we have both (http 4xx/5xx error, which has a response payload)
              callback = function (callback) {
                var called = false;
                return function (error, response) {
                  if (!called) {
                    called = true;
                    if (error && response) {
                      error.response = response;
                    }
                    callback(error, response);
                  }
                };
              }(callback);

              ////////// Kickoff! //////////

              // from this point on, errors are because of something remote, not
              // something we should check in advance. Turn exceptions into error
              // results.
              try {
                // setup XHR object
                var xhr;
                if (typeof XMLHttpRequest !== "undefined") xhr = new XMLHttpRequest();else if (typeof ActiveXObject !== "undefined") xhr = new ActiveXObject("Microsoft.XMLHttp"); // IE6
                else throw new Error("Can't create XMLHttpRequest"); // ???

                xhr.open(method, url, true, username, password);

                for (var k in headers) xhr.setRequestHeader(k, headers[k]);

                // setup timeout
                var timed_out = false;
                var timer;
                if (options.timeout) {
                  timer = Meteor.setTimeout(function () {
                    timed_out = true;
                    xhr.abort();
                  }, options.timeout);
                };

                // callback on complete
                xhr.onreadystatechange = function (evt) {
                  if (xhr.readyState === 4) {
                    // COMPLETE
                    if (timer) Meteor.clearTimeout(timer);

                    if (timed_out) {
                      callback(new Error("Connection timeout"));
                    } else if (!xhr.status) {
                      // no HTTP response
                      callback(new Error("Connection lost"));
                    } else {

                      var response = {};
                      response.statusCode = xhr.status;
                      response.content = xhr.responseText;

                      response.headers = {};
                      var header_str = xhr.getAllResponseHeaders();

                      // https://github.com/meteor/meteor/issues/553
                      //
                      // In Firefox there is a weird issue, sometimes
                      // getAllResponseHeaders returns the empty string, but
                      // getResponseHeader returns correct results. Possibly this
                      // issue:
                      // https://bugzilla.mozilla.org/show_bug.cgi?id=608735
                      //
                      // If this happens we can't get a full list of headers, but
                      // at least get content-type so our JSON decoding happens
                      // correctly. In theory, we could try and rescue more header
                      // values with a list of common headers, but content-type is
                      // the only vital one for now.
                      if ("" === header_str && xhr.getResponseHeader("content-type")) header_str = "content-type: " + xhr.getResponseHeader("content-type");

                      var headers_raw = header_str.split(/\r?\n/);
                      headers_raw.forEach(function (h) {
                        var m = /^(.*?):(?:\s+)(.*)$/.exec(h);
                        if (m && m.length === 3) {
                          response.headers[m[1].toLowerCase()] = m[2];
                        }
                      });

                      common.populateData(response);

                      var error = null;
                      if (response.statusCode >= 400) {
                        error = common.makeErrorByStatus(response.statusCode, response.content);
                      }

                      callback(error, response);
                    }
                  }
                };

                // Allow custom control over XHR and abort early.
                if (typeof options.beforeSend === "function") {
                  // Call the callback and check to see if the request was aborted
                  if (false === options.beforeSend.call(null, xhr, options)) {
                    return xhr.abort();
                  }
                }

                // send it on its way
                xhr.send(content);
              } catch (err) {
                callback(err);
              }
            };

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "httpcall_common.js": function _module2(_require3, _exports3) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/http/httpcall_common.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var MAX_LENGTH = 500; // if you change this, also change the appropriate test
            var slice = Array.prototype.slice;

            _exports3.makeErrorByStatus = function (statusCode, content) {
              var message = "failed [" + statusCode + "]";

              if (content) {
                var stringContent = typeof content == "string" ? content : content.toString();

                message += ' ' + truncate(stringContent.replace(/\n/g, ' '), MAX_LENGTH);
              }

              return new Error(message);
            };

            function truncate(str, length) {
              return str.length > length ? str.slice(0, length) + '...' : str;
            }

            // Fill in `response.data` if the content-type is JSON.
            _exports3.populateData = function (response) {
              // Read Content-Type header, up to a ';' if there is one.
              // A typical header might be "application/json; charset=utf-8"
              // or just "application/json".
              var contentType = (response.headers['content-type'] || ';').split(';')[0];

              // Only try to parse data as JSON if server sets correct content type.
              if (['application/json', 'text/javascript', 'application/javascript', 'application/x-javascript'].indexOf(contentType) >= 0) {
                try {
                  response.data = JSON.parse(response.content);
                } catch (err) {
                  response.data = null;
                }
              } else {
                response.data = null;
              }
            };

            var HTTP = _exports3.HTTP = {};

            /**
             * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with "GET" as the first argument.
             * @param {String} url The URL to which the request should be sent.
             * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).
             * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.
             * @locus Anywhere
             */
            HTTP.get = function () /* varargs */{
              return HTTP.call.apply(this, ["GET"].concat(slice.call(arguments)));
            };

            /**
             * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with "POST" as the first argument.
             * @param {String} url The URL to which the request should be sent.
             * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).
             * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.
             * @locus Anywhere
             */
            HTTP.post = function () /* varargs */{
              return HTTP.call.apply(this, ["POST"].concat(slice.call(arguments)));
            };

            /**
             * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with "PUT" as the first argument.
             * @param {String} url The URL to which the request should be sent.
             * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).
             * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.
             * @locus Anywhere
             */
            HTTP.put = function () /* varargs */{
              return HTTP.call.apply(this, ["PUT"].concat(slice.call(arguments)));
            };

            /**
             * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with "DELETE" as the first argument. (Named `del` to avoid conflict with the Javascript keyword `delete`)
             * @param {String} url The URL to which the request should be sent.
             * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).
             * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.
             * @locus Anywhere
             */
            HTTP.del = function () /* varargs */{
              return HTTP.call.apply(this, ["DELETE"].concat(slice.call(arguments)));
            };

            /**
             * @summary Send an HTTP `PATCH` request. Equivalent to calling [`HTTP.call`](#http_call) with "PATCH" as the first argument.
             * @param {String} url The URL to which the request should be sent.
             * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).
             * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.
             * @locus Anywhere
             */
            HTTP.patch = function () /* varargs */{
              return HTTP.call.apply(this, ["PATCH"].concat(slice.call(arguments)));
            };

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/http/httpcall_client.js");

  /* Exports */
  Package._define("http", _exports2, {
    HTTP: HTTP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var HTTP = Package.http.HTTP;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ostrio:cookies": { "cookies.js": function module(_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ostrio_cookies/cookies.js                                                                                 //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Cookies: () => Cookies
            });
            let Meteor;
            _module.link("meteor/meteor", {
              Meteor(v) {
                Meteor = v;
              }

            }, 0);
            let HTTP;
            let WebApp;

            if (Meteor.isServer) {
              WebApp = _require('meteor/webapp').WebApp;
            } else {
              HTTP = _require('meteor/http').HTTP;
            }

            const NoOp = () => {};

            const urlRE = /\/___cookie___\/set/;
            const rootUrl = Meteor.isServer ? process.env.ROOT_URL : window.__meteor_runtime_config__.ROOT_URL || window.__meteor_runtime_config__.meteorEnv.ROOT_URL || false;
            const mobileRootUrl = Meteor.isServer ? process.env.MOBILE_ROOT_URL : window.__meteor_runtime_config__.MOBILE_ROOT_URL || window.__meteor_runtime_config__.meteorEnv.MOBILE_ROOT_URL || false;
            const helpers = {
              isUndefined(obj) {
                return obj === void 0;
              },

              isArray(obj) {
                return Array.isArray(obj);
              },

              clone(obj) {
                if (!this.isObject(obj)) return obj;
                return this.isArray(obj) ? obj.slice() : Object.assign({}, obj);
              }

            };
            const _helpers = ['Number', 'Object', 'Function'];

            for (let i = 0; i < _helpers.length; i++) {
              helpers['is' + _helpers[i]] = function (obj) {
                return Object.prototype.toString.call(obj) === '[object ' + _helpers[i] + ']';
              };
            }
            /*
             * @url https://github.com/jshttp/cookie/blob/master/index.js
             * @name cookie
             * @author jshttp
             * @license
             * (The MIT License)
             *
             * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>
             * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>
             *
             * Permission is hereby granted, free of charge, to any person obtaining
             * a copy of this software and associated documentation files (the
             * 'Software'), to deal in the Software without restriction, including
             * without limitation the rights to use, copy, modify, merge, publish,
             * distribute, sublicense, and/or sell copies of the Software, and to
             * permit persons to whom the Software is furnished to do so, subject to
             * the following conditions:
             *
             * The above copyright notice and this permission notice shall be
             * included in all copies or substantial portions of the Software.
             *
             * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
             * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
             * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
             * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
             * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
             * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
             * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
             */

            const decode = decodeURIComponent;
            const encode = encodeURIComponent;
            const pairSplitRegExp = /; */;
            /*
             * RegExp to match field-content in RFC 7230 sec 3.2
             *
             * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
             * field-vchar   = VCHAR / obs-text
             * obs-text      = %x80-FF
             */

            const fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
            /*
             * @function
             * @name tryDecode
             * @param {String} str
             * @param {Function} d
             * @summary Try decoding a string using a decoding function.
             * @private
             */

            const tryDecode = (str, d) => {
              try {
                return d(str);
              } catch (e) {
                return str;
              }
            };
            /*
             * @function
             * @name parse
             * @param {String} str
             * @param {Object} [options]
             * @return {Object}
             * @summary
             * Parse a cookie header.
             * Parse the given cookie header string into an object
             * The object has the various cookies as keys(names) => values
             * @private
             */

            const parse = (str, options) => {
              if (typeof str !== 'string') {
                throw new Meteor.Error(404, 'argument str must be a string');
              }

              const obj = {};
              const opt = options || {};
              let val;
              let key;
              let eqIndx;
              str.split(pairSplitRegExp).forEach(pair => {
                eqIndx = pair.indexOf('=');

                if (eqIndx < 0) {
                  return;
                }

                key = pair.substr(0, eqIndx).trim();
                key = tryDecode(unescape(key), opt.decode || decode);
                val = pair.substr(++eqIndx, pair.length).trim();

                if (val[0] === '"') {
                  val = val.slice(1, -1);
                }

                if (void 0 === obj[key]) {
                  obj[key] = tryDecode(val, opt.decode || decode);
                }
              });
              return obj;
            };
            /*
             * @function
             * @name antiCircular
             * @param data {Object} - Circular or any other object which needs to be non-circular
             * @private
             */

            const antiCircular = _obj => {
              const object = helpers.clone(_obj);
              const cache = new Map();
              return JSON.stringify(object, (key, value) => {
                if (typeof value === 'object' && value !== null) {
                  if (cache.get(value)) {
                    return void 0;
                  }

                  cache.set(value, true);
                }

                return value;
              });
            };
            /*
             * @function
             * @name serialize
             * @param {String} name
             * @param {String} val
             * @param {Object} [options]
             * @return { cookieString: String, sanitizedValue: Mixed }
             * @summary
             * Serialize data into a cookie header.
             * Serialize the a name value pair into a cookie string suitable for
             * http headers. An optional options object specified cookie parameters.
             * serialize('foo', 'bar', { httpOnly: true }) => "foo=bar; httpOnly"
             * @private
             */

            const serialize = function (key, val) {
              let opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              let name;

              if (!fieldContentRegExp.test(key)) {
                name = escape(key);
              } else {
                name = key;
              }

              let sanitizedValue = val;
              let value = val;

              if (!helpers.isUndefined(value)) {
                if (helpers.isObject(value) || helpers.isArray(value)) {
                  const stringified = antiCircular(value);
                  value = encode("JSON.parse(".concat(stringified, ")"));
                  sanitizedValue = JSON.parse(stringified);
                } else {
                  value = encode(value);

                  if (value && !fieldContentRegExp.test(value)) {
                    value = escape(value);
                  }
                }
              } else {
                value = '';
              }

              const pairs = ["".concat(name, "=").concat(value)];

              if (helpers.isNumber(opt.maxAge)) {
                pairs.push("Max-Age=".concat(opt.maxAge));
              }

              if (opt.domain && typeof opt.domain === 'string') {
                if (!fieldContentRegExp.test(opt.domain)) {
                  throw new Meteor.Error(404, 'option domain is invalid');
                }

                pairs.push("Domain=".concat(opt.domain));
              }

              if (opt.path && typeof opt.path === 'string') {
                if (!fieldContentRegExp.test(opt.path)) {
                  throw new Meteor.Error(404, 'option path is invalid');
                }

                pairs.push("Path=".concat(opt.path));
              } else {
                pairs.push('Path=/');
              }

              opt.expires = opt.expires || opt.expire || false;

              if (opt.expires === Infinity) {
                pairs.push('Expires=Fri, 31 Dec 9999 23:59:59 GMT');
              } else if (opt.expires instanceof Date) {
                pairs.push("Expires=".concat(opt.expires.toUTCString()));
              } else if (opt.expires === 0) {
                pairs.push('Expires=0');
              } else if (helpers.isNumber(opt.expires)) {
                pairs.push("Expires=".concat(new Date(opt.expires).toUTCString()));
              }

              if (opt.httpOnly) {
                pairs.push('HttpOnly');
              }

              if (opt.secure) {
                pairs.push('Secure');
              }

              if (opt.firstPartyOnly) {
                pairs.push('First-Party-Only');
              }

              if (opt.sameSite) {
                pairs.push(opt.sameSite === true ? 'SameSite' : "SameSite=".concat(opt.sameSite));
              }

              return {
                cookieString: pairs.join('; '),
                sanitizedValue
              };
            };

            const isStringifiedRegEx = /JSON\.parse\((.*)\)/;
            const isTypedRegEx = /false|true|null|undefined/;

            const deserialize = string => {
              if (typeof string !== 'string') {
                return string;
              }

              if (isStringifiedRegEx.test(string)) {
                let obj = string.match(isStringifiedRegEx)[1];

                if (obj) {
                  try {
                    return JSON.parse(decode(obj));
                  } catch (e) {
                    console.error('[ostrio:cookies] [.get()] [deserialize()] Exception:', e, string, obj);
                    return string;
                  }
                }

                return string;
              } else if (isTypedRegEx.test(string)) {
                return JSON.parse(string);
              }

              return string;
            };
            /*
             * @locus Anywhere
             * @class __cookies
             * @param opts {Object} - Options (configuration) object
             * @param opts._cookies {Object|String} - Current cookies as String or Object
             * @param opts.TTL {Number|Boolean} - Default cookies expiration time (max-age) in milliseconds, by default - session (false)
             * @param opts.runOnServer {Boolean} - Expose Cookies class to Server
             * @param opts.response {http.ServerResponse|Object} - This object is created internally by a HTTP server
             * @param opts.allowQueryStringCookies {Boolean} - Allow passing Cookies in a query string (in URL). Primary should be used only in Cordova environment
             * @param opts.allowedCordovaOrigins {Regex|Boolean} - [Server] Allow setting Cookies from that specific origin which in Meteor/Cordova is localhost:12XXX (^http://localhost:12[0-9]{3}$)
             * @summary Internal Class
             */

            class __cookies {
              constructor(opts) {
                this.TTL = opts.TTL || false;
                this.response = opts.response || false;
                this.runOnServer = opts.runOnServer || false;
                this.allowQueryStringCookies = opts.allowQueryStringCookies || false;
                this.allowedCordovaOrigins = opts.allowedCordovaOrigins || false;

                if (this.allowedCordovaOrigins === true) {
                  this.allowedCordovaOrigins = /^http:\/\/localhost:12[0-9]{3}$/;
                }

                this.originRE = new RegExp("^https?://(".concat(rootUrl ? rootUrl : '').concat(mobileRootUrl ? '|' + mobileRootUrl : '', ")$"));

                if (helpers.isObject(opts._cookies)) {
                  this.cookies = opts._cookies;
                } else {
                  this.cookies = parse(opts._cookies);
                }
              }
              /*
               * @locus Anywhere
               * @memberOf __cookies
               * @name get
               * @param {String} key  - The name of the cookie to read
               * @param {String} _tmp - Unparsed string instead of user's cookies
               * @summary Read a cookie. If the cookie doesn't exist a null value will be returned.
               * @returns {String|void}
               */

              get(key, _tmp) {
                const cookieString = _tmp ? parse(_tmp) : this.cookies;

                if (!key || !cookieString) {
                  return void 0;
                }

                if (cookieString.hasOwnProperty(key)) {
                  return deserialize(cookieString[key]);
                }

                return void 0;
              }
              /*
               * @locus Anywhere
               * @memberOf __cookies
               * @name set
               * @param {String}  key   - The name of the cookie to create/overwrite
               * @param {String}  value - The value of the cookie
               * @param {Object}  opts  - [Optional] Cookie options (see readme docs)
               * @summary Create/overwrite a cookie.
               * @returns {Boolean}
               */

              set(key, value) {
                let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                if (key && !helpers.isUndefined(value)) {
                  if (helpers.isNumber(this.TTL) && opts.expires === undefined) {
                    opts.expires = new Date(+new Date() + this.TTL);
                  }

                  const {
                    cookieString,
                    sanitizedValue
                  } = serialize(key, value, opts);
                  this.cookies[key] = sanitizedValue;

                  if (Meteor.isClient) {
                    document.cookie = cookieString;
                  } else if (this.response) {
                    this.response.setHeader('Set-Cookie', cookieString);
                  }

                  return true;
                }

                return false;
              }
              /*
               * @locus Anywhere
               * @memberOf __cookies
               * @name remove
               * @param {String} key    - The name of the cookie to create/overwrite
               * @param {String} path   - [Optional] The path from where the cookie will be
               * readable. E.g., "/", "/mydir"; if not specified, defaults to the current
               * path of the current document location (string or null). The path must be
               * absolute (see RFC 2965). For more information on how to use relative paths
               * in this argument, see: https://developer.mozilla.org/en-US/docs/Web/API/document.cookie#Using_relative_URLs_in_the_path_parameter
               * @param {String} domain - [Optional] The domain from where the cookie will
               * be readable. E.g., "example.com", ".example.com" (includes all subdomains)
               * or "subdomain.example.com"; if not specified, defaults to the host portion
               * of the current document location (string or null).
               * @summary Remove a cookie(s).
               * @returns {Boolean}
               */

              remove(key) {
                let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';
                let domain = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

                if (key && this.cookies.hasOwnProperty(key)) {
                  const {
                    cookieString
                  } = serialize(key, '', {
                    domain,
                    path,
                    expires: new Date(0)
                  });
                  delete this.cookies[key];

                  if (Meteor.isClient) {
                    document.cookie = cookieString;
                  } else if (this.response) {
                    this.response.setHeader('Set-Cookie', cookieString);
                  }

                  return true;
                } else if (!key && this.keys().length > 0 && this.keys()[0] !== '') {
                  const keys = Object.keys(this.cookies);

                  for (let i = 0; i < keys.length; i++) {
                    this.remove(keys[i]);
                  }

                  return true;
                }

                return false;
              }
              /*
               * @locus Anywhere
               * @memberOf __cookies
               * @name has
               * @param {String} key  - The name of the cookie to create/overwrite
               * @param {String} _tmp - Unparsed string instead of user's cookies
               * @summary Check whether a cookie exists in the current position.
               * @returns {Boolean}
               */

              has(key, _tmp) {
                const cookieString = _tmp ? parse(_tmp) : this.cookies;

                if (!key || !cookieString) {
                  return false;
                }

                return cookieString.hasOwnProperty(key);
              }
              /*
               * @locus Anywhere
               * @memberOf __cookies
               * @name keys
               * @summary Returns an array of all readable cookies from this location.
               * @returns {[String]}
               */

              keys() {
                if (this.cookies) {
                  return Object.keys(this.cookies);
                }

                return [];
              }
              /*
               * @locus Client
               * @memberOf __cookies
               * @name send
               * @param cb {Function} - Callback
               * @summary Send all cookies over XHR to server.
               * @returns {void}
               */

              send() {
                let cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NoOp;

                if (Meteor.isServer) {
                  cb(new Meteor.Error(400, 'Can\'t run `.send()` on server, it\'s Client only method!'));
                }

                if (this.runOnServer) {
                  let path = "".concat(window.__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || window.__meteor_runtime_config__.meteorEnv.ROOT_URL_PATH_PREFIX || '', "/___cookie___/set");
                  let query = '';

                  if (Meteor.isCordova && this.allowQueryStringCookies) {
                    const cookiesKeys = this.keys();
                    const cookiesArray = [];

                    for (let i = 0; i < cookiesKeys.length; i++) {
                      const {
                        sanitizedValue
                      } = serialize(cookiesKeys[i], this.get(cookiesKeys[i]));
                      const pair = "".concat(cookiesKeys[i], "=").concat(sanitizedValue);

                      if (!cookiesArray.includes(pair)) {
                        cookiesArray.push(pair);
                      }
                    }

                    if (cookiesArray.length) {
                      path = Meteor.absoluteUrl('___cookie___/set');
                      query = "?___cookies___=".concat(encodeURIComponent(cookiesArray.join('; ')));
                    }
                  }

                  HTTP.get("".concat(path).concat(query), {
                    beforeSend(xhr) {
                      xhr.withCredentials = true;
                      return true;
                    }

                  }, cb);
                } else {
                  cb(new Meteor.Error(400, 'Can\'t send cookies on server when `runOnServer` is false.'));
                }

                return void 0;
              }

            }
            /*
             * @function
             * @locus Server
             * @summary Middleware handler
             * @private
             */

            const __middlewareHandler = (request, response, opts) => {
              let _cookies = {};

              if (opts.runOnServer) {
                if (request.headers && request.headers.cookie) {
                  _cookies = parse(request.headers.cookie);
                }

                return new __cookies({
                  _cookies,
                  TTL: opts.TTL,
                  runOnServer: opts.runOnServer,
                  response,
                  allowQueryStringCookies: opts.allowQueryStringCookies
                });
              }

              throw new Meteor.Error(400, 'Can\'t use middleware when `runOnServer` is false.');
            };
            /*
             * @locus Anywhere
             * @class Cookies
             * @param opts {Object}
             * @param opts.TTL {Number} - Default cookies expiration time (max-age) in milliseconds, by default - session (false)
             * @param opts.auto {Boolean} - [Server] Auto-bind in middleware as `req.Cookies`, by default `true`
             * @param opts.handler {Function} - [Server] Middleware handler
             * @param opts.runOnServer {Boolean} - Expose Cookies class to Server
             * @param opts.allowQueryStringCookies {Boolean} - Allow passing Cookies in a query string (in URL). Primary should be used only in Cordova environment
             * @param opts.allowedCordovaOrigins {Regex|Boolean} - [Server] Allow setting Cookies from that specific origin which in Meteor/Cordova is localhost:12XXX (^http://localhost:12[0-9]{3}$)
             * @summary Main Cookie class
             */

            class Cookies extends __cookies {
              constructor() {
                let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                opts.TTL = helpers.isNumber(opts.TTL) ? opts.TTL : false;
                opts.runOnServer = opts.runOnServer !== false ? true : false;
                opts.allowQueryStringCookies = opts.allowQueryStringCookies !== true ? false : true;

                if (Meteor.isClient) {
                  opts._cookies = document.cookie;
                  super(opts);
                } else {
                  opts._cookies = {};
                  super(opts);
                  opts.auto = opts.auto !== false ? true : false;
                  this.opts = opts;
                  this.handler = helpers.isFunction(opts.handler) ? opts.handler : false;
                  this.onCookies = helpers.isFunction(opts.onCookies) ? opts.onCookies : false;

                  if (opts.runOnServer && !Cookies.isLoadedOnServer) {
                    Cookies.isLoadedOnServer = true;

                    if (opts.auto) {
                      WebApp.connectHandlers.use((req, res, next) => {
                        if (urlRE.test(req._parsedUrl.path)) {
                          const matchedCordovaOrigin = !!req.headers.origin && this.allowedCordovaOrigins && this.allowedCordovaOrigins.test(req.headers.origin);
                          const matchedOrigin = matchedCordovaOrigin || !!req.headers.origin && this.originRE.test(req.headers.origin);

                          if (matchedOrigin) {
                            res.setHeader('Access-Control-Allow-Credentials', 'true');
                            res.setHeader('Access-Control-Allow-Origin', req.headers.origin);
                          }

                          const cookiesArray = [];
                          let cookiesObject = {};

                          if (matchedCordovaOrigin && opts.allowQueryStringCookies && req.query.___cookies___) {
                            cookiesObject = parse(decodeURIComponent(req.query.___cookies___));
                          } else if (req.headers.cookie) {
                            cookiesObject = parse(req.headers.cookie);
                          }

                          const cookiesKeys = Object.keys(cookiesObject);

                          if (cookiesKeys.length) {
                            for (let i = 0; i < cookiesKeys.length; i++) {
                              const {
                                cookieString
                              } = serialize(cookiesKeys[i], cookiesObject[cookiesKeys[i]]);

                              if (!cookiesArray.includes(cookieString)) {
                                cookiesArray.push(cookieString);
                              }
                            }

                            if (cookiesArray.length) {
                              res.setHeader('Set-Cookie', cookiesArray);
                            }
                          }

                          helpers.isFunction(this.onCookies) && this.onCookies(__middlewareHandler(req, res, opts));
                          res.writeHead(200);
                          res.end('');
                        } else {
                          req.Cookies = __middlewareHandler(req, res, opts);
                          helpers.isFunction(this.handler) && this.handler(req.Cookies);
                          next();
                        }
                      });
                    }
                  }
                }
              }
              /*
               * @locus Server
               * @memberOf Cookies
               * @name middleware
               * @summary Get Cookies instance into callback
               * @returns {void}
               */

              middleware() {
                if (!Meteor.isServer) {
                  throw new Meteor.Error(500, '[ostrio:cookies] Can\'t use `.middleware()` on Client, it\'s Server only!');
                }

                return (req, res, next) => {
                  helpers.isFunction(this.handler) && this.handler(__middlewareHandler(req, res, this.opts));
                  next();
                };
              }

            }

            if (Meteor.isServer) {
              Cookies.isLoadedOnServer = false;
            }
            /* Export the Cookies class */
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/ostrio:cookies/cookies.js");

  /* Exports */
  Package._define("ostrio:cookies", _exports2);
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var ReactiveVar = Package['reactive-var'].ReactiveVar;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var HTTP = Package.http.HTTP;
  var DDP = Package['ddp-client'].DDP;
  var Mongo = Package.mongo.Mongo;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Random = Package.random.Random;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var FilesCollection;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ostrio:files": { "client.js": function module(_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ostrio_files/client.js                                                                                    //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              FilesCollection: () => FilesCollection
            });
            let Mongo;
            _module.link("meteor/mongo", {
              Mongo(v) {
                Mongo = v;
              }

            }, 0);
            let Meteor;
            _module.link("meteor/meteor", {
              Meteor(v) {
                Meteor = v;
              }

            }, 1);
            let DDP;
            _module.link("meteor/ddp-client", {
              DDP(v) {
                DDP = v;
              }

            }, 2);
            let Cookies;
            _module.link("meteor/ostrio:cookies", {
              Cookies(v) {
                Cookies = v;
              }

            }, 3);
            let check, Match;
            _module.link("meteor/check", {
              check(v) {
                check = v;
              },

              Match(v) {
                Match = v;
              }

            }, 4);
            let UploadInstance;
            _module.link("./upload.js", {
              UploadInstance(v) {
                UploadInstance = v;
              }

            }, 5);
            let FilesCollectionCore;
            _module.link("./core.js", {
              default(v) {
                FilesCollectionCore = v;
              }

            }, 6);
            let formatFleURL, helpers;
            _module.link("./lib.js", {
              formatFleURL(v) {
                formatFleURL = v;
              },

              helpers(v) {
                helpers = v;
              }

            }, 7);

            const NOOP = () => {};

            const allowedParams = ['debug', 'ddp', 'schema', 'public', 'chunkSize', 'downloadRoute', 'collection', 'collectionName', 'namingFunction', 'onBeforeUpload', 'allowClientCode', 'onbeforeunloadMessage', 'disableUpload'];
            /*
             * @locus Anywhere
             * @class FilesCollection
             * @param config           {Object}   - [Both]   Configuration object with next properties:
             * @param config.debug     {Boolean}  - [Both]   Turn on/of debugging and extra logging
             * @param config.ddp       {Object}   - [Client] Custom DDP connection. Object returned form `DDP.connect()`
             * @param config.schema    {Object}   - [Both]   Collection Schema
             * @param config.public    {Boolean}  - [Both]   Store files in folder accessible for proxy servers, for limits, and more - read docs`
             * @param config.chunkSize      {Number}  - [Both] Upload chunk size, default: 524288 bytes (0,5 Mb)
             * @param config.downloadRoute  {String}  - [Both]   Server Route used to retrieve files
             * @param config.collection     {Mongo.Collection} - [Both] Mongo Collection Instance
             * @param config.collectionName {String}  - [Both]   Collection name
             * @param config.namingFunction {Function}- [Both]   Function which returns `String`
             * @param config.onBeforeUpload {Function}- [Both]   Function which executes on server after receiving each chunk and on client right before beginning upload. Function context is `File` - so you are able to check for extension, mime-type, size and etc.
             * return `true` to continue
             * return `false` or `String` to abort upload
             * @param config.allowClientCode  {Boolean}  - [Both]   Allow to run `remove` from client
             * @param config.onbeforeunloadMessage {String|Function} - [Client] Message shown to user when closing browser's window or tab while upload process is running
             * @param config.disableUpload {Boolean} - Disable file upload, useful for server only solutions
             * @param config.allowQueryStringCookies {Boolean} - Allow passing Cookies in a query string (in URL). Primary should be used only in Cordova environment. Note: this option will be used only on Cordova. Default: `false`
             * @summary Create new instance of FilesCollection
             */

            class FilesCollection extends FilesCollectionCore {
              constructor(config) {
                super();

                if (config) {
                  Object.keys(config).forEach(param => {
                    if (allowedParams.includes(param)) {
                      this[param] = config[param];
                    }
                  });
                }

                const self = this;
                const cookie = new Cookies({
                  allowQueryStringCookies: this.allowQueryStringCookies
                });

                if (!helpers.isBoolean(this.debug)) {
                  this.debug = false;
                }

                if (!helpers.isBoolean(this.public)) {
                  this.public = false;
                }

                if (!this.chunkSize) {
                  this.chunkSize = 1024 * 512;
                }

                this.chunkSize = Math.floor(this.chunkSize / 8) * 8;

                if (!helpers.isString(this.collectionName) && !this.collection) {
                  this.collectionName = 'MeteorUploadFiles';
                }

                if (!this.collection) {
                  this.collection = new Mongo.Collection(this.collectionName);
                } else {
                  this.collectionName = this.collection._name;
                }

                this.collection.filesCollection = this;
                check(this.collectionName, String);

                if (this.public && !this.downloadRoute) {
                  throw new Meteor.Error(500, "[FilesCollection.".concat(this.collectionName, "]: \"downloadRoute\" must be precisely provided on \"public\" collections! Note: \"downloadRoute\" must be equal or be inside of your web/proxy-server (relative) root."));
                }

                if (!helpers.isBoolean(this.disableUpload)) {
                  this.disableUpload = false;
                }

                if (!helpers.isString(this.downloadRoute)) {
                  this.downloadRoute = '/cdn/storage';
                }

                this.downloadRoute = this.downloadRoute.replace(/\/$/, '');

                if (!helpers.isFunction(this.namingFunction)) {
                  this.namingFunction = false;
                }

                if (!helpers.isFunction(this.onBeforeUpload)) {
                  this.onBeforeUpload = false;
                }

                if (!helpers.isBoolean(this.allowClientCode)) {
                  this.allowClientCode = true;
                }

                if (!this.ddp) {
                  this.ddp = Meteor;
                }

                if (!this.onbeforeunloadMessage) {
                  this.onbeforeunloadMessage = 'Upload in a progress... Do you want to abort?';
                }

                const setTokenCookie = () => {
                  if (Meteor.connection._lastSessionId) {
                    cookie.set('x_mtok', Meteor.connection._lastSessionId, {
                      path: '/'
                    });
                  }
                };

                if (typeof Accounts !== 'undefined' && Accounts !== null) {
                  DDP.onReconnect(conn => {
                    conn.onReconnect = setTokenCookie;
                  });
                  Meteor.startup(setTokenCookie);
                  Accounts.onLogin(setTokenCookie);
                }

                check(this.onbeforeunloadMessage, Match.OneOf(String, Function));

                try {
                  const _URL = window.URL || window.webkitURL || window.mozURL || window.msURL || window.oURL || false;

                  if (window.Worker && window.Blob && _URL && helpers.isFunction(_URL.createObjectURL)) {
                    this._supportWebWorker = true;
                    this._webWorkerUrl = _URL.createObjectURL(new window.Blob(['!function(a){"use strict";a.onmessage=function(b){var c=b.data.f.slice(b.data.cs*(b.data.cc-1),b.data.cs*b.data.cc);if(b.data.ib===!0)postMessage({bin:c,chunkId:b.data.cc});else{var d;a.FileReader?(d=new FileReader,d.onloadend=function(a){postMessage({bin:(d.result||a.srcElement||a.target).split(",")[1],chunkId:b.data.cc,s:b.data.s})},d.onerror=function(a){throw(a.target||a.srcElement).error},d.readAsDataURL(c)):a.FileReaderSync?(d=new FileReaderSync,postMessage({bin:d.readAsDataURL(c).split(",")[1],chunkId:b.data.cc})):postMessage({bin:null,chunkId:b.data.cc,error:"File API is not supported in WebWorker!"})}}}(this);'], {
                      type: 'application/javascript'
                    }));
                  } else if (window.Worker) {
                    this._supportWebWorker = true;
                    this._webWorkerUrl = Meteor.absoluteUrl('packages/ostrio_files/worker.min.js');
                  } else {
                    this._supportWebWorker = false;
                  }
                } catch (e) {
                  self._debug('[FilesCollection] [Check WebWorker Availability] Error:', e);

                  this._supportWebWorker = false;
                }

                if (!this.schema) {
                  this.schema = FilesCollectionCore.schema;
                }

                check(this.debug, Boolean);
                check(this.schema, Object);
                check(this.public, Boolean);
                check(this.chunkSize, Number);
                check(this.downloadRoute, String);
                check(this.disableUpload, Boolean);
                check(this.namingFunction, Match.OneOf(false, Function));
                check(this.onBeforeUpload, Match.OneOf(false, Function));
                check(this.allowClientCode, Boolean);
                check(this.ddp, Match.Any);
                this._methodNames = {
                  _Abort: "_FilesCollectionAbort_".concat(this.collectionName),
                  _Write: "_FilesCollectionWrite_".concat(this.collectionName),
                  _Start: "_FilesCollectionStart_".concat(this.collectionName),
                  _Remove: "_FilesCollectionRemove_".concat(this.collectionName)
                };
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCollection
               * @name _getMimeType
               * @param {Object} fileData - File Object
               * @summary Returns file's mime-type
               * @returns {String}
               */

              _getMimeType(fileData) {
                let mime;
                check(fileData, Object);

                if (helpers.isObject(fileData)) {
                  mime = fileData.type;
                }

                if (!mime || !helpers.isString(mime)) {
                  mime = 'application/octet-stream';
                }

                return mime;
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCollection
               * @name _getUser
               * @summary Returns object with `userId` and `user()` method which return user's object
               * @returns {Object}
               */

              _getUser() {
                const result = {
                  user() {
                    return null;
                  },

                  userId: null
                };

                if (helpers.isFunction(Meteor.userId)) {
                  result.user = () => Meteor.user();

                  result.userId = Meteor.userId();
                }

                return result;
              }
              /*
               * @locus Client
               * @memberOf FilesCollection
               * @name insert
               * @see https://developer.mozilla.org/en-US/docs/Web/API/FileReader
               * @param {Object} config - Configuration object with next properties:
               *   {File|Object} file           - HTML5 `files` item, like in change event: `e.currentTarget.files[0]`
               *   {String}      fileId         - Optionnal `fileId` used at insert
               *   {Object}      meta           - Additional data as object, use later for search
               *   {Boolean}     allowWebWorkers- Allow/Deny WebWorkers usage
               *   {Number|dynamic} streams     - Quantity of parallel upload streams, default: 2
               *   {Number|dynamic} chunkSize   - Chunk size for upload
               *   {String}      transport      - Upload transport `http` or `ddp`
               *   {Object}      ddp            - Custom DDP connection. Object returned form `DDP.connect()`
               *   {Function}    onUploaded     - Callback triggered when upload is finished, with two arguments `error` and `fileRef`
               *   {Function}    onStart        - Callback triggered when upload is started after all successful validations, with two arguments `error` (always null) and `fileRef`
               *   {Function}    onError        - Callback triggered on error in upload and/or FileReader, with two arguments `error` and `fileData`
               *   {Function}    onProgress     - Callback triggered when chunk is sent, with only argument `progress`
               *   {Function}    onBeforeUpload - Callback triggered right before upload is started:
               *       return true to continue
               *       return false to abort upload
               * @param {Boolean} autoStart     - Start upload immediately. If set to false, you need manually call .start() method on returned class. Useful to set EventListeners.
               * @summary Upload file to server over DDP or HTTP
               * @returns {UploadInstance} Instance. UploadInstance has next properties:
               *   {ReactiveVar} onPause  - Is upload process on the pause?
               *   {ReactiveVar} state    - active|paused|aborted|completed
               *   {ReactiveVar} progress - Current progress in percentage
               *   {Function}    pause    - Pause upload process
               *   {Function}    continue - Continue paused upload process
               *   {Function}    toggle   - Toggle continue/pause if upload process
               *   {Function}    abort    - Abort upload
               *   {Function}    readAsDataURL - Current file as data URL, use to create image preview and etc. Be aware of big files, may lead to browser crash
               */

              insert(config) {
                let autoStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

                if (this.disableUpload) {
                  console.warn('[FilesCollection] [insert()] Upload is disabled with [disableUpload]!');
                  return {};
                }

                return new UploadInstance(config, this)[autoStart ? 'start' : 'manual']();
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCollection
               * @name remove
               * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)
               * @param {Function} callback - Callback with one `error` argument
               * @summary Remove documents from the collection
               * @returns {FilesCollection} Instance
               */

              remove() {
                let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                let callback = arguments.length > 1 ? arguments[1] : undefined;

                this._debug("[FilesCollection] [remove(".concat(JSON.stringify(selector), ")]"));

                check(selector, Match.OneOf(Object, String));
                check(callback, Match.Optional(Function));

                if (this.allowClientCode) {
                  this.ddp.call(this._methodNames._Remove, selector, callback || NOOP);
                } else {
                  callback && callback(new Meteor.Error(401, '[FilesCollection] [remove] Run code from client is not allowed!'));

                  this._debug('[FilesCollection] [remove] Run code from client is not allowed!');
                }

                return this;
              }

            }

            /*
             * @locus Client
             * @TemplateHelper
             * @name fileURL
             * @param {Object} fileRef - File reference object
             * @param {String} version - [Optional] Version of file you would like to request
             * @param {String} URIBase - [Optional] URI base, see - https://github.com/VeliovGroup/Meteor-Files/issues/626
             * @summary Get download URL for file by fileRef, even without subscription
             * @example {{fileURL fileRef}}
             * @returns {String}
             */
            Meteor.startup(() => {
              if (typeof Template !== 'undefined' && Template !== null) {
                Template.registerHelper('fileURL', function (fileRef) {
                  let _version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'original';

                  let _URIBase = arguments.length > 2 ? arguments[2] : undefined;

                  if (!helpers.isObject(fileRef)) {
                    return '';
                  }

                  const version = !helpers.isString(_version) ? 'original' : _version;
                  const URIBase = !helpers.isString(_URIBase) ? void 0 : _URIBase;
                  return formatFleURL(fileRef, version, URIBase);
                });
              }
            });
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "core.js": function module(_require3, _exports3, _module2) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ostrio_files/core.js                                                                                      //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module2.export({
              default: () => FilesCollectionCore
            });
            let EventEmitter;
            _module2.link("eventemitter3", {
              EventEmitter(v) {
                EventEmitter = v;
              }

            }, 0);
            let check, Match;
            _module2.link("meteor/check", {
              check(v) {
                check = v;
              },

              Match(v) {
                Match = v;
              }

            }, 1);
            let formatFleURL, helpers;
            _module2.link("./lib.js", {
              formatFleURL(v) {
                formatFleURL = v;
              },

              helpers(v) {
                helpers = v;
              }

            }, 2);
            let FilesCursor, FileCursor;
            _module2.link("./cursor.js", {
              FilesCursor(v) {
                FilesCursor = v;
              },

              FileCursor(v) {
                FileCursor = v;
              }

            }, 3);

            class FilesCollectionCore extends EventEmitter {
              constructor() {
                super();
              }

              /*
               * @locus Anywhere
               * @memberOf FilesCollectionCore
               * @name _debug
               * @summary Print logs in debug mode
               * @returns {void}
               */
              _debug() {
                if (this.debug) {
                  (console.info || console.log || function () {}).apply(void 0, arguments);
                }
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCollectionCore
               * @name _getFileName
               * @param {Object} fileData - File Object
               * @summary Returns file's name
               * @returns {String}
               */

              _getFileName(fileData) {
                const fileName = fileData.name || fileData.fileName;

                if (helpers.isString(fileName) && fileName.length > 0) {
                  return (fileData.name || fileData.fileName).replace(/^\.\.+/, '').replace(/\.{2,}/g, '.').replace(/\//g, '');
                }

                return '';
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCollectionCore
               * @name _getExt
               * @param {String} FileName - File name
               * @summary Get extension from FileName
               * @returns {Object}
               */

              _getExt(fileName) {
                if (fileName.includes('.')) {
                  const extension = (fileName.split('.').pop().split('?')[0] || '').toLowerCase();
                  return {
                    ext: extension,
                    extension,
                    extensionWithDot: ".".concat(extension)
                  };
                }

                return {
                  ext: '',
                  extension: '',
                  extensionWithDot: ''
                };
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCollectionCore
               * @name _updateFileTypes
               * @param {Object} data - File data
               * @summary Internal method. Classify file based on 'type' field
               */

              _updateFileTypes(data) {
                data.isVideo = /^video\//i.test(data.type);
                data.isAudio = /^audio\//i.test(data.type);
                data.isImage = /^image\//i.test(data.type);
                data.isText = /^text\//i.test(data.type);
                data.isJSON = /^application\/json$/i.test(data.type);
                data.isPDF = /^application\/(x-)?pdf$/i.test(data.type);
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCollectionCore
               * @name _dataToSchema
               * @param {Object} data - File data
               * @summary Internal method. Build object in accordance with default schema from File data
               * @returns {Object}
               */

              _dataToSchema(data) {
                const ds = {
                  name: data.name,
                  extension: data.extension,
                  ext: data.extension,
                  extensionWithDot: '.' + data.extension,
                  path: data.path,
                  meta: data.meta,
                  type: data.type,
                  mime: data.type,
                  'mime-type': data.type,
                  size: data.size,
                  userId: data.userId || null,
                  versions: {
                    original: {
                      path: data.path,
                      size: data.size,
                      type: data.type,
                      extension: data.extension
                    }
                  },
                  _downloadRoute: data._downloadRoute || this.downloadRoute,
                  _collectionName: data._collectionName || this.collectionName
                }; //Optional fileId

                if (data.fileId) {
                  ds._id = data.fileId;
                }

                this._updateFileTypes(ds);

                ds._storagePath = data._storagePath || this.storagePath(Object.assign({}, data, ds));
                return ds;
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCollectionCore
               * @name findOne
               * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)
               * @param {Object} options - Mongo-Style selector Options (http://docs.meteor.com/api/collections.html#sortspecifiers)
               * @summary Find and return Cursor for matching document Object
               * @returns {FileCursor} Instance
               */

              findOne() {
                let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                let options = arguments.length > 1 ? arguments[1] : undefined;

                this._debug("[FilesCollection] [findOne(".concat(JSON.stringify(selector), ", ").concat(JSON.stringify(options), ")]"));

                check(selector, Match.Optional(Match.OneOf(Object, String, Boolean, Number, null)));
                check(options, Match.Optional(Object));
                const doc = this.collection.findOne(selector, options);

                if (doc) {
                  return new FileCursor(doc, this);
                }

                return doc;
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCollectionCore
               * @name find
               * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)
               * @param {Object}        options  - Mongo-Style selector Options (http://docs.meteor.com/api/collections.html#sortspecifiers)
               * @summary Find and return Cursor for matching documents
               * @returns {FilesCursor} Instance
               */

              find() {
                let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                let options = arguments.length > 1 ? arguments[1] : undefined;

                this._debug("[FilesCollection] [find(".concat(JSON.stringify(selector), ", ").concat(JSON.stringify(options), ")]"));

                check(selector, Match.Optional(Match.OneOf(Object, String, Boolean, Number, null)));
                check(options, Match.Optional(Object));
                return new FilesCursor(selector, options, this);
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCollectionCore
               * @name update
               * @see http://docs.meteor.com/#/full/update
               * @summary link Mongo.Collection update method
               * @returns {Mongo.Collection} Instance
               */

              update() {
                this.collection.update.apply(this.collection, arguments);
                return this.collection;
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCollectionCore
               * @name link
               * @param {Object} fileRef - File reference object
               * @param {String} version - Version of file you would like to request
               * @param {String} URIBase - [Optional] URI base, see - https://github.com/VeliovGroup/Meteor-Files/issues/626
               * @summary Returns downloadable URL
               * @returns {String} Empty string returned in case if file not found in DB
               */

              link(fileRef) {
                let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'original';
                let URIBase = arguments.length > 2 ? arguments[2] : undefined;

                this._debug("[FilesCollection] [link(".concat(helpers.isObject(fileRef) ? fileRef._id : void 0, ", ").concat(version, ")]"));

                check(fileRef, Object);

                if (!fileRef) {
                  return '';
                }

                return formatFleURL(fileRef, version, URIBase);
              }

            }

            FilesCollectionCore.__helpers = helpers;
            FilesCollectionCore.schema = {
              _id: {
                type: String
              },
              size: {
                type: Number
              },
              name: {
                type: String
              },
              type: {
                type: String
              },
              path: {
                type: String
              },
              isVideo: {
                type: Boolean
              },
              isAudio: {
                type: Boolean
              },
              isImage: {
                type: Boolean
              },
              isText: {
                type: Boolean
              },
              isJSON: {
                type: Boolean
              },
              isPDF: {
                type: Boolean
              },
              extension: {
                type: String,
                optional: true
              },
              ext: {
                type: String,
                optional: true
              },
              extensionWithDot: {
                type: String,
                optional: true
              },
              mime: {
                type: String,
                optional: true
              },
              'mime-type': {
                type: String,
                optional: true
              },
              _storagePath: {
                type: String
              },
              _downloadRoute: {
                type: String
              },
              _collectionName: {
                type: String
              },
              public: {
                type: Boolean,
                optional: true
              },
              meta: {
                type: Object,
                blackbox: true,
                optional: true
              },
              userId: {
                type: String,
                optional: true
              },
              updatedAt: {
                type: Date,
                optional: true
              },
              versions: {
                type: Object,
                blackbox: true
              }
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "cursor.js": function module(_require4, _exports4, _module3) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ostrio_files/cursor.js                                                                                    //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module3.export({
              FileCursor: () => FileCursor,
              FilesCursor: () => FilesCursor
            });
            let Meteor;
            _module3.link("meteor/meteor", {
              Meteor(v) {
                Meteor = v;
              }

            }, 0);

            class FileCursor {
              constructor(_fileRef, _collection) {
                this._fileRef = _fileRef;
                this._collection = _collection;
                Object.assign(this, _fileRef);
              }
              /*
               * @locus Anywhere
               * @memberOf FileCursor
               * @name remove
               * @param callback {Function} - Triggered asynchronously after item is removed or failed to be removed
               * @summary Remove document
               * @returns {FileCursor}
               */

              remove(callback) {
                this._collection._debug('[FilesCollection] [FileCursor] [remove()]');

                if (this._fileRef) {
                  this._collection.remove(this._fileRef._id, callback);
                } else {
                  callback && callback(new Meteor.Error(404, 'No such file'));
                }

                return this;
              }
              /*
               * @locus Anywhere
               * @memberOf FileCursor
               * @name link
               * @param version {String} - Name of file's subversion
               * @param URIBase {String} - [Optional] URI base, see - https://github.com/VeliovGroup/Meteor-Files/issues/626
               * @summary Returns downloadable URL to File
               * @returns {String}
               */

              link() {
                let version = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'original';
                let URIBase = arguments.length > 1 ? arguments[1] : undefined;

                this._collection._debug("[FilesCollection] [FileCursor] [link(".concat(version, ")]"));

                if (this._fileRef) {
                  return this._collection.link(this._fileRef, version, URIBase);
                }

                return '';
              }
              /*
               * @locus Anywhere
               * @memberOf FileCursor
               * @name get
               * @param property {String} - Name of sub-object property
               * @summary Returns current document as a plain Object, if `property` is specified - returns value of sub-object property
               * @returns {Object|mix}
               */

              get(property) {
                this._collection._debug("[FilesCollection] [FileCursor] [get(".concat(property, ")]"));

                if (property) {
                  return this._fileRef[property];
                }

                return this._fileRef;
              }
              /*
               * @locus Anywhere
               * @memberOf FileCursor
               * @name fetch
               * @summary Returns document as plain Object in Array
               * @returns {[Object]}
               */

              fetch() {
                this._collection._debug('[FilesCollection] [FileCursor] [fetch()]');

                return [this._fileRef];
              }
              /*
               * @locus Anywhere
               * @memberOf FileCursor
               * @name with
               * @summary Returns reactive version of current FileCursor, useful to use with `{{#with}}...{{/with}}` block template helper
               * @returns {[Object]}
               */

              with() {
                this._collection._debug('[FilesCollection] [FileCursor] [with()]');

                return Object.assign(this, this._collection.collection.findOne(this._fileRef._id));
              }

            }

            class FilesCursor {
              constructor() {
                let _selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                let options = arguments.length > 1 ? arguments[1] : undefined;

                let _collection = arguments.length > 2 ? arguments[2] : undefined;

                this._collection = _collection;
                this._selector = _selector;
                this._current = -1;
                this.cursor = this._collection.collection.find(this._selector, options);
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name get
               * @summary Returns all matching document(s) as an Array. Alias of `.fetch()`
               * @returns {[Object]}
               */

              get() {
                this._collection._debug('[FilesCollection] [FilesCursor] [get()]');

                return this.cursor.fetch();
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name hasNext
               * @summary Returns `true` if there is next item available on Cursor
               * @returns {Boolean}
               */

              hasNext() {
                this._collection._debug('[FilesCollection] [FilesCursor] [hasNext()]');

                return this._current < this.cursor.count() - 1;
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name next
               * @summary Returns next item on Cursor, if available
               * @returns {Object|undefined}
               */

              next() {
                this._collection._debug('[FilesCollection] [FilesCursor] [next()]');

                this.cursor.fetch()[++this._current];
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name hasPrevious
               * @summary Returns `true` if there is previous item available on Cursor
               * @returns {Boolean}
               */

              hasPrevious() {
                this._collection._debug('[FilesCollection] [FilesCursor] [hasPrevious()]');

                return this._current !== -1;
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name previous
               * @summary Returns previous item on Cursor, if available
               * @returns {Object|undefined}
               */

              previous() {
                this._collection._debug('[FilesCollection] [FilesCursor] [previous()]');

                this.cursor.fetch()[--this._current];
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name fetch
               * @summary Returns all matching document(s) as an Array.
               * @returns {[Object]}
               */

              fetch() {
                this._collection._debug('[FilesCollection] [FilesCursor] [fetch()]');

                return this.cursor.fetch() || [];
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name first
               * @summary Returns first item on Cursor, if available
               * @returns {Object|undefined}
               */

              first() {
                this._collection._debug('[FilesCollection] [FilesCursor] [first()]');

                this._current = 0;
                return this.fetch()[this._current];
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name last
               * @summary Returns last item on Cursor, if available
               * @returns {Object|undefined}
               */

              last() {
                this._collection._debug('[FilesCollection] [FilesCursor] [last()]');

                this._current = this.count() - 1;
                return this.fetch()[this._current];
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name count
               * @summary Returns the number of documents that match a query
               * @returns {Number}
               */

              count() {
                this._collection._debug('[FilesCollection] [FilesCursor] [count()]');

                return this.cursor.count();
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name remove
               * @param callback {Function} - Triggered asynchronously after item is removed or failed to be removed
               * @summary Removes all documents that match a query
               * @returns {FilesCursor}
               */

              remove(callback) {
                this._collection._debug('[FilesCollection] [FilesCursor] [remove()]');

                this._collection.remove(this._selector, callback);

                return this;
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name forEach
               * @param callback {Function} - Function to call. It will be called with three arguments: the `file`, a 0-based index, and cursor itself
               * @param context {Object} - An object which will be the value of `this` inside `callback`
               * @summary Call `callback` once for each matching document, sequentially and synchronously.
               * @returns {undefined}
               */

              forEach(callback) {
                let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                this._collection._debug('[FilesCollection] [FilesCursor] [forEach()]');

                this.cursor.forEach(callback, context);
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name each
               * @summary Returns an Array of FileCursor made for each document on current cursor
               *          Useful when using in {{#each FilesCursor#each}}...{{/each}} block template helper
               * @returns {[FileCursor]}
               */

              each() {
                return this.map(file => {
                  return new FileCursor(file, this._collection);
                });
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name map
               * @param callback {Function} - Function to call. It will be called with three arguments: the `file`, a 0-based index, and cursor itself
               * @param context {Object} - An object which will be the value of `this` inside `callback`
               * @summary Map `callback` over all matching documents. Returns an Array.
               * @returns {Array}
               */

              map(callback) {
                let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                this._collection._debug('[FilesCollection] [FilesCursor] [map()]');

                return this.cursor.map(callback, context);
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name current
               * @summary Returns current item on Cursor, if available
               * @returns {Object|undefined}
               */

              current() {
                this._collection._debug('[FilesCollection] [FilesCursor] [current()]');

                if (this._current < 0) {
                  this._current = 0;
                }

                return this.fetch()[this._current];
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name observe
               * @param callbacks {Object} - Functions to call to deliver the result set as it changes
               * @summary Watch a query. Receive callbacks as the result set changes.
               * @url http://docs.meteor.com/api/collections.html#Mongo-Cursor-observe
               * @returns {Object} - live query handle
               */

              observe(callbacks) {
                this._collection._debug('[FilesCollection] [FilesCursor] [observe()]');

                return this.cursor.observe(callbacks);
              }
              /*
               * @locus Anywhere
               * @memberOf FilesCursor
               * @name observeChanges
               * @param callbacks {Object} - Functions to call to deliver the result set as it changes
               * @summary Watch a query. Receive callbacks as the result set changes. Only the differences between the old and new documents are passed to the callbacks.
               * @url http://docs.meteor.com/api/collections.html#Mongo-Cursor-observeChanges
               * @returns {Object} - live query handle
               */

              observeChanges(callbacks) {
                this._collection._debug('[FilesCollection] [FilesCursor] [observeChanges()]');

                return this.cursor.observeChanges(callbacks);
              }

            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "lib.js": function module(_require5, _exports5, _module4) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ostrio_files/lib.js                                                                                       //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module4.export({
              fixJSONParse: () => fixJSONParse,
              fixJSONStringify: () => fixJSONStringify,
              formatFleURL: () => formatFleURL,
              helpers: () => helpers
            });
            let check;
            _module4.link("meteor/check", {
              check(v) {
                check = v;
              }

            }, 0);
            const helpers = {
              isUndefined(obj) {
                return obj === void 0;
              },

              isObject(obj) {
                if (this.isArray(obj) || this.isFunction(obj)) {
                  return false;
                }

                return obj === Object(obj);
              },

              isArray(obj) {
                return Array.isArray(obj);
              },

              isBoolean(obj) {
                return obj === true || obj === false || Object.prototype.toString.call(obj) === '[object Boolean]';
              },

              isFunction(obj) {
                return typeof obj === 'function' || false;
              },

              isEmpty(obj) {
                if (this.isDate(obj)) {
                  return false;
                }

                if (this.isObject(obj)) {
                  return !Object.keys(obj).length;
                }

                if (this.isArray(obj) || this.isString(obj)) {
                  return !obj.length;
                }

                return false;
              },

              clone(obj) {
                if (!this.isObject(obj)) return obj;
                return this.isArray(obj) ? obj.slice() : Object.assign({}, obj);
              },

              has(_obj, path) {
                let obj = _obj;

                if (!this.isObject(obj)) {
                  return false;
                }

                if (!this.isArray(path)) {
                  return this.isObject(obj) && Object.prototype.hasOwnProperty.call(obj, path);
                }

                const length = path.length;

                for (let i = 0; i < length; i++) {
                  if (!Object.prototype.hasOwnProperty.call(obj, path[i])) {
                    return false;
                  }

                  obj = obj[path[i]];
                }

                return !!length;
              },

              omit(obj) {
                const clear = Object.assign({}, obj);

                for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  keys[_key - 1] = arguments[_key];
                }

                for (let i = keys.length - 1; i >= 0; i--) {
                  delete clear[keys[i]];
                }

                return clear;
              },

              now: Date.now,

              throttle(func, wait) {
                let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                let previous = 0;
                let timeout = null;
                let result;
                const that = this;
                let self;
                let args;

                const later = () => {
                  previous = options.leading === false ? 0 : that.now();
                  timeout = null;
                  result = func.apply(self, args);

                  if (!timeout) {
                    self = args = null;
                  }
                };

                const throttled = function () {
                  const now = that.now();
                  if (!previous && options.leading === false) previous = now;
                  const remaining = wait - (now - previous);
                  self = this;
                  args = arguments;

                  if (remaining <= 0 || remaining > wait) {
                    if (timeout) {
                      clearTimeout(timeout);
                      timeout = null;
                    }

                    previous = now;
                    result = func.apply(self, args);

                    if (!timeout) {
                      self = args = null;
                    }
                  } else if (!timeout && options.trailing !== false) {
                    timeout = setTimeout(later, remaining);
                  }

                  return result;
                };

                throttled.cancel = () => {
                  clearTimeout(timeout);
                  previous = 0;
                  timeout = self = args = null;
                };

                return throttled;
              }

            };
            const _helpers = ['String', 'Number', 'Date'];

            for (let i = 0; i < _helpers.length; i++) {
              helpers['is' + _helpers[i]] = function (obj) {
                return Object.prototype.toString.call(obj) === '[object ' + _helpers[i] + ']';
              };
            }
            /*
             * @const {Function} fixJSONParse - Fix issue with Date parse
             */

            const fixJSONParse = function (obj) {
              for (let key in obj) {
                if (helpers.isString(obj[key]) && obj[key].includes('=--JSON-DATE--=')) {
                  obj[key] = obj[key].replace('=--JSON-DATE--=', '');
                  obj[key] = new Date(parseInt(obj[key]));
                } else if (helpers.isObject(obj[key])) {
                  obj[key] = fixJSONParse(obj[key]);
                } else if (helpers.isArray(obj[key])) {
                  let v;

                  for (let i = 0; i < obj[key].length; i++) {
                    v = obj[key][i];

                    if (helpers.isObject(v)) {
                      obj[key][i] = fixJSONParse(v);
                    } else if (helpers.isString(v) && v.includes('=--JSON-DATE--=')) {
                      v = v.replace('=--JSON-DATE--=', '');
                      obj[key][i] = new Date(parseInt(v));
                    }
                  }
                }
              }

              return obj;
            };
            /*
             * @const {Function} fixJSONStringify - Fix issue with Date stringify
             */

            const fixJSONStringify = function (obj) {
              for (let key in obj) {
                if (helpers.isDate(obj[key])) {
                  obj[key] = "=--JSON-DATE--=".concat(+obj[key]);
                } else if (helpers.isObject(obj[key])) {
                  obj[key] = fixJSONStringify(obj[key]);
                } else if (helpers.isArray(obj[key])) {
                  let v;

                  for (let i = 0; i < obj[key].length; i++) {
                    v = obj[key][i];

                    if (helpers.isObject(v)) {
                      obj[key][i] = fixJSONStringify(v);
                    } else if (helpers.isDate(v)) {
                      obj[key][i] = "=--JSON-DATE--=".concat(+v);
                    }
                  }
                }
              }

              return obj;
            };
            /*
             * @locus Anywhere
             * @private
             * @name formatFleURL
             * @param {Object} fileRef - File reference object
             * @param {String} version - [Optional] Version of file you would like build URL for
             * @param {String} URIBase - [Optional] URI base, see - https://github.com/VeliovGroup/Meteor-Files/issues/626
             * @summary Returns formatted URL for file
             * @returns {String} Downloadable link
             */

            const formatFleURL = function (fileRef) {
              let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'original';

              let _URIBase = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (__meteor_runtime_config__ || {}).ROOT_URL;

              check(fileRef, Object);
              check(version, String);
              let URIBase = _URIBase;

              if (!helpers.isString(URIBase)) {
                URIBase = (__meteor_runtime_config__ || {}).ROOT_URL || '/';
              }

              const _root = URIBase.replace(/\/+$/, '');

              const vRef = fileRef.versions && fileRef.versions[version] || fileRef || {};
              let ext;

              if (helpers.isString(vRef.extension)) {
                ext = ".".concat(vRef.extension.replace(/^\./, ''));
              } else {
                ext = '';
              }

              if (fileRef.public === true) {
                return _root + (version === 'original' ? "".concat(fileRef._downloadRoute, "/").concat(fileRef._id).concat(ext) : "".concat(fileRef._downloadRoute, "/").concat(version, "-").concat(fileRef._id).concat(ext));
              }

              return _root + "".concat(fileRef._downloadRoute, "/").concat(fileRef._collectionName, "/").concat(fileRef._id, "/").concat(version, "/").concat(fileRef._id).concat(ext);
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "upload.js": function module(_require6, _exports6, _module5) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ostrio_files/upload.js                                                                                    //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module5.export({
              FileUpload: () => FileUpload,
              UploadInstance: () => UploadInstance
            });
            let HTTP;
            _module5.link("meteor/http", {
              HTTP(v) {
                HTTP = v;
              }

            }, 0);
            let Meteor;
            _module5.link("meteor/meteor", {
              Meteor(v) {
                Meteor = v;
              }

            }, 1);
            let Random;
            _module5.link("meteor/random", {
              Random(v) {
                Random = v;
              }

            }, 2);
            let Tracker;
            _module5.link("meteor/tracker", {
              Tracker(v) {
                Tracker = v;
              }

            }, 3);
            let ReactiveVar;
            _module5.link("meteor/reactive-var", {
              ReactiveVar(v) {
                ReactiveVar = v;
              }

            }, 4);
            let EventEmitter;
            _module5.link("eventemitter3", {
              EventEmitter(v) {
                EventEmitter = v;
              }

            }, 5);
            let check, Match;
            _module5.link("meteor/check", {
              check(v) {
                check = v;
              },

              Match(v) {
                Match = v;
              }

            }, 6);
            let fixJSONParse, fixJSONStringify, helpers;
            _module5.link("./lib.js", {
              fixJSONParse(v) {
                fixJSONParse = v;
              },

              fixJSONStringify(v) {
                fixJSONStringify = v;
              },

              helpers(v) {
                helpers = v;
              }

            }, 7);

            const _rootUrl = (window.__meteor_runtime_config__.MOBILE_ROOT_URL || window.__meteor_runtime_config__.ROOT_URL).replace(/\/+$/, '');

            const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
            /*
             * @locus Client
             * @name FileUpload
             * @class FileUpload
             * @summary Internal Class, instance of this class is returned from `.insert()` method
             */

            class FileUpload extends EventEmitter {
              constructor(config) {
                super();
                this.config = config;

                this.config._debug('[FilesCollection] [FileUpload] [constructor]');

                if (!this.config.isBase64) {
                  this.file = Object.assign({}, helpers.clone(this.config.file), this.config.fileData);
                } else {
                  this.file = this.config.fileData;
                }

                this.state = new ReactiveVar('active');
                this.onPause = new ReactiveVar(false);
                this.progress = new ReactiveVar(0);

                this.continueFunc = () => {};

                this.estimateTime = new ReactiveVar(1000);
                this.estimateSpeed = new ReactiveVar(0);
                this.estimateTimer = Meteor.setInterval(() => {
                  if (this.state.get() === 'active') {
                    const _currentTime = this.estimateTime.get();

                    if (_currentTime > 1000) {
                      this.estimateTime.set(_currentTime - 1000);
                    }
                  }
                }, 1000);
              }

              pause() {
                this.config._debug('[FilesCollection] [insert] [.pause()]');

                if (!this.onPause.get()) {
                  this.onPause.set(true);
                  this.state.set('paused');
                  this.emit('pause', this.file);
                }
              }

              continue() {
                this.config._debug('[FilesCollection] [insert] [.continue()]');

                if (this.onPause.get()) {
                  this.onPause.set(false);
                  this.state.set('active');
                  this.emit('continue', this.file);
                  this.continueFunc();
                }
              }

              toggle() {
                this.config._debug('[FilesCollection] [insert] [.toggle()]');

                if (this.onPause.get()) {
                  this.continue();
                } else {
                  this.pause();
                }
              }

              abort() {
                this.config._debug('[FilesCollection] [insert] [.abort()]');

                window.removeEventListener('beforeunload', this.config.beforeunload, false);
                this.pause();

                this.config._onEnd();

                this.state.set('aborted');
                this.config.onAbort && this.config.onAbort.call(this, this.file);
                this.emit('abort', this.file);

                if (this.config.debug) {
                  console.timeEnd("insert ".concat(this.config.fileData.name));
                }

                this.config.ddp.call(this.config._Abort, this.config.fileId);
              }

            }

            class UploadInstance extends EventEmitter {
              constructor(config, collection) {
                super();
                this.config = config;
                this.collection = collection;

                this.collection._debug('[FilesCollection] [insert()]');

                if (!this.config.ddp) {
                  this.config.ddp = this.collection.ddp;
                }

                if (!this.config.meta) {
                  this.config.meta = {};
                }

                if (!this.config.streams) {
                  this.config.streams = 2;
                }

                if (this.config.streams < 1) {
                  this.config.streams = 2;
                }

                if (!helpers.isString(this.config.transport)) {
                  this.config.transport = 'ddp';
                }

                this.config.transport = this.config.transport.toLowerCase();

                if (this.config.transport !== 'ddp' && this.config.transport !== 'http') {
                  this.config.transport = 'ddp';
                }

                if (!this.config.chunkSize) {
                  this.config.chunkSize = this.collection.chunkSize;
                }

                if (!helpers.isBoolean(this.config.allowWebWorkers)) {
                  this.config.allowWebWorkers = true;
                }

                check(this.config, {
                  ddp: Match.Any,
                  file: Match.Any,
                  fileId: Match.Optional(String),
                  meta: Match.Optional(Object),
                  type: Match.Optional(String),
                  onError: Match.Optional(Function),
                  onAbort: Match.Optional(Function),
                  streams: Match.OneOf('dynamic', Number),
                  onStart: Match.Optional(Function),
                  fileName: Match.Optional(String),
                  isBase64: Match.Optional(Boolean),
                  transport: Match.OneOf('http', 'ddp'),
                  chunkSize: Match.OneOf('dynamic', Number),
                  onUploaded: Match.Optional(Function),
                  onProgress: Match.Optional(Function),
                  onBeforeUpload: Match.Optional(Function),
                  allowWebWorkers: Boolean
                });

                if (this.config.isBase64 === true) {
                  check(this.config.file, String);

                  if (!this.config.fileName) {
                    throw new Meteor.Error(400, '"fileName" must me specified for base64 upload!');
                  }

                  if (this.config.file.includes('data:')) {
                    this.config.file = this.config.file.replace('data:', '');
                  }

                  if (this.config.file.includes(',')) {
                    const _file = this.config.file.split(',');

                    this.fileData = {
                      size: Math.floor(_file[1].replace(/\=/g, '').length / 4 * 3),
                      type: _file[0].split(';')[0],
                      name: this.config.fileName,
                      meta: this.config.meta
                    };
                    this.config.file = _file[1];
                  } else if (!this.config.type) {
                    throw new Meteor.Error(400, '"type" must me specified for base64 upload! And represent mime-type of the file');
                  } else {
                    this.fileData = {
                      size: Math.floor(this.config.file.replace(/\=/g, '').length / 4 * 3),
                      type: this.config.type,
                      name: this.config.fileName,
                      meta: this.config.meta
                    };
                  }
                }

                if (this.config.file) {
                  if (!this.config.isBase64) {
                    try {
                      if (!this.config.file.name || !this.config.file.size) {
                        throw new Meteor.Error(500, 'Not a File!');
                      }
                    } catch (e) {
                      throw new Meteor.Error(500, '[FilesCollection] [insert] Insert method accepts File, not a FileList. You need to provide a real File. File must have `.name` property, and its size must be larger than zero.');
                    }

                    this.fileData = {
                      size: this.config.file.size,
                      type: this.config.type || this.config.file.type,
                      name: this.config.fileName || this.config.file.name,
                      meta: this.config.meta
                    };
                  }

                  if (this.collection.debug) {
                    console.time("insert ".concat(this.fileData.name));
                    console.time("loadFile ".concat(this.fileData.name));
                  }

                  if (this.collection._supportWebWorker && this.config.allowWebWorkers) {
                    try {
                      this.worker = new Worker(this.collection._webWorkerUrl);
                    } catch (wwError) {
                      this.worker = false;

                      this.collection._debug('[FilesCollection] [insert] [create WebWorker]: Can\'t create WebWorker, fallback to MainThread', wwError);
                    }
                  } else {
                    this.worker = null;
                  }

                  this.startTime = {};
                  this.config.debug = this.collection.debug;
                  this.config._debug = this.collection._debug;
                  this.currentChunk = 0;
                  this.transferTime = 0;
                  this.trackerComp = null;
                  this.sentChunks = 0;
                  this.fileLength = 1;
                  this.EOFsent = false;
                  this.fileId = this.config.fileId || Random.id();
                  this.FSName = this.collection.namingFunction ? this.collection.namingFunction(this.fileData) : this.fileId;
                  this.pipes = [];
                  this.fileData = Object.assign(this.fileData, this.collection._getExt(this.fileData.name), {
                    mime: this.collection._getMimeType(this.fileData)
                  });
                  this.fileData['mime-type'] = this.fileData.mime;
                  this.result = new FileUpload(Object.assign({}, this.config, {
                    fileData: this.fileData,
                    fileId: this.fileId,
                    _Abort: this.collection._methodNames._Abort
                  }));

                  this.beforeunload = e => {
                    const message = helpers.isFunction(this.collection.onbeforeunloadMessage) ? this.collection.onbeforeunloadMessage.call(this.result, this.fileData) : this.collection.onbeforeunloadMessage;

                    if (e) {
                      e.returnValue = message;
                    }

                    return message;
                  };

                  this.result.config.beforeunload = this.beforeunload;
                  window.addEventListener('beforeunload', this.beforeunload, false);

                  this.result.config._onEnd = () => this.emit('_onEnd');

                  this.addListener('end', this.end);
                  this.addListener('start', this.start);
                  this.addListener('upload', this.upload);
                  this.addListener('sendEOF', this.sendEOF);
                  this.addListener('prepare', this.prepare);
                  this.addListener('sendChunk', this.sendChunk);
                  this.addListener('proceedChunk', this.proceedChunk);
                  this.addListener('createStreams', this.createStreams);
                  this.addListener('calculateStats', helpers.throttle(() => {
                    const _t = this.transferTime / this.sentChunks / this.config.streams;

                    this.result.estimateTime.set(_t * (this.fileLength - this.sentChunks));
                    this.result.estimateSpeed.set(this.config.chunkSize / (_t / 1000));
                    const progress = Math.round(this.sentChunks / this.fileLength * 100);
                    let sentBytes = this.config.chunkSize * this.sentChunks;

                    if (sentBytes > this.fileData.size) {
                      // this case often occurs, when the last chunk
                      // is smaller than chunkSize, so we limit to fileSize
                      sentBytes = this.fileData.size;
                    }

                    this.result.progress.set(progress);
                    this.config.onProgress && this.config.onProgress.call(this.result, progress, this.fileData);
                    this.result.emit('progress', progress, this.fileData, {
                      chunksSent: this.sentChunks,
                      chunksLength: this.fileLength,
                      bytesSent: sentBytes
                    });
                  }, 250));
                  this.addListener('_onEnd', () => {
                    if (this.result.estimateTimer) {
                      Meteor.clearInterval(this.result.estimateTimer);
                    }

                    if (this.worker) {
                      this.worker.terminate();
                    }

                    if (this.trackerComp) {
                      this.trackerComp.stop();
                    }

                    if (this.beforeunload) {
                      window.removeEventListener('beforeunload', this.beforeunload, false);
                    }

                    if (this.result) {
                      return this.result.progress.set(0);
                    }

                    return void 0;
                  });
                } else {
                  throw new Meteor.Error(500, '[FilesCollection] [insert] Have you forget to pass a File itself?');
                }
              }

              end(error, data) {
                this.collection._debug('[FilesCollection] [UploadInstance] [end]', this.fileData.name);

                if (this.collection.debug) {
                  console.timeEnd("insert ".concat(this.fileData.name));
                }

                this.emit('_onEnd');
                this.result.emit('uploaded', error, data);
                this.config.onUploaded && this.config.onUploaded.call(this.result, error, data);

                if (error) {
                  this.collection._debug('[FilesCollection] [insert] [end] Error:', error);

                  this.result.abort();
                  this.result.state.set('aborted');
                  this.result.emit('error', error, this.fileData);
                  this.config.onError && this.config.onError.call(this.result, error, this.fileData);
                } else {
                  this.result.state.set('completed');
                  this.collection.emit('afterUpload', data);
                }

                this.result.emit('end', error, data || this.fileData);
                return this.result;
              }

              sendChunk(evt) {
                const opts = {
                  fileId: this.fileId,
                  binData: evt.data.bin,
                  chunkId: evt.data.chunkId
                };

                if (this.config.isBase64) {
                  const pad = opts.binData.length % 4;

                  if (pad) {
                    let p = 0;

                    while (p < pad) {
                      opts.binData += '=';
                      p++;
                    }
                  }
                }

                this.emit('data', evt.data.bin);

                if (this.pipes.length) {
                  for (let i = this.pipes.length - 1; i >= 0; i--) {
                    opts.binData = this.pipes[i](opts.binData);
                  }
                }

                if (this.fileLength === evt.data.chunkId) {
                  if (this.collection.debug) {
                    console.timeEnd("loadFile ".concat(this.fileData.name));
                  }

                  this.emit('readEnd');
                }

                if (opts.binData) {
                  if (this.config.transport === 'ddp') {
                    this.config.ddp.call(this.collection._methodNames._Write, opts, error => {
                      this.transferTime += +new Date() - this.startTime[opts.chunkId];

                      if (error) {
                        if (this.result.state.get() !== 'aborted') {
                          this.emit('end', error);
                        }
                      } else {
                        ++this.sentChunks;

                        if (this.sentChunks >= this.fileLength) {
                          this.emit('sendEOF');
                        } else if (this.currentChunk < this.fileLength) {
                          this.emit('upload');
                        }

                        this.emit('calculateStats');
                      }
                    });
                  } else {
                    HTTP.call('POST', "".concat(_rootUrl).concat(this.collection.downloadRoute, "/").concat(this.collection.collectionName, "/__upload"), {
                      content: opts.binData,
                      headers: {
                        'x-mtok': (helpers.isObject(Meteor.connection) ? Meteor.connection._lastSessionId : void 0) || null,
                        'x-fileid': opts.fileId,
                        'x-chunkid': opts.chunkId,
                        'content-type': 'text/plain'
                      },

                      beforeSend(xhr) {
                        xhr.withCredentials = true;
                        return true;
                      }

                    }, error => {
                      this.transferTime += +new Date() - this.startTime[opts.chunkId];

                      if (error) {
                        if ("".concat(error) === 'Error: network') {
                          this.result.pause();
                        } else {
                          if (this.result.state.get() !== 'aborted') {
                            this.emit('end', error);
                          }
                        }
                      } else {
                        ++this.sentChunks;

                        if (this.sentChunks >= this.fileLength) {
                          this.emit('sendEOF');
                        } else if (this.currentChunk < this.fileLength) {
                          this.emit('upload');
                        }

                        this.emit('calculateStats');
                      }
                    });
                  }
                }
              }

              sendEOF() {
                this.collection._debug('[FilesCollection] [UploadInstance] [sendEOF]', this.EOFsent);

                if (!this.EOFsent) {
                  this.EOFsent = true;
                  const opts = {
                    eof: true,
                    fileId: this.fileId
                  };

                  if (this.config.transport === 'ddp') {
                    this.config.ddp.call(this.collection._methodNames._Write, opts, (error, result) => {
                      this.emit('end', error, result);
                    });
                  } else {
                    HTTP.call('POST', "".concat(_rootUrl).concat(this.collection.downloadRoute, "/").concat(this.collection.collectionName, "/__upload"), {
                      content: '',
                      headers: {
                        'x-eof': '1',
                        'x-mtok': (helpers.isObject(Meteor.connection) ? Meteor.connection._lastSessionId : void 0) || null,
                        'x-fileId': opts.fileId,
                        'content-type': 'text/plain'
                      },

                      beforeSend(xhr) {
                        xhr.withCredentials = true;
                        return true;
                      }

                    }, (error, _result) => {
                      let result;

                      try {
                        result = JSON.parse((helpers.isObject(_result) ? _result.content : void 0) || {});
                      } catch (e) {
                        console.warn('Something went wrong! [sendEOF] method doesn\'t returned JSON! Looks like you\'re on Cordova app or behind proxy, switching to DDP transport is recommended.');
                        result = {};
                      }

                      if (result.meta) {
                        result.meta = fixJSONParse(result.meta);
                      }

                      this.emit('end', error, result);
                    });
                  }
                }
              }

              proceedChunk(chunkId) {
                const chunk = this.config.file.slice(this.config.chunkSize * (chunkId - 1), this.config.chunkSize * chunkId);

                if (this.config.isBase64) {
                  this.emit('sendChunk', {
                    data: {
                      bin: chunk,
                      chunkId
                    }
                  });
                } else {
                  let fileReader;

                  if (window.FileReader) {
                    fileReader = new window.FileReader();

                    fileReader.onloadend = evt => {
                      this.emit('sendChunk', {
                        data: {
                          bin: ((helpers.isObject(fileReader) ? fileReader.result : void 0) || (evt.srcElement ? evt.srcElement.result : void 0) || (evt.target ? evt.target.result : void 0)).split(',')[1],
                          chunkId
                        }
                      });
                    };

                    fileReader.onerror = e => {
                      this.emit('end', (e.target || e.srcElement).error);
                    };

                    fileReader.readAsDataURL(chunk);
                  } else if (window.FileReaderSync) {
                    fileReader = new window.FileReaderSync();
                    this.emit('sendChunk', {
                      data: {
                        bin: fileReader.readAsDataURL(chunk).split(',')[1],
                        chunkId
                      }
                    });
                  } else {
                    this.emit('end', 'File API is not supported in this Browser!');
                  }
                }
              }

              upload() {
                if (this.result.onPause.get()) {
                  return this;
                }

                if (this.result.state.get() === 'aborted') {
                  return this;
                }

                if (this.currentChunk <= this.fileLength) {
                  ++this.currentChunk;

                  if (this.worker) {
                    this.worker.postMessage({
                      f: this.config.file,
                      sc: this.sentChunks,
                      cc: this.currentChunk,
                      cs: this.config.chunkSize,
                      ib: this.config.isBase64
                    });
                  } else {
                    this.emit('proceedChunk', this.currentChunk);
                  }
                } else {
                  this.emit('sendEOF');
                }

                this.startTime[this.currentChunk] = +new Date();
                return this;
              }

              createStreams() {
                this.collection._debug('[FilesCollection] [UploadInstance] [createStreams]');

                let i = 1;

                while (i <= this.config.streams) {
                  this.emit('upload');
                  i++;
                }
              }

              prepare() {
                let _len;

                this.config.onStart && this.config.onStart.call(this.result, null, this.fileData);
                this.result.emit('start', null, this.fileData);

                if (this.config.chunkSize === 'dynamic') {
                  this.config.chunkSize = this.fileData.size / 1000;

                  if (this.config.chunkSize < 327680) {
                    this.config.chunkSize = 327680;
                  } else if (this.config.chunkSize > 1048576) {
                    this.config.chunkSize = 1048576;
                  }

                  if (this.config.transport === 'http') {
                    this.config.chunkSize = Math.round(this.config.chunkSize / 2);
                  } else if (isSafari) {
                    this.config.chunkSize = Math.ceil(this.config.chunkSize / 8);
                  }
                }

                if (this.config.isBase64) {
                  this.config.chunkSize = Math.floor(this.config.chunkSize / 4) * 4;
                  _len = Math.ceil(this.config.file.length / this.config.chunkSize);
                } else {
                  this.config.chunkSize = Math.floor(this.config.chunkSize / 8) * 8;
                  _len = Math.ceil(this.fileData.size / this.config.chunkSize);
                }

                if (this.config.streams === 'dynamic') {
                  this.config.streams = helpers.clone(_len);

                  if (this.config.streams > 24) {
                    this.config.streams = 24;
                  }

                  if (this.config.transport === 'http') {
                    this.config.streams = Math.round(this.config.streams / 2);
                  } else if (isSafari) {
                    this.config.streams = 1;
                  }
                }

                this.fileLength = _len <= 0 ? 1 : _len;

                if (this.config.streams > this.fileLength) {
                  this.config.streams = this.fileLength;
                }

                this.result.config.fileLength = this.fileLength;
                const opts = {
                  file: this.fileData,
                  fileId: this.fileId,
                  chunkSize: this.config.isBase64 ? this.config.chunkSize / 4 * 3 : this.config.chunkSize,
                  fileLength: this.fileLength
                };

                if (this.FSName !== this.fileId) {
                  opts.FSName = this.FSName;
                }

                const handleStart = error => {
                  if (error) {
                    this.collection._debug('[FilesCollection] [_Start] Error:', error);

                    this.emit('end', error);
                  } else {
                    this.result.continueFunc = () => {
                      this.collection._debug('[FilesCollection] [insert] [continueFunc]');

                      this.emit('createStreams');
                    };

                    this.emit('createStreams');
                  }
                };

                if (this.config.transport === 'ddp') {
                  this.config.ddp.call(this.collection._methodNames._Start, opts, handleStart);
                } else {
                  if (helpers.isObject(opts.file) ? opts.file.meta : void 0) {
                    opts.file.meta = fixJSONStringify(opts.file.meta);
                  }

                  HTTP.call('POST', "".concat(_rootUrl).concat(this.collection.downloadRoute, "/").concat(this.collection.collectionName, "/__upload"), {
                    data: opts,
                    headers: {
                      'x-start': '1',
                      'x-mtok': (helpers.isObject(Meteor.connection) ? Meteor.connection._lastSessionId : void 0) || null
                    },

                    beforeSend(xhr) {
                      xhr.withCredentials = true;
                      return true;
                    }

                  }, handleStart);
                }
              }

              pipe(func) {
                this.pipes.push(func);
                return this;
              }

              start() {
                let isUploadAllowed;

                if (this.fileData.size <= 0) {
                  this.end(new Meteor.Error(400, 'Can\'t upload empty file'));
                  return this.result;
                }

                if (this.config.onBeforeUpload && helpers.isFunction(this.config.onBeforeUpload)) {
                  isUploadAllowed = this.config.onBeforeUpload.call(Object.assign({}, this.result, this.collection._getUser()), this.fileData);

                  if (isUploadAllowed !== true) {
                    return this.end(new Meteor.Error(403, helpers.isString(isUploadAllowed) ? isUploadAllowed : 'config.onBeforeUpload() returned false'));
                  }
                }

                if (this.collection.onBeforeUpload && helpers.isFunction(this.collection.onBeforeUpload)) {
                  isUploadAllowed = this.collection.onBeforeUpload.call(Object.assign({}, this.result, this.collection._getUser()), this.fileData);

                  if (isUploadAllowed !== true) {
                    return this.end(new Meteor.Error(403, helpers.isString(isUploadAllowed) ? isUploadAllowed : 'collection.onBeforeUpload() returned false'));
                  }
                }

                Tracker.autorun(computation => {
                  this.trackerComp = computation;

                  if (!this.result.onPause.curValue && !Meteor.status().connected) {
                    this.collection._debug('[FilesCollection] [insert] [Tracker] [pause]');

                    this.result.pause();
                  }
                });

                if (this.worker) {
                  this.collection._debug('[FilesCollection] [insert] using WebWorkers');

                  this.worker.onmessage = evt => {
                    if (evt.data.error) {
                      this.collection._debug('[FilesCollection] [insert] [worker] [onmessage] [ERROR:]', evt.data.error);

                      this.emit('proceedChunk', evt.data.chunkId);
                    } else {
                      this.emit('sendChunk', evt);
                    }
                  };

                  this.worker.onerror = e => {
                    this.collection._debug('[FilesCollection] [insert] [worker] [onerror] [ERROR:]', e);

                    this.emit('end', e.message);
                  };
                } else {
                  this.collection._debug('[FilesCollection] [insert] using MainThread');
                }

                this.emit('prepare');
                return this.result;
              }

              manual() {
                this.result.start = () => {
                  this.emit('start');
                };

                const self = this;

                this.result.pipe = function (func) {
                  self.pipe(func);
                  return this;
                };

                return this.result;
              }

            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "eventemitter3": { "package.json": function module(_require7, _exports7, _module6) {

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                    //
                // node_modules/meteor/ostrio_files/node_modules/eventemitter3/package.json                                           //
                //                                                                                                                    //
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _module6.exports = {
                  "name": "eventemitter3",
                  "version": "4.0.0",
                  "main": "index.js"
                };

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              }, "index.js": function module(_require8, _exports8, _module7) {

                var has = Object.prototype.hasOwnProperty,
                    prefix = '~';

                /**
                 * Constructor to create a storage for our `EE` objects.
                 * An `Events` instance is a plain object whose properties are event names.
                 *
                 * @constructor
                 * @private
                 */
                function Events() {}

                //
                // We try to not inherit from `Object.prototype`. In some engines creating an
                // instance in this way is faster than calling `Object.create(null)` directly.
                // If `Object.create(null)` is not supported we prefix the event names with a
                // character to make sure that the built-in object properties are not
                // overridden or used as an attack vector.
                //
                if (Object.create) {
                  Events.prototype = Object.create(null);

                  //
                  // This hack is needed because the `__proto__` property is still inherited in
                  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
                  //
                  if (!new Events().__proto__) prefix = false;
                }

                /**
                 * Representation of a single event listener.
                 *
                 * @param {Function} fn The listener function.
                 * @param {*} context The context to invoke the listener with.
                 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
                 * @constructor
                 * @private
                 */
                function EE(fn, context, once) {
                  this.fn = fn;
                  this.context = context;
                  this.once = once || false;
                }

                /**
                 * Add a listener for a given event.
                 *
                 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
                 * @param {(String|Symbol)} event The event name.
                 * @param {Function} fn The listener function.
                 * @param {*} context The context to invoke the listener with.
                 * @param {Boolean} once Specify if the listener is a one-time listener.
                 * @returns {EventEmitter}
                 * @private
                 */
                function addListener(emitter, event, fn, context, once) {
                  if (typeof fn !== 'function') {
                    throw new TypeError('The listener must be a function');
                  }

                  var listener = new EE(fn, context || emitter, once),
                      evt = prefix ? prefix + event : event;

                  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];

                  return emitter;
                }

                /**
                 * Clear event by name.
                 *
                 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
                 * @param {(String|Symbol)} evt The Event name.
                 * @private
                 */
                function clearEvent(emitter, evt) {
                  if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
                }

                /**
                 * Minimal `EventEmitter` interface that is molded against the Node.js
                 * `EventEmitter` interface.
                 *
                 * @constructor
                 * @public
                 */
                function EventEmitter() {
                  this._events = new Events();
                  this._eventsCount = 0;
                }

                /**
                 * Return an array listing the events for which the emitter has registered
                 * listeners.
                 *
                 * @returns {Array}
                 * @public
                 */
                EventEmitter.prototype.eventNames = function eventNames() {
                  var names = [],
                      events,
                      name;

                  if (this._eventsCount === 0) return names;

                  for (name in events = this._events) {
                    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
                  }

                  if (Object.getOwnPropertySymbols) {
                    return names.concat(Object.getOwnPropertySymbols(events));
                  }

                  return names;
                };

                /**
                 * Return the listeners registered for a given event.
                 *
                 * @param {(String|Symbol)} event The event name.
                 * @returns {Array} The registered listeners.
                 * @public
                 */
                EventEmitter.prototype.listeners = function listeners(event) {
                  var evt = prefix ? prefix + event : event,
                      handlers = this._events[evt];

                  if (!handlers) return [];
                  if (handlers.fn) return [handlers.fn];

                  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
                    ee[i] = handlers[i].fn;
                  }

                  return ee;
                };

                /**
                 * Return the number of listeners listening to a given event.
                 *
                 * @param {(String|Symbol)} event The event name.
                 * @returns {Number} The number of listeners.
                 * @public
                 */
                EventEmitter.prototype.listenerCount = function listenerCount(event) {
                  var evt = prefix ? prefix + event : event,
                      listeners = this._events[evt];

                  if (!listeners) return 0;
                  if (listeners.fn) return 1;
                  return listeners.length;
                };

                /**
                 * Calls each of the listeners registered for a given event.
                 *
                 * @param {(String|Symbol)} event The event name.
                 * @returns {Boolean} `true` if the event had listeners, else `false`.
                 * @public
                 */
                EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
                  var evt = prefix ? prefix + event : event;

                  if (!this._events[evt]) return false;

                  var listeners = this._events[evt],
                      len = arguments.length,
                      args,
                      i;

                  if (listeners.fn) {
                    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

                    switch (len) {
                      case 1:
                        return listeners.fn.call(listeners.context), true;
                      case 2:
                        return listeners.fn.call(listeners.context, a1), true;
                      case 3:
                        return listeners.fn.call(listeners.context, a1, a2), true;
                      case 4:
                        return listeners.fn.call(listeners.context, a1, a2, a3), true;
                      case 5:
                        return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
                      case 6:
                        return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
                    }

                    for (i = 1, args = new Array(len - 1); i < len; i++) {
                      args[i - 1] = arguments[i];
                    }

                    listeners.fn.apply(listeners.context, args);
                  } else {
                    var length = listeners.length,
                        j;

                    for (i = 0; i < length; i++) {
                      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

                      switch (len) {
                        case 1:
                          listeners[i].fn.call(listeners[i].context);break;
                        case 2:
                          listeners[i].fn.call(listeners[i].context, a1);break;
                        case 3:
                          listeners[i].fn.call(listeners[i].context, a1, a2);break;
                        case 4:
                          listeners[i].fn.call(listeners[i].context, a1, a2, a3);break;
                        default:
                          if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                            args[j - 1] = arguments[j];
                          }

                          listeners[i].fn.apply(listeners[i].context, args);
                      }
                    }
                  }

                  return true;
                };

                /**
                 * Add a listener for a given event.
                 *
                 * @param {(String|Symbol)} event The event name.
                 * @param {Function} fn The listener function.
                 * @param {*} [context=this] The context to invoke the listener with.
                 * @returns {EventEmitter} `this`.
                 * @public
                 */
                EventEmitter.prototype.on = function on(event, fn, context) {
                  return addListener(this, event, fn, context, false);
                };

                /**
                 * Add a one-time listener for a given event.
                 *
                 * @param {(String|Symbol)} event The event name.
                 * @param {Function} fn The listener function.
                 * @param {*} [context=this] The context to invoke the listener with.
                 * @returns {EventEmitter} `this`.
                 * @public
                 */
                EventEmitter.prototype.once = function once(event, fn, context) {
                  return addListener(this, event, fn, context, true);
                };

                /**
                 * Remove the listeners of a given event.
                 *
                 * @param {(String|Symbol)} event The event name.
                 * @param {Function} fn Only remove the listeners that match this function.
                 * @param {*} context Only remove the listeners that have this context.
                 * @param {Boolean} once Only remove one-time listeners.
                 * @returns {EventEmitter} `this`.
                 * @public
                 */
                EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
                  var evt = prefix ? prefix + event : event;

                  if (!this._events[evt]) return this;
                  if (!fn) {
                    clearEvent(this, evt);
                    return this;
                  }

                  var listeners = this._events[evt];

                  if (listeners.fn) {
                    if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
                      clearEvent(this, evt);
                    }
                  } else {
                    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
                      if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
                        events.push(listeners[i]);
                      }
                    }

                    //
                    // Reset the array, or remove it completely if we have no more listeners.
                    //
                    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
                  }

                  return this;
                };

                /**
                 * Remove all listeners, or those of the specified event.
                 *
                 * @param {(String|Symbol)} [event] The event name.
                 * @returns {EventEmitter} `this`.
                 * @public
                 */
                EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
                  var evt;

                  if (event) {
                    evt = prefix ? prefix + event : event;
                    if (this._events[evt]) clearEvent(this, evt);
                  } else {
                    this._events = new Events();
                    this._eventsCount = 0;
                  }

                  return this;
                };

                //
                // Alias methods names because people roll like that.
                //
                EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
                EventEmitter.prototype.addListener = EventEmitter.prototype.on;

                //
                // Expose the prefix.
                //
                EventEmitter.prefixed = prefix;

                //
                // Allow `EventEmitter` to be imported as module namespace.
                //
                EventEmitter.EventEmitter = EventEmitter;

                //
                // Expose the module.
                //
                if ('undefined' !== typeof _module7) {
                  _module7.exports = EventEmitter;
                }

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              } } } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/ostrio:files/client.js");

  /* Exports */
  Package._define("ostrio:files", _exports2, {
    FilesCollection: FilesCollection
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var WebApp;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "webapp": { "webapp_client.js": function module(_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/webapp/webapp_client.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              WebApp: () => WebApp
            });
            const WebApp = {
              _isCssLoaded() {
                if (document.styleSheets.length === 0) {
                  return true;
                }

                return Array.prototype.find.call(document.styleSheets, sheet => {
                  if (sheet.cssText && !sheet.cssRules) {
                    // IE8
                    return !sheet.cssText.match(/meteor-css-not-found-error/);
                  }

                  return !Array.prototype.find.call(sheet.cssRules, rule => rule.selectorText === '.meteor-css-not-found-error');
                });
              }

            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/webapp/webapp_client.js");

  /* Exports */
  Package._define("webapp", _exports2, {
    WebApp: WebApp
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var DDP = Package['ddp-client'].DDP;

  /* Package-scope variables */
  var LivedataTest;

  /* Exports */
  Package._define("livedata", {
    DDP: DDP,
    LivedataTest: LivedataTest
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("hot-code-push");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;
  var DDP = Package['ddp-client'].DDP;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Autoupdate;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "autoupdate": { "autoupdate_client.js": function module(_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                            //
            // packages/autoupdate/autoupdate_client.js                                                                   //
            //                                                                                                            //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Autoupdate: () => Autoupdate
            });
            let ClientVersions;
            _module.link("./client_versions.js", {
              ClientVersions(v) {
                ClientVersions = v;
              }

            }, 0);
            const clientArch = Meteor.isCordova ? "web.cordova" : Meteor.isModern ? "web.browser" : "web.browser.legacy";
            const autoupdateVersions = ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {
              version: "unknown",
              versionRefreshable: "unknown",
              versionNonRefreshable: "unknown",
              assets: []
            };
            const Autoupdate = {};
            // Stores acceptable client versions.
            const clientVersions = Autoupdate._clientVersions = // Used by a self-test.
            new ClientVersions();
            Meteor.connection.registerStore("meteor_autoupdate_clientVersions", clientVersions.createStore());

            Autoupdate.newClientAvailable = function () {
              return clientVersions.newClientAvailable(clientArch, ["versionRefreshable", "versionNonRefreshable"], autoupdateVersions);
            }; // Set to true if the link.onload callback ever fires for any <link> node.


            let knownToSupportCssOnLoad = false;
            const retry = new Retry({
              // Unlike the stream reconnect use of Retry, which we want to be instant
              // in normal operation, this is a wacky failure. We don't want to retry
              // right away, we can start slowly.
              //
              // A better way than timeconstants here might be to use the knowledge
              // of when we reconnect to help trigger these retries. Typically, the
              // server fixing code will result in a restart and reconnect, but
              // potentially the subscription could have a transient error.
              minCount: 0,
              // don't do any immediate retries
              baseTimeout: 30 * 1000 // start with 30s

            });
            let failures = 0;

            Autoupdate._retrySubscription = () => {
              Meteor.subscribe("meteor_autoupdate_clientVersions", {
                onError(error) {
                  Meteor._debug("autoupdate subscription failed", error);

                  failures++;
                  retry.retryLater(failures, function () {
                    // Just retry making the subscription, don't reload the whole
                    // page. While reloading would catch more cases (for example,
                    // the server went back a version and is now doing old-style hot
                    // code push), it would also be more prone to reload loops,
                    // which look really bad to the user. Just retrying the
                    // subscription over DDP means it is at least possible to fix by
                    // updating the server.
                    Autoupdate._retrySubscription();
                  });
                },

                onReady() {
                  // Call checkNewVersionDocument with a slight delay, so that the
                  // const handle declaration is guaranteed to be initialized, even if
                  // the added or changed callbacks are called synchronously.
                  const resolved = Promise.resolve();

                  function check(doc) {
                    resolved.then(() => checkNewVersionDocument(doc));
                  }

                  const stop = clientVersions.watch(check);

                  function checkNewVersionDocument(doc) {
                    if (doc._id !== clientArch) {
                      return;
                    }

                    if (doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable) {
                      // Non-refreshable assets have changed, so we have to reload the
                      // whole page rather than just replacing <link> tags.
                      if (stop) stop();

                      if (Package.reload) {
                        // The reload package should be provided by ddp-client, which
                        // is provided by the ddp package that autoupdate depends on.
                        Package.reload.Reload._reload();
                      }

                      return;
                    }

                    if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {
                      autoupdateVersions.versionRefreshable = doc.versionRefreshable; // Switch out old css links for the new css links. Inspired by:
                      // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710

                      var newCss = doc.assets || [];
                      var oldLinks = [];
                      Array.prototype.forEach.call(document.getElementsByTagName('link'), function (link) {
                        if (link.className === '__meteor-css__') {
                          oldLinks.push(link);
                        }
                      });

                      function waitUntilCssLoads(link, callback) {
                        var called;

                        link.onload = function () {
                          knownToSupportCssOnLoad = true;

                          if (!called) {
                            called = true;
                            callback();
                          }
                        };

                        if (!knownToSupportCssOnLoad) {
                          var id = Meteor.setInterval(function () {
                            if (link.sheet) {
                              if (!called) {
                                called = true;
                                callback();
                              }

                              Meteor.clearInterval(id);
                            }
                          }, 50);
                        }
                      }

                      let newLinksLeftToLoad = newCss.length;

                      function removeOldLinks() {
                        if (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {
                          oldLinks.splice(0).forEach(link => {
                            link.parentNode.removeChild(link);
                          });
                        }
                      }

                      if (newCss.length > 0) {
                        newCss.forEach(css => {
                          const newLink = document.createElement("link");
                          newLink.setAttribute("rel", "stylesheet");
                          newLink.setAttribute("type", "text/css");
                          newLink.setAttribute("class", "__meteor-css__");
                          newLink.setAttribute("href", css.url);
                          waitUntilCssLoads(newLink, function () {
                            Meteor.setTimeout(removeOldLinks, 200);
                          });
                          const head = document.getElementsByTagName("head").item(0);
                          head.appendChild(newLink);
                        });
                      } else {
                        removeOldLinks();
                      }
                    }
                  }
                }

              });
            };

            Autoupdate._retrySubscription();
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "client_versions.js": function module(_require3, _exports3, _module2) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                            //
            // packages/autoupdate/client_versions.js                                                                     //
            //                                                                                                            //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let _objectSpread;

            _module2.link("@babel/runtime/helpers/objectSpread2", {
              default(v) {
                _objectSpread = v;
              }

            }, 0);
            _module2.export({
              ClientVersions: () => ClientVersions
            });
            let Tracker;
            _module2.link("meteor/tracker", {
              Tracker(v) {
                Tracker = v;
              }

            }, 0);

            class ClientVersions {
              constructor() {
                this._versions = new Map();
                this._watchCallbacks = new Set();
              } // Creates a Livedata store for use with `Meteor.connection.registerStore`.
              // After the store is registered, document updates reported by Livedata are
              // merged with the documents in this `ClientVersions` instance.


              createStore() {
                return {
                  update: _ref => {
                    let {
                      id,
                      msg,
                      fields
                    } = _ref;

                    if (msg === "added" || msg === "changed") {
                      this.set(id, fields);
                    }
                  }
                };
              }

              hasVersions() {
                return this._versions.size > 0;
              }

              get(id) {
                return this._versions.get(id);
              } // Adds or updates a version document and invokes registered callbacks for the
              // added/updated document. If a document with the given ID already exists, its
              // fields are merged with `fields`.


              set(id, fields) {
                let version = this._versions.get(id);

                let isNew = false;

                if (version) {
                  Object.assign(version, fields);
                } else {
                  version = _objectSpread({
                    _id: id
                  }, fields);
                  isNew = true;

                  this._versions.set(id, version);
                }

                this._watchCallbacks.forEach(_ref2 => {
                  let {
                    fn,
                    filter
                  } = _ref2;

                  if (!filter || filter === version._id) {
                    fn(version, isNew);
                  }
                });
              } // Registers a callback that will be invoked when a version document is added
              // or changed. Calling the function returned by `watch` removes the callback.
              // If `skipInitial` is true, the callback isn't be invoked for existing
              // documents. If `filter` is set, the callback is only invoked for documents
              // with ID `filter`.


              watch(fn) {
                let {
                  skipInitial,
                  filter
                } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                if (!skipInitial) {
                  const resolved = Promise.resolve();

                  this._versions.forEach(version => {
                    if (!filter || filter === version._id) {
                      resolved.then(() => fn(version, true));
                    }
                  });
                }

                const callback = {
                  fn,
                  filter
                };

                this._watchCallbacks.add(callback);

                return () => this._watchCallbacks.delete(callback);
              } // A reactive data source for `Autoupdate.newClientAvailable`.


              newClientAvailable(id, fields, currentVersion) {
                function isNewVersion(version) {
                  return version._id === id && fields.some(field => version[field] !== currentVersion[field]);
                }

                const dependency = new Tracker.Dependency();
                const version = this.get(id);
                dependency.depend();
                const stop = this.watch(version => {
                  if (isNewVersion(version)) {
                    dependency.changed();
                    stop();
                  }
                }, {
                  skipInitial: true
                });
                return !!version && isNewVersion(version);
              }

            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/autoupdate/autoupdate_client.js");

  /* Exports */
  Package._define("autoupdate", _exports2, {
    Autoupdate: Autoupdate
  });
})();/* Imports for global scope */

Mongo = Package.mongo.Mongo;
Session = Package.session.Session;
ReactiveVar = Package['reactive-var'].ReactiveVar;
Tracker = Package.tracker.Tracker;
Deps = Package.tracker.Deps;
check = Package.check.check;
Match = Package.check.Match;
EJSON = Package.ejson.EJSON;
FilesCollection = Package['ostrio:files'].FilesCollection;
Random = Package.random.Random;
HTTP = Package.http.HTTP;
Meteor = Package.meteor.Meteor;
global = Package.meteor.global;
meteorEnv = Package.meteor.meteorEnv;
WebApp = Package.webapp.WebApp;
DDP = Package['ddp-client'].DDP;
meteorInstall = Package.modules.meteorInstall;
Promise = Package.promise.Promise;
Accounts = Package['accounts-base'].Accounts;
Google = Package['google-oauth'].Google;
Autoupdate = Package.autoupdate.Autoupdate;
Reload = Package.reload.Reload;// Disable hot-code-push
if (Package.reload) {
  Package.reload.Reload._onMigrate(function () {
    return [false];
  });
}